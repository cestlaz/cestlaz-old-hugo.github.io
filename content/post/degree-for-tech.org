---
title: Do you really need a degree for tech - an MLH podcast
date: 2023-06-27T08:06:43-04:00
tags:
- CS education
- code schools
categories:
- CS education
draft: false
--- 


Yesterday, I noticed a LinkedIn post by my friend [[https://www.linkedin.com/in/jonmarkgo/][Jonathan Gottfried]]
of [[https://mlh.io/][Major League Hacking]] about an MLH podcast, [[https://podcasts.bcast.fm/the-state-of-developer-education][The State of Developer
Education]]. The episode he shared caught my eye. It was titled "Do you
Really Need a Degree for Tech?" Here's the YouTube [[https://www.youtube.com/watch?v=agD0Q4vhi6w][link]]. It featured
Lauren Schaeffer, Developer Advocate for Grammarly.

I enjoyed listening to Jon and Lauren's conversation and recommend
that you too take a listen, Lauren talked a bit about her journey and
highlighted some happenings and practices along the way in school,
IBM, MongoDB, and finally Grammarly. Truth be told, though, I didn't
feel that they really dove into the title question of "Do you really
need a degree for tech?"

The podcast did make me think a bit more about the title question and
we'll get to that later but I wanted to riff on one point Lauren made
that struck a chord with me. After pivoting from a straight
engineering role to a DevRel role, she worked it so that she could
spend one quarter a year working on an eng team. I love this. Really
smart. It can only help a customer if their DevRel people keep their
tech skills sharp and are in the trenches with the developers and
likewise the transfer of knowledge the other way has got to help the
straight dev teams. I don't think this could be a universal practice
though because I've met many DevRel people and while some, like
Lauren, clearly have the engineering chops, others I've met don't, or
at least don't yet have a strong enough tech background to be dumped
in to an eng team for a quarter and be productive.

Besides loving the idea, even with the limitations, it's something I
thought about with respect to teaching. When I was working on putting
together my teacher certification programs I thought about tech
internships for teachers as a sabbatical solution or summer
enrichment. Teachers would be certified through a strong CS Ed program
and then later, when they are ready for a sabbatical or a summer
boost, and this would mostly be aimed at high school teachers, they
could do a tech internship set up for them. I even talked to a number
of tech leaders who seemed to like the idea.

It made all the sens in the world to me. A high school teacher in the
sciences might work in a lab during their summers but for a high
school CS teacher working with a CS researcher would be pretty
worthless. Very little, if anything would end up enhancing that
teacher's in class performance when they were back to teaching. A tech
internship, on the other hand would up their software engineering
game, bring them up to speed with best and industry practices, and
even give them the platform to tell their kids about how "when they
were there."

Unfortunately, I think that's a program that will never come to
light or at least it won't for a good long time. Now that we're seeing
cert programs pop up, we're getting what I feared. A few solid
programs and many more weak certification mills. Teachers going
through the latter will in no way be prepared for a tech internship
and their students will be the worse for it. For a teacher tech
internship program to exist, we'll need to wait for the next few crops of
teachers to work their way to their licenses and hope that they select
the strong certification programs.

So, that was my big takeaway from the podcast but I do encourage you
to listen to the whole thing.

To get back to the title question of "is a degree necessary?" - that's
a debate that's gone on for a while now and it frequently focuses on
code school vs college. I think there are a couple of additional
wrinkles to add.

Are we talking about K12 --> Code school --> workforce or are we
talking about K12 --> college for non CS --> Code school --> >
workforce. These are two very different things. I recently wrote about
[[https://cestlaz.github.io/post/tech-and-lib-arts/][liberal arts]] education and how I feel that a BA in CS can be more
valuable than a BS in CS for many people and that the liberal arts, if
taken the right way by a student that's ready for them can be a big
boon to our society as we try to get a handle on the ethical and AI
related issues that have been too long ignored since we decided that
education should only be for jobs.

The code school in some ways can be viewed as a lightweight CS minor
focused on industry so is it really different than someone doing an
undergrad in anything and taking enough CS for a job? Probably
not. The CS major probably gives the student more adaptability and
grounded base knowledge but then the CS major also requires a lot of
cruft only useful for the future PhD candidate.

On the other hand, K12 right to the code school, particularly given
the damage caused by common core, NCLB and the like will miss serious
opportunities on the "soft" side from college and yes, the humanities.

No answers here but more to think about.

So, once again, check out the [[https://www.youtube.com/watch?v=agD0Q4vhi6w][podcast]]. I'm going to have to look at
the other released episodes myself when I get a chance.









