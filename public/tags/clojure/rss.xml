<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clojure on C&#39;est la Z</title>
    <link>https://newblog/tags/clojure/</link>
    <description>Recent content in clojure on C&#39;est la Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Dec 2022 10:13:56 -0400</lastBuildDate><atom:link href="https://newblog/tags/clojure/rss.xml" rel="self" type="application/rss" />
    <item>
      <title>Advent 2022 - day 3 - sets</title>
      <link>https://newblog/post/advent-2022-day03/</link>
      <pubDate>Sat, 03 Dec 2022 10:13:56 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2022-day03/</guid>
      <description>Day 3 ended up being a quick one. That is, as long as your language supports set operations. You can do it without set operations but it&amp;#39;s easier if you&amp;#39;ve got them.
Part 1 Input is a file of text where each line is an input.
You have to read each line, split it in half and then find the common letter between the left and right halves and then apply their scoring rules on that letter.</description>
    </item>
    
    <item>
      <title>Advent of Code 2022 - Days 1 and 2</title>
      <link>https://newblog/post/advent-2022-day01-01/</link>
      <pubDate>Fri, 02 Dec 2022 13:59:06 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2022-day01-01/</guid>
      <description>It&amp;#39;s Advent of Code season again. Every day a new two part programming challenge and once again I&amp;#39;m taking part. At least until grading and other end of term obligations end up eating my lunch.
I wasn&amp;#39;t planning on writing anything up but the first two days looked like nice problems for CS1 or even CS0 students and since my friend Steve was writing up his take, I thought I&amp;#39;d at least comment on the first two.</description>
    </item>
    
    <item>
      <title>Clojurescript Components</title>
      <link>https://newblog/post/clojurescript-components/</link>
      <pubDate>Sun, 12 Jan 2020 12:19:00 -0400</pubDate>
      
      <guid>https://newblog/post/clojurescript-components/</guid>
      <description>I got some positive feedback from my first Clojurescript post and video so I thought I&amp;#39;d continue with the series.
Here we&amp;#39;ll continue to build a simple Clojurescript/Shadow-cljs/Reagent/Tailwindcss application by creating some reusable components. It&amp;#39;s one of the things that make Clojurescript so nice for web development. Here&amp;#39;s a link to the GitHub repo with the code: https://github.com/zamansky/shadow-cljs-demo
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34; src=&amp;#34;https://www.youtube.com/embed/_CTTbC6owS0&amp;#34; frameborder=&amp;#34;0&amp;#34; allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;</description>
    </item>
    
  </channel>
</rss>
