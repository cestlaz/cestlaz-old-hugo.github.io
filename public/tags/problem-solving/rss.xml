<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>problem solving on C&#39;est la Z</title>
    <link>https://newblog/tags/problem-solving/</link>
    <description>Recent content in problem solving on C&#39;est la Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Nov 2019 09:02:09 -0400</lastBuildDate><atom:link href="https://newblog/tags/problem-solving/rss.xml" rel="self" type="application/rss" />
    <item>
      <title>Advent Of Code 2019</title>
      <link>https://newblog/post/advent-of-code-2019/</link>
      <pubDate>Fri, 29 Nov 2019 09:02:09 -0400</pubDate>
      
      <guid>https://newblog/post/advent-of-code-2019/</guid>
      <description>It&amp;#39;s almost December which means it&amp;#39;s almost time for Advent of Code 2019. Advent of code is an annual computer programming competition created and ruyn by Eric Wastl. It&amp;#39;s been running since 2015. I&amp;#39;ve written about it before, mostly from a teacher&amp;#39;s point of view (Solve A to Solve B, Data structures and Hidden Complexity, Tools can shape how we think and a few others). Basically, Eric releases one poblem a day at midnight from Dec 1 through Dec 25.</description>
    </item>
    
    <item>
      <title>Maze Solving (for real) and Code Tracing</title>
      <link>https://newblog/post/maze-solving-code-tracing/</link>
      <pubDate>Sat, 20 Jul 2019 16:40:16 -0400</pubDate>
      
      <guid>https://newblog/post/maze-solving-code-tracing/</guid>
      <description>Every year for the past sixteen we venture down to Lancaster Pa. for a weekend of car camping. Actually, there&amp;#39;s not much camping anymore. I used to be a bit more hardcore having done a few sections of the Appalachian Trail in my youth. Now, as I&amp;#39;ve gotten older I&amp;#39;ve come to appreciate little things like air conditioning, showers, beds, and toilets. So, nowadays we usually try to get a cabin at a camp site.</description>
    </item>
    
    <item>
      <title>Solve A To Solve B</title>
      <link>https://newblog/post/solve-a-to-solve-b/</link>
      <pubDate>Fri, 18 Jan 2019 19:36:59 -0400</pubDate>
      
      <guid>https://newblog/post/solve-a-to-solve-b/</guid>
      <description>So many programming assignments involve a direct solution. Write a program to do this or write a problem to solve that. It&amp;#39;s pretty typical. There&amp;#39;s nothing wrong with assignments like these. They allow students to practice what they&amp;#39;ve been learning and it gives them the opportunity to create some cool programs. All the same, I like it when there&amp;#39;s an indirect problem. You&amp;#39;re faced with a problem but in order to solve it you first have to solve some other problem</description>
    </item>
    
    <item>
      <title>Breaking down problems and writing</title>
      <link>https://newblog/posts/whats-next/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/whats-next/</guid>
      <description>This question appeared on Facebook a few days ago:
Does anyone have an effective way to teach students how to break down a problem into steps and then solve each step one by one? I think my students are struggling with a large question and breaking it in subsequent parts.
There were some good suggestions. I wanted to add something but didn&amp;#39;t have time then so I thought I&amp;#39;d write it up now.</description>
    </item>
    
  </channel>
</rss>
