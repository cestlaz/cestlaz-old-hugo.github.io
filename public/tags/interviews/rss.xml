<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>interviews on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/interviews/</link>
    <description>C&#39;est la Z (interviews)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Apr 2023 10:22:02 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/interviews/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>The Technical Interview - we can do better</title>
      <link>https://cestlaz.github.io/post/tech-interview-better/</link>
      <pubDate>Thu, 06 Apr 2023 10:22:02 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/tech-interview-better/</guid>
      <description>&lt;p&gt;
I&amp;#39;m spending the week down in Atlanta. Never been before but since
Batya is spending the semester teaching at Georgia State University,
it seemed like a good chance to see her teach and check out a new
town.&lt;/p&gt;
&lt;p&gt;
That was the plan anyway. At least until I made the unfortunate
decision to come down with Covid again. Symptoms are mild but I&amp;#39;m
stuck camping out in our Airbnb while Devorah and Batya can see the
sights.&lt;/p&gt;
&lt;p&gt;
So, might as well spend the time writing a post or two.&lt;/p&gt;
&lt;p&gt;
The other day a younger friend announced that he got a new job on
LinkedIn. He was caught up in an earlier round of big tech layoffs so
it was nice to see him landing on his feet rather quickly. Still,
knowing what he always brought to the table, I was surprised he was
let go to begin with but then, so many big companies have positively
moronic layoff policies.&lt;/p&gt;
&lt;p&gt;
Anyway, my friend was lamenting the technical interview process. As a
devops person the algorithmic trick questions really don&amp;#39;t apply,
particularly since he already has a track record of actual, you know,
devops work to point to. He actually called an interviewer on this at
one point and even though, I&amp;#39;m sure he was 100% right, it did not go
well. While he didn&amp;#39;t go into details he talked about the interview
process that landed him his forthcoming job and how it was much more
reasonable and relevant to both the role he was applying for and if it
and he were a fit.&lt;/p&gt;
&lt;p&gt;
The technical interview - that algorithmic brain teaser has been
popular at big tech for a long time now. The big boys - Google,
Facebook, and the others use it and since tech is a copycat league, so
do most small houses.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re not familiar, the idea is that the candidate is presented
with a problem to solve - something similar to the problems you&amp;#39;d get
in a programming competition. It might be something like writing a
routine to reverse a singly linked list or print the nodes in a binary
tree level-wise. Of course, they can get much trickier and the
candidate is doing this under the gun. It&amp;#39;s stressful and in my view
not a great way to assess a candidate.&lt;/p&gt;
&lt;p&gt;
The truth is, while there are some people who can just solve these
problems on the fly, the reality is, for most people, they have to
specifically train for this style of interview. The more problems they
do, the more likely they&amp;#39;ll see something they&amp;#39;ve already done or
something similar to what they&amp;#39;ve already done.&lt;/p&gt;
&lt;p&gt;
Then it becomes the &amp;#34;can I fake it to make it look like I haven&amp;#39;t seen
this problem before&amp;#34; interview.&lt;/p&gt;
&lt;p&gt;
This is why schools where students have an easier time getting
together to work on and share solutions have a huge edge in this
process (read that as rich elite schools where kids live on campus and
don&amp;#39;t have to work to pay the bills).&lt;/p&gt;
&lt;p&gt;
This whole process works for the big and/or hot company - the Google&amp;#39;s
of the world because they can afford to miss a huge number of great
candidates who wash out on the technical interview just so long as
they fill their quota with candidates who can pass their test. Sure,
it hurts diversity, equity, and yeah, talent, but if we&amp;#39;re really
being honest, big tech talks the equity and diversity talk much more
than they walk the walk.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s bad enough that the big boys use this flawed but convenient for
them method. It&amp;#39;s worse that everyone else feels compelled to do the
same. It makes for a miserable stressful job search and in the end,
for the vast majority of tech employees who were hired through this
process, they never need to think about problems like these again.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m reminded of another friend of mine, Dan, who has been CTO / Head
of Engineering for a number of small to mid size companies. He doesn&amp;#39;t
do a Google style technical interview. He told me once &amp;#34;I can&amp;#39;t
compete with Google. If I do the same interview that they do, I&amp;#39;ll
only get Google washouts - if they can pass the Google interview,
they&amp;#39;ll certainly chose Google over me.&amp;#34; He came to the sensible
conclusion that he needed to come up with another way of assessing
candidate fit - something that would catch the amazing employee who
didn&amp;#39;t thrive under the algorithmic tech interview. It might make the
process more complicated for the company or more time consuming but I
wish more places followed Dan&amp;#39;s lead. &lt;/p&gt;
&lt;p&gt;
In addition to my friend&amp;#39;s post, I&amp;#39;ve also been thinking about this
since I&amp;#39;ve been teaching data structures and specifically run time and
whenever I do this I mull over where my focus should be. How important
are the specific data structures we teach given that the minority of
CS students will ever go on to need to know them at the level of
detail we teach? Do we need to actually prove the run time of
algorithms? Should we do more interview type problems because our kids
by and large need them?&lt;/p&gt;
&lt;p&gt;
These are questions that should probably be talked about more in
college CS programs. I&amp;#39;ll share my specific thoughts on where I think
the emphasis should be next time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On Technical Interviews And Diversity</title>
      <link>https://cestlaz.github.io/post/technical-interviews-and-diversity/</link>
      <pubDate>Sun, 28 Apr 2019 11:27:46 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/technical-interviews-and-diversity/</guid>
      <description>&lt;p&gt;
I recently stumbled upon &lt;a href=&#34;https://twitter.com/laurieontech/with_replies&#34;&gt;Laurie Barth&lt;/a&gt; on Twitter and noticed a couple
of tweets about tech interviews and the hiring process, something I&amp;#39;ve
been thinking about recently.&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Solid rant. I
think the teach to the programming test market already exists. And
it’s why interviewers who subscribe to these tactics get upset if a
candidate admits they’ve seen the problem previously. Because it ruins
the illusion that this is revealing how candidates think. &lt;a
href=&#34;https://t.co/DpHgQx0TST&#34;&gt;https://t.co/DpHgQx0TST&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Laurie (@laurieontech) &lt;a
href=&#34;https://twitter.com/laurieontech/status/1121879805862064131?ref_src=twsrc%5Etfw&#34;&gt;April
26, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;One of the
things I often think about is feeling like I got lucky making it
through some of my interviews...and then killed it on the job. We know
interviews don’t match the on the job skills, it’s about time we did
something about it. &lt;a
href=&#34;https://t.co/xmUXkGvtoA&#34;&gt;https://t.co/xmUXkGvtoA&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Laurie (@laurieontech) &lt;a
href=&#34;https://twitter.com/laurieontech/status/1122496300912717825?ref_src=twsrc%5Etfw&#34;&gt;April
28, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
I guess I&amp;#39;ve been thinking about it because I&amp;#39;m teaching a section of
Data Structures which, along with Algorithms, provides the base
knowledge you need to have a shot at the typical &amp;#34;Google Style&amp;#34;
technical interview.&lt;/p&gt;
&lt;p&gt;
I say &amp;#34;base knowledge&amp;#34; because just completing those two classes
doesn&amp;#39;t really prepare you. It gives you the building blocks but you
really have to prep specifically for the types of questions they might
give you. Unfortunately, for most kids it involves a whole lot of
rejection and failure before you start getting offers. &lt;/p&gt;
&lt;p&gt;
You might get a problem that has a bad brute force solution and during
the relatively short interview, devoid of your typical resources and
comforts you have to turn it into a much more efficient one. The
argument is that the interviewer is really trying to see how you think
about a problem but having spoken to many, many tech employees who do these
interviews that&amp;#39;s a specious argument at best. It&amp;#39;s really a test of
&amp;#34;who has seen the problem or something similar before but can fake
that they haven&amp;#39;t the best.&amp;#34; &lt;/p&gt;
&lt;p&gt;
While it&amp;#39;s true that you will get some candidates who can solve the
problems on the spot you&amp;#39;re going to miss out on a whole bunch of
great candidates who just don&amp;#39;t do well on that &amp;#34;Google style&amp;#34; of
interview. At the same time we keep hearing that, as Laurie tweeted,
the skills required on the job don&amp;#39;t match the ones needed to pass the
interview. &lt;/p&gt;
&lt;p&gt;
This doesn&amp;#39;t really matter to the big, hot companies. The Googles and
Facebooks of the world. So many students coming out of college want to
work for them that they can afford to miss on tons of great candidates
so long as they hit on enough good ones. &lt;/p&gt;
&lt;p&gt;
I put the word &amp;#34;diversity&amp;#34; in the title of this post and you might
wonder what I was going for there. So far, I&amp;#39;m just ranting about the
interview process. This becomes a diversity and privilige issue
because the process favors &amp;#34;elite&amp;#34; CS schools with established CS
cultures. I&amp;#39;m not talking about the fact that they pre-select high
performing candidates nor the fact that all the tech companies go to
those schools, sometimes exclusively for recruiting. I&amp;#39;m talking about
how the school&amp;#39;s student tech culture helps prepare the students for
the technical interview. &lt;/p&gt;
&lt;p&gt;
From my discussions with many graduates from many of these institutions, while
classes don&amp;#39;t prep for interviews, students at these CS schools
regularly share interview questions. Friends and classmates talk about
the questions they got and help each other out with practice
sessions - formal or otherwise. I&amp;#39;m certainly not faulting students
for doing this but it&amp;#39;s another known  secret. We all know that the
more tech interview questions you see the better prepared you&amp;#39;ll be -
both because you&amp;#39;ll get better at that specific problem solving skill
and also because you&amp;#39;ll likely get interview questions that are
already in your library. It&amp;#39;s that latter part that makes the whole
process very nod, nod, wink wink. &lt;/p&gt;
&lt;p&gt;
Nothing stops other students at other schools from doing similar but
it&amp;#39;s much harder at a commuter school where kids live off campus and
have to work part time jobs. It&amp;#39;s the reason I&amp;#39;m fighting so hard for
space and working on building a postitive tech culture at Hunter. Not
specifically for interviews but to help my students become a support
network for each other.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll finish by noting that while this &amp;#34;technical interview&amp;#34; process
might more or less work for the big boys - the hot company du jour, it
probably doesn&amp;#39;t for eveyrone else. A buddy of mine was talking to me
about the process he uses at his much smaller company. He noted that
he could use the &amp;#34;Google interview&amp;#34; process for his future employees
but since his company was much smaller and lesser known, people who
did well would probably also get offers from the big boys and go work
for them. His goal was to come up with a process that catches the
great candidates that &lt;strong&gt;don&amp;#39;t&lt;/strong&gt; do well on the Google interview to try
to catch the great talent that doesn&amp;#39;t do well on today&amp;#39;s technical
interviews. A number of smaller companies seem to be starting to do
this and from the few I&amp;#39;ve spoken to it seems to be going well.&lt;/p&gt;
&lt;p&gt;
I get that big companies are machines and look for uniformity in all
processes including the interview process but there has to be a
better, more human way to evaluate talent than a one size fits all
process where the norm is failure - particularly when it seldom
relates to actual skills needed on the job.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Whiteboard interviews</title>
      <link>https://cestlaz.github.io/posts/whiteboard-interviews/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/whiteboard-interviews/</guid>
      <description>&lt;p&gt;
A few days ago, I saw a &lt;a href=&#34;https://theoutline.com/post/1166/programmers-are-confessing-their-coding-sins-to-protest-a-broken-job-interview-process%0A&#34;&gt;piece&lt;/a&gt; on &lt;a href=&#34;https://twitter.com/dhh&#34;&gt;David Heinemeier Hansson&amp;#39;s&lt;/a&gt; tweet on
whiteboard interviews:&lt;/p&gt;
&lt;div class=&#34;html-block&#34;&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Hello, my name is David. I would fail to write bubble sort on a whiteboard. I look code up on the internet all the time. I don&amp;#39;t do riddles.&lt;/p&gt;&amp;mdash; DHH (@dhh) &lt;a href=&#34;https://twitter.com/dhh/status/834146806594433025&#34;&gt;February 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;
I&amp;#39;m not a huge fan of the whiteboard interview but I think many of the
tweets missed the point. Most of the whiteboard interviews I&amp;#39;m
aware of involve algorithmic problem solving while the tweets, at
least the ones I&amp;#39;ve seen all refer to things that indeed one would
look up. Things like API calls - not things that whiteboard interviewers
typically care about.&lt;/p&gt;
&lt;p&gt;
Tim Bray takes that point of view and shared his thoughts in a
&lt;a href=&#34;https://www.tbray.org/ongoing/When/201x/2017/03/04/Whiteboard-Interviews&#34;&gt;recent blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
The idea behind the whiteboard interview isn&amp;#39;t all bad. The
interviewer has an opportunity to see how the candidate thinks and
works through a problem and in an ideal situation the interviewer is,
at least to a point, coaching the candidate to help them through the
process. It seems to me that the problem lies more in the types of
questions asked and the skill of the interviewer rather than the idea
that candidates work through a problem live.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d imagine that whiteboard interview success skew towards candidates
who work well in isolation in a short period of time, have a good
amount of exposure to these types of algorithmic problems. Also those
who have practiced and trained specifically for the interview will
have a huge edge. For people new to the process, it can be very
stressful.&lt;/p&gt;
&lt;p&gt;
Once a candidate has accepted a position, they&amp;#39;ll likely be working
with a team, with additional resources, and with time to solve
problems. This is a very different environment.  The whiteboard
interview, much like the SAT is thus something of an arbitrary
gatekeeper that a candidate must prepare for and conquer rather than a
skill that they must develop that will make them a more productive
team member.&lt;/p&gt;
&lt;p&gt;
This whole process tends to advantage those with the time and
background to prepare - this is one of the places where the argument
that whiteboard interview hurt diversity come from.&lt;/p&gt;
&lt;p&gt;
I could be totally wrong but I seem to recall that the whiteboard
interview, at least in terms of external visibility grew out of the
legendary Google puzzle interview questions.&lt;/p&gt;
&lt;p&gt;
A tech giant like Google can interview however they like and they&amp;#39;ll
still get the talent. They go to the most selective institutions where
candidates have already been culled for success. If they then interview 100
candidates and 10 of them would be good fits, as long as a couple
thrive through the whiteboard interview process, they&amp;#39;ll get their
engineer. They&amp;#39;ll miss out on a lot of great talent but they can cast
such a large net they&amp;#39;ll fill there seats with productive employees.&lt;/p&gt;
&lt;p&gt;
On the other hand, smaller companies will certainly miss out on great
talent if they follow the same approach.&lt;/p&gt;
&lt;p&gt;
Is there a better way?&lt;/p&gt;
&lt;p&gt;
Some companies pre-assign mini projects and then discuss that at the
interview. Pairing could also be a lower stress alternative to the
technical interview. Another option would be to look at a candidates
existing projects.&lt;/p&gt;
&lt;p&gt;
An interesting question is &amp;#34;why do so many companies use the
whiteboard interview?&amp;#34; I can&amp;#39;t say for certain but I wouldn&amp;#39;t be
surprised if it was a simple as &amp;#34;because Google does it.&amp;#34;&lt;/p&gt;
&lt;p&gt;
For over 100 years, Stuyvesant high school required students study
mechanical drawing (drafting). The relevance of the subject lessened over the
decades and what was taught in many ways has become a joke. A typical
class during the CAD parts of the class might be going over the
&lt;strong&gt;&lt;strong&gt;cylinder&lt;/strong&gt;&lt;/strong&gt; command in CadKey. That&amp;#39;s like spending a day studying
the &lt;strong&gt;&lt;strong&gt;edit&lt;/strong&gt;&lt;/strong&gt; menu in Microsoft Word in an English class. If you can&amp;#39;t
tell, I&amp;#39;m not a fan. Drafting at Stuyvesant is the vestigial organ of
the course of study.&lt;/p&gt;
&lt;p&gt;
My point isn&amp;#39;t to bash drafting at Stuy but rather that there have
been any number of schools that require their students take drafting
even though it doesn&amp;#39;t prepare students for, nor lead them to anything
else in the schools curriculum (which now can be said for Stuy&amp;#39;s
drafting requirement). I&amp;#39;ve spoken to teachers and principals at these
schools and we go back and forth as I press them for the reason for
the requirement and ultimately, they tell me that their school
requires drafting &amp;#34;because Stuyvesant does.&amp;#34;&lt;/p&gt;
&lt;p&gt;
Why do so many small companies employ the whiteboard interview?
Because the big kids do. The trouble is that the big kids can get away
with it, the smaller players on the other hand, are hurting
themselves. Even the bigger players would be well served to
try to come up with an interview process that better assesses fit
rather than a course filter that while it does pull in talent misses
talent as well.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>