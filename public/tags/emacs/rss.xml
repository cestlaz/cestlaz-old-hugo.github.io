<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacs on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/emacs/</link>
    <description>C&#39;est la Z (emacs)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Feb 2024 11:31:06 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/emacs/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Using Emacs 82 - Conda and Direnv</title>
      <link>https://cestlaz.github.io/post/using-emacs-82-conda-direnv/</link>
      <pubDate>Tue, 13 Feb 2024 11:31:06 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-82-conda-direnv/</guid>
      <description>&lt;p&gt;
One of the things I want to do now that I have some time is get my
head around all the modern AI stuff. I&amp;#39;m starting with a review or
things I&amp;#39;ve already done  by going through Andrew Ng&amp;#39;s Coursera ML
class. I&amp;#39;ll probably continue with his courses but I&amp;#39;m certainly open
to any suggestions (specifically for a CS guy who&amp;#39;s not so strong on
the math side).&lt;/p&gt;
&lt;p&gt;
This means diving back into Python even though Clojure is usually my
weapon of choice. I thought I&amp;#39;d see how the platform has changed.&lt;/p&gt;
&lt;p&gt;
First up &lt;a href=&#34;https://www.anaconda.com/&#34;&gt;Anaconda&lt;/a&gt; which is a platform and package manager for
Python. I opted for &lt;a href=&#34;https://docs.anaconda.com/free/miniconda/index.html&#34;&gt;Miniconda&lt;/a&gt; which just gives the basics and I can
always add anything missing later.&lt;/p&gt;
&lt;p&gt;
See the previous two links to install Anaconda or Miniconda. The video
goes over basic use. It&amp;#39;s a lot like virtualenv. You can set up an
Python environment with specific packages and then activate or
deactivate whichever environment you wish to work under.&lt;/p&gt;
&lt;p&gt;
On the Emacs side, I installed the package conda as follows:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (use-package conda :straight &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        :config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (conda-env-initialize-interactive-shells)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (conda-env-initialize-eshell))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And that was pretty much it. To activate an particular environment we
just use &lt;code&gt;conda-env-actiate&lt;/code&gt;. Again, this is covered in the video.&lt;/p&gt;
&lt;p&gt;
Next up is &lt;a href=&#34;https://direnv.net/&#34;&gt;direnv&lt;/a&gt;. This lets you customize your environment per
directory. You can do things like set specific environment variables
or even, in our case, activate a conda environment just by going into
a project directory. Basic installation instructions can be found on
the home page.&lt;/p&gt;
&lt;p&gt;
To set up direnv to work with Anaconda/Miniconda though took a bit of
work. Between a few web sites and videos, I found that this worked.&lt;/p&gt;
&lt;p&gt;
First, I had to create a file named &lt;code&gt;.direnvrc&lt;/code&gt; in my home directory
with these contents:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  layout_conda() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; Ref Url: https://github.com/direnv/direnv/wiki/Python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; local ANACONDA_HOME=&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt;${HOME}/anaconda3&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # PATH_add “$ANACONDA_HOME”/bin1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    if [ -n &amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ]; then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # Explicit environment name from layout command.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    local env_name=&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    source activate ${env_name}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    elif (grep -q name: environment.yml); then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # Detect environment name from `environment.yml` file in `.envrc` directory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    source activate `grep name: environment.yml | sed -e ‘s/name: //’ | cut -d
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; -f 2 | cut -d ‘&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    else
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&amp;gt;&amp;amp;2 echo No environment specified)&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fi&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You might have to play with it if you&amp;#39;re not using the miniconda
installation defaults.&lt;/p&gt;
&lt;p&gt;
Next, I had to edit my .zshrc:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export iam&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;whoami&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export CONDA_HOME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;iam&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/miniconda3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PATH&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; *&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONDA_HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin:&amp;#34;&lt;/span&gt;* &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONDA_HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PATH&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;&amp;lt;&amp;lt; my export init &amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt;&amp;gt;&amp;gt; conda initialize &amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# !! Contents within this block are managed by &amp;#39;conda init&amp;#39; !!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __conda_setup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/zamansky/miniconda3/bin/conda&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shell.zsh&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hook&amp;#39;&lt;/span&gt; 2&amp;gt; /dev/null&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $? -eq &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$__conda_setup&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/zamansky/miniconda3/etc/profile.d/conda.sh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            . &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/zamansky/miniconda3/etc/profile.d/conda.sh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/zamansky/miniconda3/bin:&lt;/span&gt;$PATH&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    unset __conda_setup
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;&amp;lt;&amp;lt; conda initialize &amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export LANG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;en_US.UTF-8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;direnv hook zsh&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Some of that was added when I installed direnv and followed those
directions. I think for the direnv Anaconda support I added the first
two lines and the last one.&lt;/p&gt;
&lt;p&gt;
Finally, in your project&amp;#39;s root directory create a file named &lt;code&gt;.envrc&lt;/code&gt;
which contains the line &lt;code&gt;layout conda name&lt;/code&gt; where &lt;strong&gt;name&lt;/strong&gt; is replaced with
the name of the conda environment you want.&lt;/p&gt;
&lt;p&gt;
The first time you go into the directory it will tell you that you
haven&amp;#39;t allowed direnv to work there yet and you have to enter &lt;code&gt;direnv
allow&lt;/code&gt;. After you do that, every time you enter that directory it will
activate your conda environment, leave it, it will deactivate it.&lt;/p&gt;
&lt;p&gt;
In Emacs, I found two packages that worked pretty much the same. One
named &lt;code&gt;direnv&lt;/code&gt; and the other &lt;code&gt;envrc&lt;/code&gt;. I opted for envrc.&lt;/p&gt;
&lt;p&gt;
You simply add:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (use-package envrc :straight &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    :config (envrc-global-mode))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
to your config and when you open a file in that directory, it will
use direnv.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Important note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s pretty much it. This all worked on my desktop but it&amp;#39;s giving
me problems on my laptop. It appears that conda mode isn&amp;#39;t working. It
allows me to select the environment but it doesn&amp;#39;t actually activate
it. I think it&amp;#39;s a path issue even though I think both my desktop and
laptop are the same. I&amp;#39;ll update this once I figure out what&amp;#39;s up on
the laptop side.&lt;/p&gt;
&lt;p&gt;
All in all, I&amp;#39;m pretty happy with this. I love that I can
automatically start an environment just by accessing a file in the
directory. Too many times, I forget and mess things up.&lt;/p&gt;
&lt;p&gt;
The video steps through everything and demos both packages:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/UrJoBaJv5kA?si=_W-OU3RG7o3K5LQ4&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 17 - a thesaurus mode</title>
      <link>https://cestlaz.github.io/post/learning-elisp-17/</link>
      <pubDate>Thu, 25 Jan 2024 08:45:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-17/</guid>
      <description>
&lt;p&gt;
When we last left our heroes we had made the API call to
dictionaryapi.com, gotten the response and coverted the json string
into elisp data. Specifically an array that contained a hash table.&lt;/p&gt;
&lt;p&gt;
Today&amp;#39;s video will take us the rest of the way to our thesaurus mode -
run the function and we&amp;#39;ll get a list of synonyms for the word we&amp;#39;re
currently at.&lt;/p&gt;
&lt;p&gt;
First, we had to pull out the synonyms from the response. To do that
we used basic elisp data manipulation. We used &lt;strong&gt;(aref json-resp 0)&lt;/strong&gt; to
pull out the hash table, which was the 0&lt;sup&gt;th&lt;/sup&gt;  element of the array
response, then wrap that in &lt;strong&gt;(gethash &amp;#34;meta&amp;#34;…)&lt;/strong&gt; to pull out the
&amp;#34;meta&amp;#34; hash entry. That&amp;#39;s a hash table in its own right so we then
pull out the &amp;#34;syns&amp;#34; element with another &lt;strong&gt;gethash&lt;/strong&gt; and then finally,
since that&amp;#39;s an array with an array in it, another &lt;strong&gt;aref&lt;/strong&gt;. The
complete code is up at gitlab but it&amp;#39;s essentially:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;gethash&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;syns&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;gethash&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta&amp;#34;&lt;/span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; json-resp &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This gives us an array of synonym strings but we want it to be a list
so we used &lt;strong&gt;mapcar&lt;/strong&gt; to convert.&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;identity&lt;/span&gt; word-list)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
There&amp;#39;s probably a better way to do this but that&amp;#39;s what came to mind.&lt;/p&gt;
&lt;p&gt;
From there, the actual function to replace the word under the cursor
with its synonym is pretty straightforward:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun word-to-syn (n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (interactive &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (let* ( (word (current-word))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (word-list (get-synonyms word))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (new-word (&lt;span style=&#34;color:#a6e22e&#34;&gt;completing-read&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Replacement:&amp;#34;&lt;/span&gt; word-list)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (backward-word)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (kill-word &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; new-word)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The &lt;strong&gt;current-word&lt;/strong&gt; function returns the word at or before the cursor
location. We then use the &lt;strong&gt;get-synonyms&lt;/strong&gt; function that we just
completed and then use &lt;strong&gt;completing-read&lt;/strong&gt; which lets us select a word
from the synonym list.&lt;/p&gt;
&lt;p&gt;
Once we have the replacement word, it&amp;#39;s just buffer manipulations to
delete the old word and insert the new one.&lt;/p&gt;
&lt;p&gt;
The rest of the video shows turning this into a mode and binding the
function to a key.&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s it for the elisp series for now. I&amp;#39;ll do more if I can
think of interesting and fun things to do but no promises.&lt;/p&gt;
&lt;p&gt;
You can get all the code at the repo linked below:&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ZBN4Kphv-ac?si=lMyYassaUwz6ia8g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=ZBN4Kphv-ac&#34;&gt;https://www.youtube.com/watch?v=ZBN4Kphv-ac&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 16 - using a web API</title>
      <link>https://cestlaz.github.io/post/learning-elisp-16/</link>
      <pubDate>Tue, 16 Jan 2024 11:18:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-16/</guid>
      <description>
&lt;p&gt;
Sorry for the long break. Once December started, I spent the first few
weeks spending my coding time on &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt;, then just got
sidetracked but now it&amp;#39;s time to get going again.&lt;/p&gt;
&lt;p&gt;
This is the last elisp topic I specifically wanted to cover so this
and the next video mmight be the end of this series, we&amp;#39;ll see.&lt;/p&gt;
&lt;p&gt;
What are we doing today? Using a web API. Basically, if we want to use
some external data source or facility a typical way to make that
happen is through a web API. We could write our own, but for today
we&amp;#39;re going to use a free to use online thesaurus service. The idea is
that we can send it a word and we&amp;#39;ll get back synonyms. The end result
will be, as we&amp;#39;re writing, we hit the magic key, get a list of
alternative words and then select one, or not.&lt;/p&gt;
&lt;p&gt;
The API we&amp;#39;ll be using is at &lt;a href=&#34;https://dictionaryapi.com/.&#34;&gt;https://dictionaryapi.com/.&lt;/a&gt; It&amp;#39;s part of 
Merriam-Webster&amp;#39;s set of free to use tools. To use it, we have to go
to &lt;a href=&#34;https://dictionaryapi.com/register/index&#34;&gt;this&lt;/a&gt; page and register to get an API key, then to use it to get
synonyms for a word, you go to a url formatted like this:&lt;/p&gt;

https://dictionaryapi.com/api/v3/references/thesaurus/json/&lt;b&gt;word&lt;/b&gt;?key=&lt;b&gt;MYKEY&lt;/b&gt;
&lt;p&gt;
where &lt;strong&gt;word&lt;/strong&gt; is the word you want to lookup and &lt;strong&gt;MYKEY&lt;/strong&gt; is the key you
got when registering.&lt;/p&gt;
&lt;p&gt;
The result will be a string of data representing the &lt;a href=&#34;https://json.org&#34;&gt;JSON&lt;/a&gt; formatted
response.&lt;/p&gt;
&lt;p&gt;
How do we do this?&lt;/p&gt;
&lt;p&gt;
First, to get the data, we can use elisp&amp;#39;s
&lt;code&gt;url-retreive-synchronously&lt;/code&gt;. This takes a string with our url and
returns a buffer with the results. In the video, we first show that we
can use the &lt;code&gt;switch-to-buffer&lt;/code&gt; function to go to the buffer with the
results:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mykey&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar base-url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://dictionaryapi.com/api/v3/references/thesaurus/json/&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (switch-to-buffer (url-retrieve-synchronously (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; base-url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;polite&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?key=&amp;#34;&lt;/span&gt; key)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and then show how we can use &lt;code&gt;with-current-buffer&lt;/code&gt; to take the buffer
with our data and manipulate it before using the &lt;code&gt;buffer-string&lt;/code&gt;
function to return what we want.&lt;/p&gt;
&lt;p&gt;
Finally, we convert the json string into an elisp data structure, an
array of arrays and hash tables using &lt;code&gt;json-parse-string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the complete code:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mykey&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar base-url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://dictionaryapi.com/api/v3/references/thesaurus/json/&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; Example using switch-to-buffer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; (switch-to-buffer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; (url-retrieve-synchronously (concat base-url &amp;#34;umpire&amp;#34; &amp;#34;?key=&amp;#34; key)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defun get-synonyms (word)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (let* ((url (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; base-url word &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?key=&amp;#34;&lt;/span&gt; key))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  	 (resp (with-current-buffer (url-retrieve-synchronously url)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  		 (&lt;span style=&#34;color:#a6e22e&#34;&gt;goto-char&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;point-min&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  		 (&lt;span style=&#34;color:#a6e22e&#34;&gt;re-search-forward&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^$&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  		 (&lt;span style=&#34;color:#a6e22e&#34;&gt;delete-region&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;point&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;point-min&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  		 (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-string&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  	 (json-resp (json-parse-string resp))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  	 )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      json-resp))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (get-synonyms &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;umpire&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video covers all the details. In the next installment, we&amp;#39;ll see
how we can take this json response, pull out the synonyms and easily
replace the current word with one.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/tGZNhJmZ_2M?si=QHZ176EWF8OdodLg&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=tGZNhJmZ_2M&#34;&gt;https://www.youtube.com/watch?v=tGZNhJmZ_2M&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 15 - cleaning up our minor mode</title>
      <link>https://cestlaz.github.io/post/learning-elisp-15/</link>
      <pubDate>Wed, 29 Nov 2023 11:44:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-15/</guid>
      <description>
&lt;p&gt;
Today we&amp;#39;re finishing off our emoji project. This video covers two
quick things.&lt;/p&gt;
&lt;p&gt;
The first is how we can make the mode use either of our replacement
methods - one that actually replaces the text with the emoji and the
other that uses text properties to overlay the emoji without changing
the text.&lt;/p&gt;
&lt;p&gt;
This is done with a variable that we can set telling us which function
to call. We used one named &lt;code&gt;emoji-replace-by-insert&lt;/code&gt;. If it&amp;#39;s &lt;code&gt;t&lt;/code&gt; (true)
we use the replace method, if it&amp;#39;s &lt;code&gt;nil&lt;/code&gt; we use the overlay one.&lt;/p&gt;
&lt;p&gt;
We could just use an if statement in our define minor mode but I
decided to use this as an opportunity to show how we can assign a
function to a variable which might be new to some readers/viewers.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s say we want to create a variable named &lt;code&gt;my_function_variable&lt;/code&gt;
and have it stand in for, let&amp;#39;s say the built in &lt;code&gt;1+&lt;/code&gt; function that
increments a value. We could do a simple assignment:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq my_function_variable &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;1+&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Unfortunately, in Elisp we can&amp;#39;t just call our new variable as a
function straight out but rather must call it using funcall, like
this:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;funcall&lt;/span&gt; my_variable_function &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; this returns 6, just like (1+ 5) would&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In other languages we could just call the function directly. In the
case of defining our mode, we can just throw in the variable once we
assign it. Here&amp;#39;s the code:&lt;/p&gt;
&lt;div class=&#34;src src-eamcs-lisp&#34;&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-eamcs-lisp&#34; data-lang=&#34;eamcs-lisp&#34;&gt;(define-minor-mode emoji-replace-mode
  &amp;#34;fill in the docstring later&amp;#34;
  :lighter &amp;#34; ER&amp;#34;
  (let ((func (if emoji-replace-by-insert
		  #&amp;#39;emoji-replace-insert
		#&amp;#39;emoji-replace-overlay)))
  (if emoji-replace-mode
      (add-hook &amp;#39;after-change-functions func nil t)
    (remove-hook &amp;#39;after-change-functions func))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
We use the &lt;code&gt;let&lt;/code&gt; form to assign our variable &lt;code&gt;func&lt;/code&gt; to the appropriate
function and then just pass along &lt;code&gt;func&lt;/code&gt; when we use &lt;code&gt;add-hook&lt;/code&gt; and
&lt;code&gt;remove-hook&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it.&lt;/p&gt;
&lt;p&gt;
The other thing we cover involves cleaning up our variables. In
earlier videos we used &lt;code&gt;setq&lt;/code&gt; but also showed &lt;code&gt;defvar&lt;/code&gt; with the
practical difference being that &lt;code&gt;defvar&lt;/code&gt; had a docstring.&lt;/p&gt;
&lt;p&gt;
In this video, we look at &lt;code&gt;defcustom&lt;/code&gt; which looks like &lt;code&gt;defvar&lt;/code&gt; but
also lets you change the variable value using emacs&amp;#39;
&lt;code&gt;customize-variable&lt;/code&gt; command and interface. Further, if we do change
the variable this way and save it through the interface, it will save
the change in your &lt;code&gt;init.el&lt;/code&gt; file for future use. It&amp;#39;s a nice touch
when making a complete &amp;#34;package.&amp;#34;&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it for this project. I might do one more on setting things up
for installation using straight or something similar. If not, it&amp;#39;ll be
on to the next project which I think will be a thesaurus moed.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Y9TPHo33Y1Y?si=fG4a5XbFnx6yS11J&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=Y9TPHo33Y1Y&#34;&gt;https://www.youtube.com/watch?v=Y9TPHo33Y1Y&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 14 - defining a minor mode</title>
      <link>https://cestlaz.github.io/post/learning-elisp-14/</link>
      <pubDate>Tue, 21 Nov 2023 14:47:19 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-14/</guid>
      <description>
&lt;p&gt;
Another short one today. We&amp;#39;re taking the code we already wrote and
making a minor mode out of it.&lt;/p&gt;
&lt;p&gt;
In Emacs, a minor mode is a set of functionality that you can turn on
(or off) in a buffer (or globally). For example, the built in
&lt;code&gt;auto-fill-mode&lt;/code&gt; can be turned on in a buffer will automatically add
newlines when your line gets &amp;#34;too long.&amp;#34; You can see the modes that
you currently have on using the &lt;code&gt;describe-mode&lt;/code&gt; function, usually
bound to &lt;code&gt;C-h m&lt;/code&gt;. I also currently have &lt;code&gt;Hungry-Delete&lt;/code&gt; mode as well
as &lt;code&gt;Flyspell&lt;/code&gt; and a few others. Hungry-Delete automatically deletes
multiple whitespace characters all at once so if I have five spaces
between words, I can just delete or kill once and they&amp;#39;ll all go
away. Flyspell adds auto spell checking.&lt;/p&gt;
&lt;p&gt;
Minor modes can be turned on manually using &lt;code&gt;M-x whatever-mode&lt;/code&gt;
command which toggles whatever mode on and off or automatically based
on hooks. For example, when you load a C file, I go into c mode which
is a major mode (more about them some other time) as well as these
minor modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auto-Save&lt;/li&gt;
&lt;li&gt;Corfu&lt;/li&gt;
&lt;li&gt;Eglot–Managed&lt;/li&gt;
&lt;li&gt;Eldoc&lt;/li&gt;
&lt;li&gt;Flymake&lt;/li&gt;
&lt;li&gt;Font-Lock&lt;/li&gt;
&lt;li&gt;Hungry-Delete&lt;/li&gt;
&lt;li&gt;Yas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#39;s specific code we go over in the video to turn on and off our new
mode:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(define-minor-mode emoji-replace-mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fill in the docstring later&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :lighter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ER&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (if emoji-replace-mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;after-change-functions&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;emoji-replace-insert &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (remove-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;after-change-functions&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;emoji-replace-insert)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The macro &lt;code&gt;define-minor-mode&lt;/code&gt; does all the magic. The key is that it
defines a &amp;#34;mode variable&amp;#34; - in this case named &lt;code&gt;emoji-replace-mode&lt;/code&gt;
which tells us if we&amp;#39;re turning the mode on or off. Based on that, we
either add or remove our hook. The &lt;strong&gt;:lighter &amp;#34; ER&amp;#34;&lt;/strong&gt; sets what to show
in the mode line.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re just scratching the surface today - just setting up the
basics. Later we&amp;#39;ll see how to clean up the variables we need for the
mode - specifically our list of emojis as well as how we can select
either of our emoji replacement methods - overlay a text property or
replace the text. We&amp;#39;ll also see about setting up key combos for a
mode in our next elisp project.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it for today.&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/YBV9czwq-nw?si=6KV1To4h38Mr977C&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=YBV9czwq-nw&#34;&gt;https://www.youtube.com/watch?v=YBV9czwq-nw&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 13 - Text Properties</title>
      <link>https://cestlaz.github.io/post/learning-elisp-13/</link>
      <pubDate>Wed, 08 Nov 2023 11:09:46 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-13/</guid>
      <description>
&lt;p&gt;
Today&amp;#39;s a short 10 minute video as we continue to work on the emoji
project.&lt;/p&gt;
&lt;p&gt;
In the last episode we replaced text in the form :emoji-name: with the
emoji. This time, we&amp;#39;re doing it a little differently - we&amp;#39;re going to
overlay the text with the emoji. This way we see the emoji but the
underlying text is still present. This is kind of like when
programming in a language that supports &lt;code&gt;lambda&lt;/code&gt;, in many editors you
can type &lt;code&gt;lambda&lt;/code&gt; but it appears as the symbol: λ (note that the
previous symbol is not an emoji but was entered using the RFC1345
input method).&lt;/p&gt;
&lt;p&gt;
The important difference with this method is that when you save and
later load the file, the original characters are still there the
symbols are only visual sugar.&lt;/p&gt;
&lt;p&gt;
We accomplish this overlaying with text properties. Specifically the
&lt;code&gt;display&lt;/code&gt; property. Here&amp;#39;s a sample call:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;put-text-property&lt;/span&gt; beginning end &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WHAT TO DISPLAY&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The first two parameters - &lt;code&gt;beginning&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; form the region where
you&amp;#39;re setting the property. Recall that the upper left of a buffer is
location 1 and it increments as you move into the document. So, for
example, if your buffer had:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here are a couple of lines of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;text in an emacs buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and we used this call:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;put-text-property&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OVERLAY&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
your buffer would look like this:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here OVERLAY a couple of lines of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;text in an emacs buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If you add text before OVERLAY it shifts over just as the original
text would. If you save the buffer though, the original text (are) is
what&amp;#39;s saved.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s pretty cool.&lt;/p&gt;
&lt;p&gt;
The video shows how we can use this to overlay our emojis.&lt;/p&gt;
&lt;p&gt;
Next time, we&amp;#39;ll turn it into a mode.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/x9eFxYS-hzw?si=BGFC_bmYJlDYqex6&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=x9eFxYS-hzw&#34;&gt;https://www.youtube.com/watch?v=x9eFxYS-hzw&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 12 - Emoji Replace part 2</title>
      <link>https://cestlaz.github.io/post/learning-elisp-12/</link>
      <pubDate>Mon, 30 Oct 2023 13:15:42 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-12/</guid>
      <description>
&lt;p&gt;
Here&amp;#39;s the next part of our emoji project. In this video, we make the
magic automatically happen. That is, when the user types an emoji in
quotes - like 🐘, Emacs will automatically replace it with the
emoji, 🐘.&lt;/p&gt;
&lt;p&gt;
Now, mind you, the way we&amp;#39;re doing it isn&amp;#39;t the best way. In fact,
after I posted the previous video, Micky Peterson linked to an article
he wrote on using &lt;a href=&#34;https://www.masteringemacs.org/article/inserting-emoji-input-methods&#34;&gt;input methods&lt;/a&gt; to insert emoji. Using input methods
would be much cleaner but this series isn&amp;#39;t necessarily about doing
something the best way but rather exploring and playing with elisp in
a way that hopefully will empower readers and viewers to build
whatever they need.&lt;/p&gt;
&lt;p&gt;
The magic to making our version work is by using Emacs Hooks. You can
think of hooks like events if you&amp;#39;ve done GUI or web programming. In a
web interface you might make a button and set an event so that
whenever the button is pressed some function is called or you make a
text input field and set an event so that whenever the content of that
input field changes, some function is called.&lt;/p&gt;
&lt;p&gt;
Hooks are like that and there are tons fo them.&lt;/p&gt;
&lt;p&gt;
In the video, I use this simple example:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defun redact ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (save-excursion
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (&lt;span style=&#34;color:#a6e22e&#34;&gt;goto-char&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (replace-string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;secret&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;REDACTED&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;before-save-hook&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;redact)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The function simply replaces all occurrences of the string &amp;#34;secret&amp;#34;
and changes it to &amp;#34;REDACTED.&amp;#34; The before-save-hook runs associated
functions before saving a file so in the above code sample, once the
hook is added, whenever you save a file, the redact function will run
and all occurrences of &amp;#34;secret&amp;#34; will be changed.&lt;/p&gt;
&lt;p&gt;
This is a silly example but a more useful one for this hook would be
to run a code autoformatter.&lt;/p&gt;
&lt;p&gt;
To remove the hook we would use:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (remove-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;before-save-function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;redact)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note that the &lt;code&gt;add-hook&lt;/code&gt; function also has options to decide if the
hook is for the buffer or everywhere.&lt;/p&gt;
&lt;p&gt;
For the emoji project, we&amp;#39;ll use the &lt;code&gt;after-change-functions&lt;/code&gt; hook
which lets us call a function whenever the buffer is changed.&lt;/p&gt;
&lt;p&gt;
The video goes into all the details. &lt;/p&gt;
&lt;p&gt;
Next up, we&amp;#39;ll see how we can overlay an emoji over text instead of
replacing.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/6h4KngDdsbo?si=BUqK5052J4GgLWgP&#34;
title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer;
autoplay; clipboard-write; encrypted-media; gyroscope;
picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=6h4KngDdsbo&#34;&gt;https://www.youtube.com/watch?v=6h4KngDdsbo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 11 - Emoji Replace Part 1</title>
      <link>https://cestlaz.github.io/post/learning-elisp-11/</link>
      <pubDate>Wed, 18 Oct 2023 13:57:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-11/</guid>
      <description>
&lt;p&gt;
Back from my trip and ready to continue the elisp series.&lt;/p&gt;
&lt;p&gt;
Today we&amp;#39;re starting our emoji project. When we&amp;#39;re done we&amp;#39;ll have a
minor mode where we can type in something like 🐘 in a buffer
and Emacs will replace it with the elephant emoji 🐘. That&amp;#39;s part
one. We&amp;#39;ll then learn how to overlay the emoji over the text so that
while it will appear as the emoji (🐘) the actual text of 🐘
will still be in the buffer and file if you save it. The former,
replacing the text with the emoji is useful if you actually want the
emoji in the file. I&amp;#39;m using it to create emoji based polls that I can
cut and paste into Slack or Zulip. The overlay idea is useful when you
want the emoji to display for visual effect but you don&amp;#39;t want it in
the actual file.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s no new elisp in this first video - we&amp;#39;re going to put together
a function that sees if you type an emoji name before the current
point (cursor) and if so, replaces it with the emoji. The function
pulls together a lot of what was covered in earlier videos.&lt;/p&gt;
&lt;p&gt;
So, no code explanations here. The second video will deal with hooks -
the way we&amp;#39;ll make this all happen &amp;#34;automatically&amp;#34; and then we&amp;#39;ll
cover the overlays and then finally making minor mode and
configuration.&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/DvFjCVHpoyk?si=b7YeY71Lwl1TBBua&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=DvFjCVHpoyk&#34;&gt;https://www.youtube.com/watch?v=DvFjCVHpoyk&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 10 - elisp data structures</title>
      <link>https://cestlaz.github.io/post/learning-elisp-10/</link>
      <pubDate>Mon, 18 Sep 2023 13:57:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-10/</guid>
      <description>
&lt;p&gt;
I&amp;#39;m leaving our next elisp project for when I get back from my
vacation but realized I could make a short video with some
preliminaries - some elisp tools that we&amp;#39;ll need that we can get out
of the way.&lt;/p&gt;
&lt;p&gt;
Specifically, elisp&amp;#39;s built in data structures. &lt;/p&gt;
&lt;p&gt;
We&amp;#39;ve already used the &lt;strong&gt;list&lt;/strong&gt; data structure and in this video we go a
bit more in depth.&lt;/p&gt;
&lt;p&gt;
Lists are great for, well, list processing but they&amp;#39;re not great for
random access. For that we can use vectors. Think of them like arrays
in other languages but with a functional way of accessing:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq v [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;;; define a vector&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; returns the 20, the value in index 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;aset&lt;/span&gt; v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; stores 100 in index i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; the vector will now have [10 100 30 40 50]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;1+&lt;/span&gt; v)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; the above returns a new list with (2 101 31 41 51)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note in that last example above we can use mapcar which we covered in
an earlier video on vectors as well as lists but the return is a new
list, not a vector.&lt;/p&gt;
&lt;p&gt;
We also cover elisp hash tables which are similar to python
dictionaries. With them you can store and retrieve values based on
keys (key value pairs). We&amp;#39;re not actually going to use them in the
next project so you can see the video for details.&lt;/p&gt;
&lt;p&gt;
The data structure we will be using are association lists. You can
think of them as a lightweight hash table. Basically a list of
pairs. A pair is a special form of a list that only has two items
(well, not exactly but see the video for details). We write them by
putting a period between the two elements - &lt;code&gt;(1 . 2)&lt;/code&gt;  - that&amp;#39;s a pair
with 1 as the first part and 2 as the second.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an association list and how we use it:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one value&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two value&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three value&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;assoc&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; a) &lt;span style=&#34;color:#75715e&#34;&gt;;; returns (2 . &amp;#34;two value&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;assoc&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; a)) &lt;span style=&#34;color:#75715e&#34;&gt;;; returns &amp;#34;two value&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (rest (&lt;span style=&#34;color:#a6e22e&#34;&gt;assoc&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; a)) &lt;span style=&#34;color:#75715e&#34;&gt;;; also returns &amp;#34;two value&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In our next project, we&amp;#39;ll use association lists to store the string
names for emojis as the keys and the actual emojis for the values.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it for now. More in a few weeks.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but this episode doesn&amp;#39;t have any specific code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/oszVyBvxmzg?si=TMjUlMSI1TQQYnPT&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://youtu.be/oszVyBvxmzg&#34;&gt;https://youtu.be/oszVyBvxmzg&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 9</title>
      <link>https://cestlaz.github.io/post/learning-elisp-9/</link>
      <pubDate>Tue, 29 Aug 2023 12:41:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-9/</guid>
      <description>
&lt;p&gt;
In this video, we&amp;#39;re finally putting everything together for the
function-header project.&lt;/p&gt;
&lt;p&gt;
for the most part, it&amp;#39;s just putting a function wrapper (defun) around
code we&amp;#39;ve already written but there area a few new things.&lt;/p&gt;
&lt;p&gt;
In order to parse the parameter string we use a few interesting
functions. The parameter string might look something like this &amp;#34;int a,
double d, int something, char c&amp;#34; - type name pairs separate by a comma
and space. To parse this into a list, we can use string-split. We use
~(string-split param-string &amp;#34;, &amp;#34;) which splits around the comma/space
separators. This gives us a list &lt;code&gt;(&amp;#34;int a&amp;#34; &amp;#34;double d&amp;#34; &amp;#34;int something&amp;#34;
&amp;#34;char c&amp;#34;)&lt;/code&gt;  In elisp, stuff in parens is a list. We&amp;#39;ve usually been
interpreting lists as functions where the first item is the name and
the rest the parameters but we can also use them strictly as data.&lt;/p&gt;
&lt;p&gt;
We then revisit the mapcar function that we used in rot13. Mapcar
takes a function and a list and then returns a new list having applied
the function to each element. In our case, we use the &lt;code&gt;format&lt;/code&gt;
function we covered last time to reformat each paramter into a javadoc
string.&lt;/p&gt;
&lt;p&gt;
Finally, we use &lt;code&gt;string-join&lt;/code&gt; to join all the parameter string
elements in our list back into one string.&lt;/p&gt;
&lt;p&gt;
The other new elisp function we look at is &lt;code&gt;save-excursion&lt;/code&gt;. It&amp;#39;s
pretty simple but very useful for editor functions. It basically saves
the location of the point, does everything in its body and then
restores the point to where it was.&lt;/p&gt;
&lt;p&gt;
So, if you had this code block:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (next-line &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;forward-char&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (do some stuff)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Your cursor (point) would have moved down 5 and 3 across and the stuff
would be done. When the block ends, the point would be wherever it was
moved to.&lt;/p&gt;
&lt;p&gt;
If, instead we do this:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (save-excursion
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (next-line &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;forward-char&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (do some stuff))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Then the same thing happens but at the end, the point is restored to
where it was when you started.&lt;/p&gt;
&lt;p&gt;
I also started using &lt;a href=&#34;https://github.com/xiongtx/eros&#34;&gt;eros&lt;/a&gt; mode which temprarily overlays the results of elisp
forms when you execute them. If you use Cider for Clojure development
it looks a lot like that. It&amp;#39;s easy and very useful for interactive
development.&lt;/p&gt;
&lt;p&gt;
Finally, as I mention in the video, I&amp;#39;ll be away for a couple of weeks
at the end of September and into October. Visiting Utrecht, Brussels,
Antwerp, and Amsterdam so if you&amp;#39;ve got any hidden gems for us to
visit please let us know. I really mention this though because it will
likely affect my video making schedule. Our next project - displaying
emojis automatically, is going to be three or four videos. Maybe
more. I don&amp;#39;t know if it makes sense to start 1 and then take the big
break so I might pause this project until I&amp;#39;m back in mid October or
maybe just do a one off before I go away. We&amp;#39;ll seen.&lt;/p&gt;
&lt;p&gt;
In the meantime, enjoy this one.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but this episode doesn&amp;#39;t have any specific code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/DqHuCePi2FA?si=h56rRPT1gK6hvmB0&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=DqHuCePi2FA&#34;&gt;https://www.youtube.com/watch?v=DqHuCePi2FA&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 8</title>
      <link>https://cestlaz.github.io/post/learning-elisp-8/</link>
      <pubDate>Mon, 21 Aug 2023 17:16:45 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-8/</guid>
      <description>
&lt;p&gt;
Today&amp;#39;s video gets us closer to our function header, um, function.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;ll take one more video to get there but today&amp;#39;s video goes over the
programmatic elisp that we&amp;#39;ll need.&lt;/p&gt;
&lt;p&gt;
Before we get to that, a couple of elisp regex niceties. To be honest,
I didn&amp;#39;t know that these existed when I made the last video so thanks
for those of you who made me aware.&lt;/p&gt;
&lt;p&gt;
First is the built in &lt;code&gt;rx&lt;/code&gt; macro. It lets you use a more verbose elisp type
syntax for regular experssions.&lt;/p&gt;
&lt;p&gt;
For example, instead of &amp;#34;Mr|Ms [A-Z][a-z]+ [A-Z][a-z]+&amp;#34; for a simple
Mr John Smith or Ms Sarah Stone or similar names, you could write:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (rx  (seq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mr|Ms &amp;#34;&lt;/span&gt; (any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A-Z&amp;#34;&lt;/span&gt;) (one-or-more (any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a-z&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A-Z&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (one-or-more (any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a-z&amp;#34;&lt;/span&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
which would evaluate to the more terse regular expression string.&lt;/p&gt;
&lt;p&gt;
On the flip side there&amp;#39;s the package &lt;code&gt;xr&lt;/code&gt; ([[&lt;a href=&#34;https://github.com/mattiase/xr&#34;&gt;https://github.com/mattiase/xr&lt;/a&gt;
][link]]) which does the reverse. You
give it the standard regex string and it will produce the more verbose
elisp type syntax.&lt;/p&gt;
&lt;p&gt;
This verbose elisp regex notation reminds me of a couple of clojure
tools I use. One is hiccup. That lets you use clojure structures for
html. For example:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;hiccup/html&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;:span&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:class&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
would yield &amp;#34;&amp;lt;span class=\&amp;#34;foo\&amp;#34;&amp;gt;bar&amp;lt;/span&amp;gt;&amp;#34;&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a similar tool, honeysql that clojurists  can use for sql. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;m a big fan of hiccup and related tools but I probably won&amp;#39;t be
using rx and xr moving forward.&lt;/p&gt;
&lt;p&gt;
Why not?&lt;/p&gt;
&lt;p&gt;
Context switching.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m just or actually more likely to use regular expressions in
languages other than elisp. In fact, I&amp;#39;ll most regularly use them on
the command line with grep type tools. I&amp;#39;ll also use them in other
programming languages. Since the elisp syntax only exists in elisp,
there&amp;#39;s less of a benefit to me. I do suppose that if I was doing a
deep dive into writing elisp for a while, it would be more attractive.&lt;/p&gt;
&lt;p&gt;
The clojure tools show this. When I do webdev, I&amp;#39;m living in one
ecosystem for all the front end work so it makes sense to use a tool
like hiccup. Besides, html is multiline so looks particularly ugly
when embedded in code (jsx notwithstanding). Same for sql.&lt;/p&gt;
&lt;p&gt;
Still rx and xr are well worth knowing and playing with.&lt;/p&gt;
&lt;p&gt;
Now for the star attractions - dealing with our regular expressions in
elisp.&lt;/p&gt;
&lt;p&gt;
The first call is &lt;code&gt;string-match&lt;/code&gt; which does two things.&lt;/p&gt;
&lt;p&gt;
First, it returns the index where the match starts (or nil if it isn&amp;#39;t
present) and it also sets up some internal data structure so that you
can extract the match groups. &lt;/p&gt;
&lt;p&gt;
There&amp;#39;s also an additional optional third parameter, INHIBIT-MODIFY
which if it&amp;#39;s nil or not present the &amp;#34;match data is changed&amp;#34; and we
can use the &lt;code&gt;match-string&lt;/code&gt; function to extract our groups. I think I
garbled that part in the video but this is right from the
documentation.&lt;/p&gt;
&lt;p&gt;
For example, in:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq regex &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\([a-z0-9]+\\) +\\([a-zA-Z0-9_]+\\)(\\([a-zA-Z0-9_ ,]+\\)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq line &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int add_two(int a, int b)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;string-match&lt;/span&gt; regex line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq retval (match-string &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; line))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq func-name (match-string &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; line))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq params (match-string &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; line))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
string-match returns 0 since the match starts at the first character.&lt;/p&gt;
&lt;p&gt;
We then use the match-string function to extract each of the
parenthesized groups.&lt;/p&gt;
&lt;p&gt;
We also have to be careful with the match-string function. It&amp;#39;s a bit
fragile. The documentation says that you should call it &amp;#34;close&amp;#34; to the
call to string-match since the match data might be mutated. That&amp;#39;s
illustrated in the video.&lt;/p&gt;
&lt;p&gt;
Finally, we cover the &lt;code&gt;format&lt;/code&gt; function which is like C&amp;#39;s printf. It
accepts a format string with placeholders and the additional
parameters to fill those placeholders.&lt;/p&gt;
&lt;p&gt;
For example:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq word1 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq word2 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Replace1: %s Replace2: %s&amp;#34;&lt;/span&gt; word1 word2)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The format returns &amp;#34;Replace1: hello Replace2: world&amp;#34; having replaced
the placeholders with parameters. There are also other placeholders
for different data types.&lt;/p&gt;
&lt;p&gt;
The video covers all of this in detail.&lt;/p&gt;
&lt;p&gt;
Next time, we&amp;#39;ll put it all together into a working elisp function
that we can bind to a key&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but this episode doesn&amp;#39;t have any specific code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2hbX4h4ZdAc&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=2hbX4h4ZdAc&#34;&gt;https://www.youtube.com/watch?v=2hbX4h4ZdAc&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 7</title>
      <link>https://cestlaz.github.io/post/learning-elisp-7/</link>
      <pubDate>Tue, 15 Aug 2023 10:51:37 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-7/</guid>
      <description>
&lt;p&gt;
Our next elisp project us going to write a function that will
automatically generate function headers. This was actually the first
useful elisp I ever wrote around thirty years ago. I forget how I
wrote it then so this is a total rewrite.&lt;/p&gt;
&lt;p&gt;
Nowadays we have &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html&#34;&gt;Javadoc&lt;/a&gt; for java and tools like &lt;a href=&#34;https://www.sphinx-doc.org/en/master/&#34;&gt;Sphinx&lt;/a&gt; for other
languages. If we write specially formatted comments in our code, these
tools will pull out the comments and build a web site or document with
hyperlinked documentation.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an example of javadoc commenting that I found online:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * &amp;lt;p&amp;gt;This is a simple description of the method. . .
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * &amp;lt;a href=&amp;#34;http://www.supermanisthegreatest.com&amp;#34;&amp;gt;Superman!&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param incomingDamage the amount of incoming damage
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @return the amount of health hero has after attack
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @see &amp;lt;a href=&amp;#34;http://www.link_to_jira/HERO-402&amp;#34;&amp;gt;HERO-402&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @since 1.0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;successfullyAttacked&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; incomingDamage&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// do things
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note the extra * on the open comment line. That tells Javadoc to
process the block and turn it into html. You can look at the online
Java documentation to see plenty of examples (like &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html#indexOf-java.lang.Object-&#34;&gt;this&lt;/a&gt; one).&lt;/p&gt;
&lt;p&gt;
Back when I was coding professionally, Java didn&amp;#39;t exist let alone
javadoc but programmers like me wrote our own small tools that worked
similarly. It was just a good idea.&lt;/p&gt;
&lt;p&gt;
For our elisp, we want to be able to take the top line that declares
our function:&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_two&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b){&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And from that isolate the three components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return type (int)&lt;/li&gt;
&lt;li&gt;function name (add_two)&lt;/li&gt;
&lt;li&gt;parameters (int a and int b)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
From there, we can build a comment block like this:&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/*------------------- add_two ------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    Parameters: int a -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                int b -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    Returns: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    Description
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    MZ
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To isolate those components we&amp;#39;re going to use regular expressions.&lt;/p&gt;
&lt;p&gt;
For those that aren&amp;#39;t familiar with them, regular expressions (regex)
form a language to perform text pattern matching. Think &amp;#34;find and
replace on steroids.&amp;#34; Emacs and most other editing tools, including
things like spreadsheets all have support for regular experssions.&lt;/p&gt;
&lt;p&gt;
In this video, we are going to go over the fundamentals in the
editor. We&amp;#39;ll specifically use &lt;code&gt;replace-regexp&lt;/code&gt; and
&lt;code&gt;rexep-builder&lt;/code&gt;. In the next video, we&amp;#39;ll learn how to do this in
elisp and then write our function header creator.&lt;/p&gt;
&lt;p&gt;
Here are some basics:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;regex&lt;/th&gt;
&lt;th&gt;will match&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;the letter a&lt;/td&gt;
&lt;td&gt;the a in &lt;strong&gt;ball&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aa&lt;/td&gt;
&lt;td&gt;two in a row&lt;/td&gt;
&lt;td&gt;the aa at the start of &lt;strong&gt;aardvark&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-c]&lt;/td&gt;
&lt;td&gt;a b or c&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;any single character&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a.&lt;/td&gt;
&lt;td&gt;the letter a followed by any character&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
And there are tons more urles.&lt;/p&gt;
&lt;p&gt;
The video goes through a bunch of examples including how to use a
regex to transform all the money values in your text to $XXX.XX or how
to convert all the dates in the form month/day/year into
day-month-year.&lt;/p&gt;
&lt;p&gt;
You can also dig more deeply by looking at any of these online
tutorials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://regexone.com/&#34;&gt;https://regexone.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ziishaned/learn-regex/blob/master/README.md&#34;&gt;https://github.com/ziishaned/learn-regex/blob/master/README.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.javatpoint.com/regex&#34;&gt;https://www.javatpoint.com/regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://regexlearn.com/&#34;&gt;https://regexlearn.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or searching for videos online.&lt;/p&gt;
&lt;p&gt;
By the end of our video, we have our regex to identify three
components in a function header but note that I only wrote it for
lower case letters - we&amp;#39;ll fix that when we write the actual
function next time.&lt;/p&gt;
&lt;p&gt;
For now, enjoy this one covering the basics:&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but this episode doesn&amp;#39;t have any specific code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-kyJLcsiH_4&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=-kyJLcsiH_4&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-kyJLcsiH_4&#34;&gt;https://www.youtube.com/watch?v=-kyJLcsiH_4&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp - Rot13 conclusion</title>
      <link>https://cestlaz.github.io/post/learning-elisp-6/</link>
      <pubDate>Mon, 07 Aug 2023 11:59:44 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-6/</guid>
      <description>
&lt;p&gt;
Two more videos to finish up the rot13 project.&lt;/p&gt;
&lt;p&gt;
The first video covers about &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Prefix-Command-Arguments.html&#34;&gt;prefix arguments&lt;/a&gt;. The idea is when
calling an Emacs function interactively, you can specify a numeric
argument either by typing &lt;code&gt;C-u #&lt;/code&gt; where &lt;code&gt;#&lt;/code&gt; is a single digit or &lt;code&gt;M-x
##&lt;/code&gt; where &lt;code&gt;##&lt;/code&gt; is an integer which can be positive, negative, single
or multiple digits. You then type the key for your command or invoke
it with its full name &lt;code&gt;M-x&lt;/code&gt;. This passes the numeric parameter to the
function.&lt;/p&gt;
&lt;p&gt;
In the function, we add a parameter to the &lt;code&gt;(interactive)&lt;/code&gt; form -
specifically &lt;code&gt;(interactive &amp;#34;P&amp;#34;)&lt;/code&gt; which says that the parameter to our
function will be that number we passed as a prefix argument or nil if
there was no prefix argument.&lt;/p&gt;
&lt;p&gt;
We use the prefix argument to determine how much to rotate our
text. If we don&amp;#39;t pass a parameter, we just do a rot13 but if we do,
we rotate that amount.&lt;/p&gt;
&lt;p&gt;
The second video shows how we can use see if there&amp;#39;s an active region
and if so, run our rotate function on the text in that region. If not,
rotate the previous word.&lt;/p&gt;
&lt;p&gt;
Here are the key Emacs features we instroduce.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mark-active&lt;/td&gt;
&lt;td&gt;a built in variable which is true if you&amp;#39;ve set the mark&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(mark)&lt;/td&gt;
&lt;td&gt;returns an integer representation of where the mark is set&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(point)&lt;/td&gt;
&lt;td&gt;returns an integer representation of where the cursor is&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(buffer-substring-no-properties)&lt;/td&gt;
&lt;td&gt;returns text from the buffer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Notes from previous videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
A viewer pointed out that the Emacs if statement can actually have
multiple forms to its false part.&lt;/p&gt;
&lt;p&gt;
For example:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (if true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Goodbye&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
will print &amp;#34;Hello&amp;#34; if &lt;code&gt;condition&lt;/code&gt; is true and &amp;#34;Goodbye&amp;#34; if it&amp;#39;s fales.&lt;/p&gt;
&lt;p&gt;
Now, if we have multiple forms int he false part:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (if conditiotrue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Goodbye&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
then while it will still print &amp;#34;Hello&amp;#34; if &lt;code&gt;condition&lt;/code&gt; is true, it will
print both &amp;#34;Goodbye&amp;#34; and &amp;#34;World&amp;#34; if it is false.&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t know that and appreciated the comment so that I could learn
something new.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code and video links. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Once again, the code is up online:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rot13 code will be in the file rot13.el.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Prefix Arguments:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5oHpxh0JsBE&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=5oHpxh0JsBE&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5oHpxh0JsBE&#34;&gt;https://www.youtube.com/watch?v=5oHpxh0JsBE&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Rotating a region:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/YzQ8iG3nZQ8&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=YzQ8iG3nZQ8&#34;&gt;https://www.youtube.com/watch?v=YzQ8iG3nZQ8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 5 - Rot13 parts 2 and 3</title>
      <link>https://cestlaz.github.io/post/learning-elisp-5/</link>
      <pubDate>Tue, 01 Aug 2023 10:00:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-5/</guid>
      <description>
&lt;p&gt;
Rather than one long boring video, I thought it would be better to
split up the remainder of the Rot13 project into 4 shorter boring ones
:-).&lt;/p&gt;
&lt;p&gt;
Here are the first two.&lt;/p&gt;
&lt;p&gt;
Before we can really do anything interesting, we need to be able write
programs that make decisions. For that we need conditionals or &lt;code&gt;if&lt;/code&gt;
statements. That&amp;#39;s covered in the first video.&lt;/p&gt;
&lt;p&gt;
Like other languages, elisp has an &lt;code&gt;if&lt;/code&gt; statement but it&amp;#39;s more of an
&lt;code&gt;if&lt;/code&gt; function. Here&amp;#39;s the outline:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (if boolean
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      evaluate_to_this_if_boolean_is_true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      evaluate_to_this_if_boolean_is_false)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In this basic form, it essentially has both the if and the else parts
from languages like Python:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; boolean:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      evaluate_to_this_if_boolean_is_true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      evaluate_to_this_if_boolean_is_false)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If you need more than one thing in either the true or false part you
need another form which we&amp;#39;ll cover later.&lt;/p&gt;
&lt;p&gt;
You can also leave out the false part but again, we&amp;#39;ll deal with that
when it comes up. For now, it&amp;#39;s simpler for our application to have
both.&lt;/p&gt;
&lt;p&gt;
The basic if will cover you in a lot of cases but if you&amp;#39;ve got more
then a true/false decision the code can get ugly:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (if boolean1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      true-part-1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (if boolean2 &lt;span style=&#34;color:#75715e&#34;&gt;;; this is the false for boolean1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          true part-2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (if boolean3 &lt;span style=&#34;color:#75715e&#34;&gt;;; this is the false for boolean 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              true-part
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            false-part)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Instead, elisp and many other lisps give us the &lt;code&gt;cond&lt;/code&gt; or
conditional. The most similar construct in languages like Java or C++
would be the switch statement but the &lt;code&gt;cond&lt;/code&gt; is much more general and
much more powerful.&lt;/p&gt;
&lt;p&gt;
In a switch statement, you list multiple discrete values for a given
variable and run some code based on that:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;is&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;is&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;is&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       etc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In a cond, you have multiple clauses with arbitrary conditions and
what to do for each condition.&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(let ( (grade &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(cond ( (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; grade &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ( (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; grade &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ( (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; grade &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ( (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; grade &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ( &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;) ))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In the above example, there are four independent boolean expressions
and then the final clause, which will always execute if the code gets
there because t is always true.&lt;/p&gt;
&lt;p&gt;
For the cond, once it evaluates a boolean to true, it evaluates to the
other part of its clause and returns so in the example above, &amp;#34;D&amp;#34;
would be returned.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the cond from the rot13 code:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (cond ((and (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;=&lt;/span&gt; c &lt;span style=&#34;color:#e6db74&#34;&gt;?a&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;=&lt;/span&gt; c &lt;span style=&#34;color:#e6db74&#34;&gt;?z&lt;/span&gt;)) (rotate c offset &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	 ((and (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;=&lt;/span&gt; c &lt;span style=&#34;color:#e6db74&#34;&gt;?A&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;=&lt;/span&gt; c &lt;span style=&#34;color:#e6db74&#34;&gt;?Z&lt;/span&gt;)) (rotate c offset &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	 (&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; c))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The top clause tests for a lowercase letter, the next for upper case
and the default &lt;code&gt;t&lt;/code&gt; clause if it&amp;#39;s neither - maybe a space or
punctuation.&lt;/p&gt;
&lt;p&gt;
The second video posted here goes over making an interactive rot13
function using elisp&amp;#39;s &lt;code&gt;(interactive)&lt;/code&gt;. If a function uses
&lt;code&gt;(interactive)&lt;/code&gt; it can then be called as a command using the M-x
prefix. It can also be bound to a key combination.&lt;/p&gt;
&lt;p&gt;
In the next videos we&amp;#39;ll see how to modify the &lt;code&gt;(interactive)&lt;/code&gt; form so
that we can pass what are known as prefix arguments and in the final
installment of the rot13 project we&amp;#39;ll see how we can rot13 a region.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I finally got around to making a repo. All the code for this series
will be made available here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rot13 code will be in the file rot13.el.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Conditionals:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/gT8RBdtZtfk&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=gT8RBdtZtfk&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gT8RBdtZtfk&#34;&gt;https://www.youtube.com/watch?v=gT8RBdtZtfk&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Interactive:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/WvPXnsNC8JU&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=WvPXnsNC8JU&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WvPXnsNC8JU&#34;&gt;https://www.youtube.com/watch?v=WvPXnsNC8JU&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 4 - Rot13 part 1</title>
      <link>https://cestlaz.github.io/post/learning-elisp-4/</link>
      <pubDate>Tue, 25 Jul 2023 15:21:56 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-4/</guid>
      <description>
&lt;p&gt;
It&amp;#39;s been a couple of weeks since my last post. Sorry - been
repainting the apartment so I was limited to my laptop for a while.&lt;/p&gt;
&lt;p&gt;
Now that we&amp;#39;ve gone over a few basics we can explore new elisp
features while building &amp;#34;useful&amp;#34; things. This video has us building
code to implement &lt;a href=&#34;https://en.wikipedia.org/wiki/ROT13&#34;&gt;ROT13&lt;/a&gt;. ROT13 is a particular instance of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Caesar_cipher&#34;&gt;Caesar or
rotational cipher&lt;/a&gt;. In a Caesar Cipher, you take each letter and
&amp;#34;rotate&amp;#34; it by a certain number of places. For example, if you are
rotating by 2, the string &amp;#34;abcz&amp;#34; would become &amp;#34;cdeb&amp;#34; with each letter
moving two over. Note that the &amp;#34;z&amp;#34; has to rotate back to the beginning
of the alphabet and become a &amp;#34;b.&amp;#34;&lt;/p&gt;
&lt;p&gt;
I also put &amp;#34;useful,&amp;#34; above in quotes. This is because, while I think
ROT13 is interesting and will allow us to explore a number of elisp
concepts, it&amp;#39;s actually already built in to Emacs.&lt;/p&gt;
&lt;p&gt;
In the video, I go on for a while about ROT13 and some internet
history but if you aren&amp;#39;t interested in that, I put a chapter link in
the video description to skip that part.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Notes on some of the elisp concepts covered:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Lists
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
In elisp, things in parentheses are lists so (+ 2 3) is a list. If you
have this in a program, however, Emacs will try to evaluate the
function + on the parameters 2 and 3. In this case, that is what we
want.&lt;/p&gt;
&lt;p&gt;
Other times, we want to use a list as pure date, for example the list
(1 2 3 4 5). To prevent Emacs from evaluating this list we start it
with a single quote: &amp;#39;(1 2 3 4 5)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Strings and Characters
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
In Elisp, things in double quotes are strings so &amp;#34;abc&amp;#34; is a string
with the three characters a, b, and c. Characters can be written
individually by preceding them with a question mark - ?a for the
character a.&lt;/p&gt;
&lt;p&gt;
In the video, we&amp;#39;ll go into details and also see how Emacs will
interpret a string as a list of characters and how we can then go back
from a list of characters to a string.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Mapping functions
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
In lisp type languages, we use a lot of what are known as mapping
functions. The function &lt;code&gt;mapcar&lt;/code&gt; in elisp, takes a function and
applies it to each element of a list. For example, given this code:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defun square (x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; x x))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;square &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
That mapcar function will return the list &amp;#39;(1 4 9 16 25), the list you
get by applying the square function we wrote to each element of the
list. The video goes into more details. Note that we have to precede 
the function square with #&amp;#39; in the mapcar call&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Lambda
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
We also cover anonymous functions in the video - it lets you create a
&amp;#34;throwaway&amp;#34; function.&lt;/p&gt;
&lt;p&gt;
For example, &lt;code&gt;(lambda (x) (* x x))&lt;/code&gt; returns a function that squares
its parameter. We can use it to square the number 3 like this: &lt;code&gt;(
(lambda (x) (* x x)) 3)&lt;/code&gt;. In the video we&amp;#39;ll show why this is useful
when combined with functions like mapcar.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Misc stuff
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
For some reason, the video is showing for me at low resolution. If
this happens to you, click on the options wheel and select a higher
res.&lt;/p&gt;
&lt;p&gt;
Also, I mentioned rec.humor.spc in the video. I found some old Stupid
People&amp;#39;s Court posts &lt;a href=&#34;https://www.panix.com/~pschleck/spc/&#34;&gt;here&lt;/a&gt;. I thought some of you would enjoy them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
The video
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/_3OvTrkSqEE&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=_3OvTrkSqEE&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_3OvTrkSqEE&#34;&gt;https://www.youtube.com/watch?v=_3OvTrkSqEE&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 3 - functions</title>
      <link>https://cestlaz.github.io/post/learning-elisp-3/</link>
      <pubDate>Thu, 13 Jul 2023 15:17:48 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-3/</guid>
      <description>&lt;p&gt;
Here&amp;#39;s another short video - this one on declaring functions in elisp.&lt;/p&gt;
&lt;p&gt;
Not much to say about it. It&amp;#39;s similar to other languages.&lt;/p&gt;
&lt;p&gt;
In Python or C++ you might have:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  # Python 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  def add2(a, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return a+b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  // C++
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  int add2(int a, int b){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return a+b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Elisp is similar:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defun add2 (a b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; a b))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
But it&amp;#39;s a little more &amp;#34;mathy.&amp;#34; You&amp;#39;ve got the special form &lt;strong&gt;defun&lt;/strong&gt;,
then the name of the function, parameters in parens and then the
body - all wrapped in parentheses. Note that you don&amp;#39;t explicitly
write return. It&amp;#39;s mroe like a mathematical expression where it
returns what the function evaluates to.&lt;/p&gt;
&lt;p&gt;
The video also describes the &lt;code&gt;(interactive)&lt;/code&gt; form. By using it, we can
call our function as a command and bind a key combination to call it.&lt;/p&gt;
&lt;p&gt;
I do want to share one quick note on the content though - in the video
I write &lt;code&gt;(dotimes (i 5) (next-line))&lt;/code&gt; to move down 5 lines. Instead of
using &lt;code&gt;dotimes&lt;/code&gt; I could have just given a parameter to &lt;code&gt;next-line&lt;/code&gt; -
that is, wrote &lt;code&gt;(next-line 5)&lt;/code&gt;. I chose to use dotimes in order to
introduce some control code. I wanted newbies to see it here before we
revisit control structuers more in depth in later videos.&lt;/p&gt;
&lt;p&gt;
Speaking of later videos, here&amp;#39;s whats to come, maybe in a different
order.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A video, probably with some internet lore and history on writing
arot13 function which is a special case of a Caesar cipher.&lt;/li&gt;
&lt;li&gt;One on creating a function to make a consistent function header&lt;/li&gt;
&lt;li&gt;How to create a mode so that when you type an emoji in :&amp;#39;s you get
the emoji. So, by typing 🐘 you&amp;#39;d see this: 🐘.&lt;/li&gt;
&lt;li&gt;A function to use an API to replace a word with a synonym.&lt;/li&gt;
&lt;li&gt;And maybe a few more along the way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now, enjoy this short intro to writing functions:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/v3wdkJa87No&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video Link:  &lt;a href=&#34;https://www.youtube.com/watch?v=v3wdkJa87No&#34;&gt;https://www.youtube.com/watch?v=v3wdkJa87No&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 2 - variables</title>
      <link>https://cestlaz.github.io/post/learning-elisp-2/</link>
      <pubDate>Thu, 13 Jul 2023 07:46:04 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-2/</guid>
      <description>&lt;p&gt;
I was planning on writing this yesterday but caught up in watching
&amp;#34;Paths of Glory.&amp;#34;&lt;/p&gt;
&lt;p&gt;
The plan was to have each topic revolve around a &amp;#34;real&amp;#34; project but I
realized that first we have to cover some basics. Specifically,
variables and functions. I was going to cover them together but the
video was getting a little long so we&amp;#39;re doing variables here and
writing functions next time.&lt;/p&gt;
&lt;p&gt;
Like other languages, Emacs uses variables to store values. Also, like
other, or at least some other languages, there are a number of
subtleties and variations.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re keeping things simple for now and will dive deeper as needed in
the future.&lt;/p&gt;
&lt;p&gt;
To create a variable in Emacs we use the special form &lt;code&gt;defvar&lt;/code&gt;. The
&lt;code&gt;defvar&lt;/code&gt; form defines a symbol as a variable - &lt;code&gt;(defvar name)&lt;/code&gt; or,
with an initial value &lt;code&gt;(defvar name &amp;#34;Tom&amp;#34;)&lt;/code&gt;. It turns out, that you
can keep using &lt;code&gt;defvar&lt;/code&gt; to change values in a variable:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tim&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I&amp;#39;m unsure of the internal ramifications of this but that&amp;#39;s not how
we&amp;#39;re supposed to do things. To change (or set) variables, we&amp;#39;re
supposed to use &lt;code&gt;setq&lt;/code&gt; - &lt;code&gt;(setq name &amp;#34;Tammy&amp;#34;)&lt;/code&gt; for instance. Of
course, to make things less simple, we can use &lt;code&gt;setq&lt;/code&gt; without first
using &lt;code&gt;defvar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
Now, &lt;code&gt;defvar&lt;/code&gt; in our case, creates global variables but sometimes we
want something more locally scoped. For that we use the &lt;code&gt;let&lt;/code&gt; form. In
the following example, we create a &amp;#34;global&amp;#34; variable &lt;strong&gt;name&lt;/strong&gt; with
&lt;code&gt;defvar&lt;/code&gt; and then a local one with &lt;code&gt;let&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Global Gabe&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; name) &lt;span style=&#34;color:#75715e&#34;&gt;;; prints Global Gabe &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (let ( (name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Local Larry&amp;#34;&lt;/span&gt;) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; name) &lt;span style=&#34;color:#75715e&#34;&gt;;; prints Local Larry&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (setq name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Local Lisa&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; name) &lt;span style=&#34;color:#75715e&#34;&gt;;; prints Local Lisa - we changed the local one &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; name) &lt;span style=&#34;color:#75715e&#34;&gt;;; but Global Gabe was unchanged&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video goes over the details and a few more nuances.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/eQNqIsyw1mo&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video Link: &lt;a href=&#34;https://www.youtube.com/watch?v=eQNqIsyw1mo&#34;&gt;https://www.youtube.com/watch?v=eQNqIsyw1mo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 1</title>
      <link>https://cestlaz.github.io/post/learning-elisp-1/</link>
      <pubDate>Thu, 06 Jul 2023 10:16:49 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-1/</guid>
      <description>&lt;p&gt;
Here&amp;#39;s the first video in my learning elisp series.&lt;/p&gt;
&lt;p&gt;
Elisp is a lisp variant embedded within the Emacs editor. You could
actually describe Emacs as an &amp;#34;elisp machine&amp;#34; in the same sense of the
old &lt;a href=&#34;https://en.wikipedia.org/wiki/Lisp_machine&#34;&gt;lisp machines&lt;/a&gt;. It&amp;#39;s not quite the same as the way most other
editors have extension or plugin languages. Other than the core of
Emacs, which is written in C, everything is elisp. Even when you type
in a key. For example, when I type in an &amp;#39;x&amp;#39; on the keyboard, emacs
actually runs the self-insert-command function. When you open a new
file, which you might do in another editor using the File menu, you
actually are running the find-file function in elisp. So instead of
using the menu or the keybinding to open a new file you can write, in
emacs (find-file &amp;#34;some-file&amp;#34;) and run that function and the file will
be opened.&lt;/p&gt;
&lt;p&gt;
In the video, I talk a bit about elisp in general, show how to call
some built in functions, use the help a bit and then set the stage for
the rest of the series.&lt;/p&gt;
&lt;p&gt;
Important functions and keybindings from the video:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C-h i&lt;/td&gt;
&lt;td&gt;info&lt;/td&gt;
&lt;td&gt;bring up the info (help) system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-h k&lt;/td&gt;
&lt;td&gt;describe-key&lt;/td&gt;
&lt;td&gt;bring up info for the next keystroke&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-h f&lt;/td&gt;
&lt;td&gt;describe-function&lt;/td&gt;
&lt;td&gt;bring up help for a function&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C-x C-e&lt;/td&gt;
&lt;td&gt;eval-last-sexp&lt;/td&gt;
&lt;td&gt;evaluates the previous elisp form&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;eval-print-last-sexp&lt;/td&gt;
&lt;td&gt;like above but also print the result&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
In the next video, we&amp;#39;ll learn how to create our own functions,
explore some fundamental elisp structures and functions, and try to
write something useful.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video, enjoy:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/x9Qws7ZOksc&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 81 Elfeed Webkit</title>
      <link>https://cestlaz.github.io/post/using-emacs-81-elfeed-webkit/</link>
      <pubDate>Mon, 26 Jun 2023 15:27:54 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-81-elfeed-webkit/</guid>
      <description>
&lt;p&gt;
Before I get to my elisp series, I thought I&amp;#39;d do a short video on
&lt;a href=&#34;https://github.com/fritzgrabo/elfeed-webkit&#34;&gt;elfeed-webkit&lt;/a&gt;. This was suggested to me by &lt;a href=&#34;https://irreal.org/blog/&#34;&gt;jcs&lt;/a&gt;. Even though I think
elfed-webkit is great - a mini-gamechanger for me, I thought that
there wasn&amp;#39;t enough for a video. Then I realized that in order to run
elfeed-webkit you need to have xwidgets enabled in your Emacs build. I
thought I&amp;#39;d make a video on how I build Emacs and enable features like
xwidgets and then I quickly set up elfeed-webkit.&lt;/p&gt;
&lt;p&gt;
If you use Emacs and reed rss/atom feeds, you really should check out
elfeed and if you use elfeed, then elfeed-webkit. It basically allows
elfeed to render feeds as the appear in a browser right from within Emacs.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the writeup with the video at the bottom.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Building Emacs
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I run Linuxmint which is an Ubuntu Linux derivative. To build Emacs
here, you have to first set up your machine with all the right
developer tools.&lt;/p&gt;
&lt;p&gt;
First, you have to go to your software manager and enable software
sources - I show how to do that in the video.&lt;/p&gt;
&lt;p&gt;
Then you have to install the build tools. I typed the follownig
commands.&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sudo apt update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sudo apt install build-essential
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sudo apt build-dep emacs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The first line updates your package repo lists to reflect that you
turned on the source code repos and the next two install what you
need.&lt;/p&gt;
&lt;p&gt;
Next, you have to grab the Emacs source code. I show you how in the
video using git. Grab it from
&lt;a href=&#34;https://savannah.gnu.org/git/?group=emacs.&#34;&gt;https://savannah.gnu.org/git/?group=emacs.&lt;/a&gt; You can also download the
files old school from the same site.&lt;/p&gt;
&lt;p&gt;
In the video, I walk through the compile but the basics are:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sh autogen.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ./configure --without-compress-install --with-native-compilation --with-json --with-mailutils --with-tree-sitter --with-xwidgets CC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gcc-10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  make
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sudo make install&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If the ./configure line gives errors you might need some extra
libraries - I talk about that in the videos.&lt;/p&gt;
&lt;p&gt;
Also note that the ./configure line I used above includes extra
options that I use for tree-sitter - not needed for elfeed-webkit but
It&amp;#39;s another rabbit hole I went down as a result of reading Mickey
Peterson&amp;#39;s &lt;a href=&#34;https://www.masteringemacs.org/article/how-to-get-started-tree-sitter&#34;&gt;article&lt;/a&gt; on it.&lt;/p&gt;
&lt;p&gt;
Once we&amp;#39;ve got Emacs with the required features we can move to elfeed
webkit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Elfeed and Elfeed Webkit
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I already wrote a series of posts with videos on elfeed. If you&amp;#39;ve
never used it, check it out - here are links to the older posts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-29-elfeed/&#34;&gt;https://cestlaz.github.io/posts/using-emacs-29-elfeed/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-30-elfeed-2/&#34;&gt;https://cestlaz.github.io/posts/using-emacs-30-elfeed-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-31-elfeed-3/&#34;&gt;https://cestlaz.github.io/posts/using-emacs-31-elfeed-3/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/&#34;&gt;https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The video shows how I set it up and also its use. Basically I just
copied the config right over from the elfeed-webkit repo but here it
is for convenience:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (straight-use-package &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elfeed-webkit&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; use straight to install&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; and old-school use-package to configure&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (use-package elfeed-webkit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        :straight
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        :demand &lt;span style=&#34;color:#75715e&#34;&gt;;; !&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        :init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (setq elfeed-webkit-auto-tags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(webkit comics))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        :config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (elfeed-webkit-auto-enable-by-tag)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        :bind (:map elfeed-show-mode-map
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-webkit-toggle)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
So, all of this is in the video. Enjoy:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GGypKmrOf2I&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Working on a new short Emacs series</title>
      <link>https://cestlaz.github.io/post/elisp-series/</link>
      <pubDate>Sat, 17 Jun 2023 19:45:19 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/elisp-series/</guid>
      <description>&lt;p&gt;
It&amp;#39;s been quite some time since my last Emacs video. The lack of
content has been for two reasons. One was my overall feeling of
burnout and the other was that most of my videos involved looking at
new packages and I really wasn&amp;#39;t playing with anything new.&lt;/p&gt;
&lt;p&gt;
Now that I&amp;#39;ve started my retirement the burnout is gone and I&amp;#39;m
starting to think about what my next adventures will be. As I start
figuring out the big picture I thought I&amp;#39;d get back to some Emacs
content.&lt;/p&gt;
&lt;p&gt;
What&amp;#39;s on tap?&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m thinking about a short series on elisp. Now, I&amp;#39;m no elisp master -
I&amp;#39;ve only done enough to get by but I think that could make for some
nice beginner content and I&amp;#39;m sure I can count on the Emacs community
to (in a nice way) tweak my content towards best practices.&lt;/p&gt;
&lt;p&gt;
The plan is to start from the basics and ultimately write a few
interesting functions. Maybe a minor mode or two. Probably nothing
hugely useful but something that will illustrate the concepts. That
said, I want the examples to be at least a little useful and not
totally contrived.&lt;/p&gt;
&lt;p&gt;
I also figure that I probably won&amp;#39;t be doing laundry lists of
functions or going over all the different ways of doing things but
hopefully I can provide pointers and process so other elisp beginners
can find their way to the info they&amp;#39;ll need for their specific
projects.&lt;/p&gt;
&lt;p&gt;
So, stay tuned and look for more Emacs content to come.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 80 Vertico, Marginalia, Consult, and Embark</title>
      <link>https://cestlaz.github.io/post/using-emacs-80-vertico/</link>
      <pubDate>Mon, 25 Oct 2021 16:38:20 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-80-vertico/</guid>
      <description>&lt;p&gt;
In today&amp;#39;s video, we&amp;#39;ll take a look at a few new completion frameworks
for Emacs. For years I&amp;#39;ve been using &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Ivy&lt;/a&gt; and have been very happy with
it but since I decided to rebuild my Emacs config from scratch I
thought I&amp;#39;d try the new kids on the block, &lt;a href=&#34;https://github.com/raxod502/selectrum&#34;&gt;Selectrum&lt;/a&gt; and &lt;a href=&#34;https://github.com/minad/vertico&#34;&gt;Vertico&lt;/a&gt; along
with some support packages.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve liked Ivy from day one and still do. To be honest, from a day to day point of
view, I didn&amp;#39;t notice much difference between Ivy and the newcomers
but I do like their philosophies - they&amp;#39;re supposed to be simple and
minimalist and focus on the Emacs completion API without extending
it. You can read about their respective philosophies on their GitHub
pages. Conveniently, both have sections comparing themselves with the
other frameworks.&lt;/p&gt;
&lt;p&gt;
For configurations, I just cut and pasted the suggested configs.&lt;/p&gt;
&lt;p&gt;
Ultimately I settled on Vertico but both are worth a look.&lt;/p&gt;
&lt;p&gt;
The video shows off Vertico but arguably more importantly, it covers
some of the ancillary packages. First, although I don&amp;#39;t show much
about them are Prescient and Orderless - they let you control how your
selections pop up. I&amp;#39;m using Orderless which lets me search for
components by typing partial completions and using spaces to separate
but it lets you do it in any order. What I mean is that if I&amp;#39;m looking
for the command &amp;#34;vertico-mode&amp;#34; I can search by typing something like
&amp;#34;vert mode&amp;#34; which is what I&amp;#39;ve always done, but I can also do the
search for &amp;#34;mo vert&amp;#34; - typing the second part first. That&amp;#39;s pretty
slick.&lt;/p&gt;
&lt;p&gt;
Next is Marginalia which brings up extra context information when you
search for things. Things like command descriptions or file modes.&lt;/p&gt;
&lt;p&gt;
The third one we look at is Consult which is basically a collection of
useful commands using completions. Basically an answer to Ivy&amp;#39;s
Counsel commands.&lt;/p&gt;
&lt;p&gt;
Finally, and this is the show stopper, the video shows Embark. &lt;/p&gt;
&lt;p&gt;
Links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-6-swiper/&#34;&gt;My post/video on Ivy/Swiper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/raxod502/prescient.el&#34;&gt;Prescient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oantolin/orderless&#34;&gt;Orderless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/raxod502/selectrum&#34;&gt;Selectrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minad/vertico&#34;&gt;Vertico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minad/marginalia/&#34;&gt;Marginalia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minad/consult&#34;&gt;Consult&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oantolin/embark/&#34;&gt;Embark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and of course, the video:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5ffb2at2d7w&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 79 Project</title>
      <link>https://cestlaz.github.io/post/using-emacs-79-project/</link>
      <pubDate>Mon, 11 Oct 2021 11:24:36 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-79-project/</guid>
      <description>&lt;p&gt;
One of the comments on my last video talked about the new project
management support Emacs includes in it&amp;#39;s latest version -
project.el. I remembered reading about it when it rolled around but
then forgot and never checked it out.&lt;/p&gt;
&lt;p&gt;
Up until recently when working in projects I used &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;Projectile&lt;/a&gt;, a great
package by &lt;a href=&#34;https://twitter.com/bbatsov&#34;&gt;Bozhidar Batsov&lt;/a&gt;, also known as Bug. I only used it when
doing development work - that&amp;#39;s when I find myself jumping around
within a group of related files. At other times, I&amp;#39;m pretty much in
one file, do my thing, then move on.&lt;/p&gt;
&lt;p&gt;
I wrote a post and did a video on Projectile a while ago - you can
check it out [[&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/&#34;&gt;https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/&lt;/a&gt;
][here]].&lt;/p&gt;
&lt;p&gt;
As I mentioned in the last video, I decided to rebuild my Emacs config
from scratch and I&amp;#39;m trying to be a bit more minimalist so with that
reminder I got, I figure it&amp;#39;s time to check out the now built in
project.el. If it&amp;#39;s as good as projectile, or even, good enough, it
could be a nice alternative.&lt;/p&gt;
&lt;p&gt;
At it&amp;#39;s core, project.el works similarly to projectile. There&amp;#39;s a
prefix key an then an action which is restricted to your project. For
projectile, it was &lt;code&gt;C-c p&lt;/code&gt; and the default for project.el is &lt;code&gt;C-x
p&lt;/code&gt;. No big difference there. Projectile seems to have many many more
options but in general, I find that all I need is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Switch to a project - &lt;code&gt;C-x p p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Find or open a file in a project - &lt;code&gt;C-x p f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Switch buffers in a project - &lt;code&gt;C-x p b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Delete all the project buffers - &lt;code&gt;C-x p k&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List the project buffers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Project.el has all except listing all the buffers. It also supports a
few other features that I think I&amp;#39;ll find useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;project dired - &lt;code&gt;C-x p d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;project shell (or eshell) &lt;code&gt;C-x p s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;project regex search and variants &lt;code&gt;C-x p g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#39;m not sure if projectile has these. It probably does and I could see
them being useful. I probable won&amp;#39;t use the regex searches much
because I&amp;#39;ll likely use other tools for those like consult-ripgrep.&lt;/p&gt;
&lt;p&gt;
So, it certainly seems like project.el has enough coverage for my
purposes. Another difference between the two projects is that
project.el only supports a couple of project definitions - things that
are supported by Emacs&amp;#39; VC system ad things supported by Emacs EDE
thing (which I&amp;#39;ve never really played with). I seem to recall
Projectile being more flexible.&lt;/p&gt;
&lt;p&gt;
In any event, project.el looks like it&amp;#39;s a nice simple alternative at
least for me. Check out the video for the runthrough:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/UagDCTjcifY&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>My project grading workflow</title>
      <link>https://cestlaz.github.io/post/using-emacs-78-grading/</link>
      <pubDate>Sun, 10 Oct 2021 10:44:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-78-grading/</guid>
      <description>&lt;p&gt;
Grading sucks. Even for a well crafted assignment it takes time and
rarely does it give you the same insights into your students as you
can get from just observing them and working with them, at least when
the environment supports you doing so. &lt;/p&gt;
&lt;p&gt;
This leads lots of teachers to go to auto graders. I can&amp;#39;t bring
myself going along with that. While assignments are imperfect and
tedious to grade, they do provide some insight to your students and
that&amp;#39;s an important part about being a teacher.&lt;/p&gt;
&lt;p&gt;
So, I always keep my eye out for ways to improve my project gradiing
workflow.&lt;/p&gt;
&lt;p&gt;
In the video below, I step through my process. It&amp;#39;s mostly Emacs but I
also use GitHub classroom and the terminal along the way.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re here as for the Emacs, I&amp;#39;d any thoughts on alternatives or
improvements.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re here as a teacher, I&amp;#39;d love to hear what your flow is like
and what tools you use.&lt;/p&gt;
&lt;p&gt;
Enjoy&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/7HLVcQi8GGk&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Final thoughts on Advent of Code 2020</title>
      <link>https://cestlaz.github.io/post/advent-2020-final-thoughts/</link>
      <pubDate>Sun, 27 Dec 2020 15:57:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-final-thoughts/</guid>
      <description>
&lt;p&gt;
Time for some final thoughts on &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code 2020&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
This was my sixth Advent of Code but the first time I completed all 25
days. Better than last year&amp;#39;s 31 and a whole lot better than my
weakest effort of 11 stars in 2017. I managed to find the time to
finish all but two on the day they were released and finished those
two on Christmas morning. This was also the first year I wrote all my
solutions in Clojure and I also made a bunch of blog posts and videos
(linked on the bottom of this post).&lt;/p&gt;
&lt;p&gt;
From my point of view 2020 was the best AoC to date and I&amp;#39;m not just
saying that because I finished all the problems. Well, maybe I am but
it&amp;#39;s really because the content and release of content lent itself to
my completing all the problems.&lt;/p&gt;
&lt;p&gt;
Before jumping in to my specific commentary I want to remind readers
that anyone&amp;#39;s perceptions of an event like this will be biased. If
there&amp;#39;s an aspect that I particularly liked you can bet there&amp;#39;s
someone else out there who didn&amp;#39;t like it.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Overall content
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
As usual a wide range of topics were covered including binary numbers,
pattern matching, simulation, dynamic programming, mathy stuff,
parsing, graph algorithms and more. &lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t find myself totally lost on any questions. There were some
problems that at least to me seemed to require graph algorithms and
one where dynamic programming or at least memoization was a boon but
for the most part it seemed that problems were indeed
approachable. Even the math day that had a bunch of reddit chatter
over the Chinese Remainder Theorem could be done without knowing about
the CRM. That was good because I had never heard of it (and if any of
the redditors who mentioned that it should  common knowledge, it
shouldn&amp;#39;t - I have an undergrad in CS and a Masters in CS along wit 30
years of teaching and this is the first time I&amp;#39;ve seen it). &lt;/p&gt;
&lt;p&gt;
In past years there always seemed to be a few problems that you needed
some preexisting knowledge to attempt. I had no problem with that - no
need to have  to finish all the problems and there&amp;#39;s nothing wrong
with hitting up reddit, learning something new and then tackling the
problem. This year it seemed that the problems more directly led to
the knowledge. I&amp;#39;ll talk about this more later. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Problem size
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
For the most part the problems were the perfect size for me. I&amp;#39;d read
the problems when I woke up, work on part 1 after my run and then part
2 later in the day - at least that was the ideal - bugs and life
sometimes got in the way. None of the problems required pages and
pages of code for the solutions which I liked. Problems were clever
and interesting but led to moderately sized solution. &lt;/p&gt;
&lt;p&gt;
In past years, the weekend problems were longer and/or harder. The
logic being that there&amp;#39;s more time to work on them. I never liked
that. AoC is great but it&amp;#39;s an add on. It&amp;#39;s an add on to work during
the week but it&amp;#39;s an add on to family time on the weekend. I liked
that this year the only weekend problem that was much larger and longer
was day 20 - the image reconstruction. &lt;/p&gt;
&lt;p&gt;
This is not to say that some problems didn&amp;#39;t take a good deal of time
but rather that once you had an approach you didn&amp;#39;t sit down and say
&amp;#34;oh man, now I have to write hundreds of lines of code to implement
this.&amp;#34;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
particularly nice problems 
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
In spite of my not finishing part 2 until the last day, I loved day
20 - Jurassic Jigsaw. It was a little long and I spend more time than
I care to admit on debugging a really silly error but I loved the
problem.&lt;/p&gt;
&lt;p&gt;
Why? &lt;/p&gt;
&lt;p&gt;
First, it had staged difficulty -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Parse the data into a reasonable representation&lt;/li&gt;
&lt;li&gt;Do a partial edge matching for part 1 (not so hard)&lt;/li&gt;
&lt;li&gt;Do the harder / longer matching to reconstruct the image&lt;/li&gt;
&lt;li&gt;Remove the border and solve the problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Second, you actually discovered something - you &lt;strong&gt;found&lt;/strong&gt; sea
monsters!!!! You had a problem with an &amp;#34;unknown&amp;#34; solution and you
figured it out. Contrast that with say, day 2 where you just had to
validate passwords. That was also a fun problem but there was no big
reveal. It was really cool to decode your image and actaully find the
hidden monsters. &lt;/p&gt;
&lt;p&gt;
Day 16 and 21 allowed for similar discovery at the end but not quite
as cool. I liked 16 very much but had a hard time getting my head
around the example for 21. Still a cool problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Teachable stuff
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
As usual, I found a lot that I liked as a teacher in AoC. I love that
many of the problems introduce problem solvers to new things. For me,
the Chinese Remainder Theorem was new even though I only discovered it
via the subreddit. Cellular Automata was prominently featured
this year, binary explicitly mentioned as was recursion. &lt;/p&gt;
&lt;p&gt;
The recursion problem was particularly nice. The setup led to and, if
I recall, explicitly mentioned recursion. It also talks about a key
challenge - data mutability. The question states that after returning
from a &amp;#34;subgame&amp;#34; - the recursion - you have to continue the original
game from where it left off - state management. If you&amp;#39;re language
passes references in your calls this could lead to trouble. I&amp;#39;m
guessing (hoping?) that for people who solved that day who were new to
recursion got a deeper understanding than just through the usual n!
and such.&lt;/p&gt;
&lt;p&gt;
Another thing I liked was the spiraling. That, in teacher talk, is
when you go back to an earlier topic. This year had three questions
based on Cellular Autoamta. The first was the basic, the next took you
to a higher dimension and the third to a different shape. Each one
reviewed and extend fro the earlier problem. I loved it. This might
sound similar to last year&amp;#39;s intcode but the difference is that evne
if you didn&amp;#39;t complete the earlier problems you had a shot at the
latter ones. With Intcode if you had something wrong with your earlier
interpreter you were out of luck.&lt;/p&gt;
&lt;p&gt;
The allergens problem also allowed for the use of the same method you
used to solve the boarding pass problem. &lt;/p&gt;
&lt;p&gt;
Loved the spiraling.&lt;/p&gt;
&lt;p&gt;
I could probably go on but this post is already long enough.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Links
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I&amp;#39;ll finish off with links to my earlier posts on Advent of Code.&lt;/p&gt;
&lt;p&gt;
Already looking forward to next year.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-leadin.&#34;&gt;advent-2020-leadin.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day-01&#34;&gt;advent-2020-day-0&lt;/a&gt;1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day02&#34;&gt;advent-2020-day02&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day03&#34;&gt;advent-2020-day03&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day04&#34;&gt;advent-2020-day04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day05&#34;&gt;advent-2020-day05&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day06&#34;&gt;advent-2020-day06&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day0708&#34;&gt;advent-2020-day0708&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day0910&#34;&gt;advent-2020-day0910&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day11&#34;&gt;advent-2020-day11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day14&#34;&gt;advent-2020-day14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day16&#34;&gt;advent-2020-day16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-1718&#34;&gt;advent-2020-1718&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-19-23&#34;&gt;advent-2020-19-23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-21-24&#34;&gt;advent-2020-21-24&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-final-thoughts&#34;&gt;advent-2020-final-thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Days 21 and 24</title>
      <link>https://cestlaz.github.io/post/advent-2020-21-24/</link>
      <pubDate>Thu, 24 Dec 2020 11:43:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-21-24/</guid>
      <description>
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/24&#34;&gt;Day 24&lt;/a&gt; didn&amp;#39;t take that much time so I had a chance to go back and
finish &lt;a href=&#34;https://adventofcode.com/2020/day/21&#34;&gt;day 21&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
As usual, all my code is up &lt;a href=&#34;https://github.com/zamansky/advent2020&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Day 21
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/21&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
It took me a while to get my head around this example. You have a set
of recipes. Each recipe has a list of ingredients and a list of
allergens. Your job for part 1 was basically to determine which
ingredients don&amp;#39;t contain any allergens. Part 2 had you determining
which ingredient had which allergen.&lt;/p&gt;
&lt;p&gt;
Part of what I think made this hard was that ingredients were just
random strings of letters as opposed to actual ingredients or at least
pronounceable words or letter strings.&lt;/p&gt;
&lt;p&gt;
The key part of the description as that each allergen was present in
&lt;strong&gt;exactly one&lt;/strong&gt; ingredient and each ingredient had &lt;strong&gt;at most&lt;/strong&gt; one
allergen. &lt;/p&gt;
&lt;p&gt;
So, for part 1, the tact was for each allergen, take all the recipes
that had it. In the example, the first and second recipes had
dairy (one indexing). Since only one ingredient can have the dairy
allergen the that ingredient must be in both lists.&lt;/p&gt;
&lt;p&gt;
If you take all the recipes that have the dairy allergen and take each
of their lists of ingredients as a set and find all their
intersections, you&amp;#39;ll be left with all the ingredients that can have
the dairy allergen.&lt;/p&gt;
&lt;p&gt;
Do this with all the allergens and you&amp;#39;ll have all the ingredients
that could contain them. The other igredients are safe and lead to the
answer to part 1.&lt;/p&gt;
&lt;p&gt;
Part 2 had you identifying each ingredient / allergen
pair. Fortunately, the data set we ended up with for part 1 - each
allergen and it&amp;#39;s list of possible ingredients was made to order. One
of them had only one ingredient per allergen. We could identify that
one and then remove that ingredient from the remaining allergen&amp;#39;s
lists. Then repeat to find the next one and then the next. This is
similar to the solution to day 16. Of course this isn&amp;#39;t a general
solution but fortunately the data was all set up for us.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Day 24
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/24&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Back to Cellular Automata!!!!!! The catch this time is the world is a
hex grid. This means that each cell has six neighbors so using a 2D
array or similar representation seems like an even worse idea than it
was for the 3D and 4D problems earlier this month.&lt;/p&gt;
&lt;p&gt;
Even before representing the world parsing was an issue. Since a given
cell can have neighbors to the east, west, northeast, northwest,
southeast or southwest, instructions are given with a line of &amp;#34;moves&amp;#34;
describing a tile to flip starting from 0,0. &lt;/p&gt;
&lt;p&gt;
For example, the line &amp;#34;EEE&amp;#34; would move three east from the origin and
flip that tile while &amp;#34;ESEE&amp;#34; would move one east, one southest and then
one further east and flipt the tile there.&lt;/p&gt;
&lt;p&gt;
Fortunately, this wasn&amp;#39;t too bad. As we traverse down the line, if we
see an &lt;strong&gt;e&lt;/strong&gt; or a &lt;strong&gt;w&lt;/strong&gt; then the instruction is one character so we add
the instruction to a list of steps an then continue. Otherwise the
instruction is 2 characters so we take 2 and add the instruction adn
then proceed.&lt;/p&gt;
&lt;p&gt;
Next was the data representation. It seemed that a list of live cells
would again be the best solution. I figured on using this mapping: &lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;(-2,0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;(2,0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NE&lt;/td&gt;
&lt;td&gt;(-1,-1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NW&lt;/td&gt;
&lt;td&gt;(1,-1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SE&lt;/td&gt;
&lt;td&gt;(-1,1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SW&lt;/td&gt;
&lt;td&gt;(1,1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
I later found out that this is called &amp;#34;double coordinates.&amp;#34; Since
we&amp;#39;re not storing the full hex grid there&amp;#39;s no waste anyway and I
wasn&amp;#39;t planning on making a visualization so I didn&amp;#39;t worry about how
this would map to an actual screen.&lt;/p&gt;
&lt;p&gt;
Now, finding the coordinate of a tile was pretty easy. In Clojure
it&amp;#39;s: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; assume deltas is a lookup dictionary of the above mapping&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;get-tile-location [steps]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (reduce (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[loc step]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              (map + loc (&lt;span style=&#34;color:#a6e22e&#34;&gt;deltas&lt;/span&gt;  step))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              ) [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] steps))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
In Python it would look more like this: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# assume deltas is a dictionary with the above mapping&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# and steps is a list of instructions [&amp;#34;e&amp;#34;,&amp;#34;w&amp;#34;,&amp;#34;se&amp;#34;, etc]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; steps:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      loc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [sum(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(loc, deltas[step])]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
We can now convert any input line of instructions to a coordinate. If
we write a routine to flip a tile we can now set up our world and
answer part 1.&lt;/p&gt;
&lt;p&gt;
Part 2 involved basically turning the part 1 world into a cellular
automaton. Fortunately, this was easy given the solution to earlier CA
problems. It as just a matter of updating the get-neighbors routine
and the rule to go from one generation to the next and we&amp;#39;re done.&lt;/p&gt;
&lt;p&gt;
I enjoyed this - it was a nice twist on the earlier CA
questions. First we had a simple CA, then higher dimensions and now
changing the layout of the world but still within 2 dimensions. Once
we had a way of representing a tile and mapping from a tile to its
neighbors we had already solved the problem.&lt;/p&gt;
&lt;p&gt;
One more day to go but it&amp;#39;s been a nice run of problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - 19 through 23</title>
      <link>https://cestlaz.github.io/post/advent-2020-19-23/</link>
      <pubDate>Wed, 23 Dec 2020 15:09:38 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-19-23/</guid>
      <description>
&lt;p&gt;
A few days have past so it&amp;#39;s time for an update. Two more days to go
and while I haven&amp;#39;t completed all the problems, I have accumulated 43
stars which is a personal best. Given the nature of the problems I&amp;#39;m
missing, I might even go back and do them at some point. Of course, I
may very well also just crash out on the final two days.&lt;/p&gt;
&lt;p&gt;
As usual, all my code is up &lt;a href=&#34;https://github.com/zamansky/advent2020&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Day 19
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/19&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Not a whole lot to say about this one. It&amp;#39;s the weekend and AoC has
traditionally had longer / harder problems over the weekends. I was
surprised when the first weekend&amp;#39;s problems - 12 and 13 weren&amp;#39;t
significantly longer than the surrounding days. &lt;/p&gt;
&lt;p&gt;
I read over this and it screamed &lt;strong&gt;parser&lt;/strong&gt; and to be honest, I really
wasn&amp;#39;t up for writing a parser on a Saturday morning. Instead, I
cheaped out.  I looked for a Clojure parser generator and found
&lt;a href=&#34;https://github.com/engelberg/instaparse&#34;&gt;instaparse&lt;/a&gt;. What&amp;#39;s more, instaparse supported input in the form of the
provided AoC data so I literally just had to read the grammar into
instaparse and run it on the data for the answer. Part 2 was pretty
much the same.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Day 20
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/20&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This was the big one. Basically taking 144 tiles and figuring out how
to form them in an image. &lt;/p&gt;
&lt;p&gt;
I finished part 1. I read in all the tiles and then for each, compared
it&amp;#39;s edges with the edges of the other tiles (and the reverse of the
edges to account for transformations). This told me how many other
tiles each tile connects with. Central tiles each connect to 4 other
ties, edges, to three but corners only to 2. Part 1 just had you find
the corners so it wasn&amp;#39;t too big a deal.&lt;/p&gt;
&lt;p&gt;
Part 2 involves assembling the image and then finding sea monsters. I
haven&amp;#39;t done this yet. Armed with the corner, it should be easy to
find the top row and then build the image going down. &lt;/p&gt;
&lt;p&gt;
I think it&amp;#39;s going to be a bear to code though since each tile has to
be transformed via flipping and/or rotating into the correct
orientation.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m hoping to get back to it. We&amp;#39;ll see though. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Day 21
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/21&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Haven&amp;#39;t done this one yet. Just couldn&amp;#39;t get my head around the
example on an early Monday morning. &lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know if I&amp;#39;ll finish question 20 but I do really hope to get
back to give this one a go.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Day 22
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/22&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Part 1 here was pretty straightforward - you had a few rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if player 1&amp;#39;s deck is empty, player 2 wins&lt;/li&gt;
&lt;li&gt;if player 2&amp;#39;s deck is empty, player 1 wins&lt;/li&gt;
&lt;li&gt;otherwise both players draw a card and whoever drew the higher card gets both, they go on the
back of the winners deck and you continue play.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#39;s it. Basically just run the simulation.&lt;/p&gt;
&lt;p&gt;
Part 2 added a recursive subgame. Under certain circumstances you
pause the current game and do a little subgame. The catch is that you
have to save the state of the current game and when the subgame or
subgames end, you continue the suspended game from where you left off.&lt;/p&gt;
&lt;p&gt;
This means that if you are representing your decks with arrays or some
other data structure where you can change the elements you have to be
careful. In Clojure, however, where data is immutable by default you
don&amp;#39;t have to worry about that. &lt;/p&gt;
&lt;p&gt;
I was basically able to just rewrite my play routine for the new
rules and whenever we had to go to a subgame, I just made a
traditional recursive call. My guess is that if I had coded this up
originally in Java or C++ I probably would have had a harder time
going from part 1 to part 2. On the other hand, there were some
problems with Java or C++ would have made my part 1 to part 2
transitions easier - depends on the problem. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Day 23
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/23&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This was the fun one - at least from a teacher&amp;#39;s point of view. &lt;/p&gt;
&lt;p&gt;
Like day 22 you had to implement a game. You set up a bunch of
numbered cups in a circle and then: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;remove the three cups right after the current cup&lt;/li&gt;
&lt;li&gt;find out where they should be reinserted based on the game rules
(see the problem link for details)&lt;/li&gt;
&lt;li&gt;reinsert those three cups at that reinsertion point.&lt;/li&gt;
&lt;li&gt;move from the current cup to the next cup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I did part 1 using a simple list and list manipulations. I used
Clojure but the python equivalent would be to have a list representing
all the cups, move around ti with mod, and remove cups and add them
using slices.&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# given board = [3,8,9,1,2,5,4,6,7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# to get the next board state&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; board[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  to_remove &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; board[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  remaining &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; board[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_target(board,remove)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  newboard &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remaining[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:idx] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; to_remove &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; remaining[idx:] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [current]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
I might have the indexing a little off and the &lt;code&gt;find_target&lt;/code&gt; routine
isn&amp;#39;t shown adn might have different parameters. As I&amp;#39;ve said, I wrote
my solution in Clojure. This should give the general idea though. &lt;/p&gt;
&lt;p&gt;
You basically had to run through 10 turns to find the answer.&lt;/p&gt;
&lt;p&gt;
Part 2 added a twist - the game board was now &lt;strong&gt;one million&lt;/strong&gt; in size
and you had to run the simulation through &lt;strong&gt;ten million&lt;/strong&gt; turns. No way
was my part 1 solution going to work. &lt;/p&gt;
&lt;p&gt;
The problem called for something that required fewer list traversals
and builds and where it would be quick and easy to find a given
element. &lt;/p&gt;
&lt;p&gt;
My first thought was to build a traditional linked list. That would
help but it would also require a number of linear traversals.&lt;/p&gt;
&lt;p&gt;
Next thought? How about a dictionary? &lt;/p&gt;
&lt;p&gt;
If you set up a dictionary where the keys are the nodes and the values
represent the pointer to the next node you could really quickly and
easily both traverse and manipulate the data set. &lt;/p&gt;
&lt;p&gt;
For example, if your board was [3,8,9,1] then you&amp;#39;d use this
dictionary to represent it - remember the 1 wraps back around to
the 3.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
So if you&amp;#39;re current node was represented in a variable &lt;code&gt;current&lt;/code&gt; the
three nodes you&amp;#39;ll remove would be &lt;code&gt;[nodes[current],
noeds[nodes[current]], nodes[nodes[nodes[current]]] ]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
As an added bonus, the question pointed out that your data set would
have every positive integer represented once. That is, part 1 had a 9
item list with all the values 1 through 9 and the million item one had
values 1 through 1 million. This makes finding the insertion point
both easy and fast.&lt;/p&gt;
&lt;p&gt;
It turns out that I think the dictionary based solution is actually
cleaner than the list one in addition to being faster.&lt;/p&gt;
&lt;p&gt;
This solution was no speed demon - still took ~40 seconds to get an
answer but that&amp;#39;s good enough for me. &lt;/p&gt;
&lt;p&gt;
Of the problems I wrote up today, this one was my favorite. Students
typically think of data structures as what they are - if they have an
array, use it as an array, a linked list is a linked list and a
dictionary or hash table is, well, you know. If you need a linked
list, you need to make a traditional linked list - not so. this is a
great example of using a dictionary as a hash table. There are
conceptual data structures and actual in computer
representations. Often you use the implementation directly - use a
hash table to store data for lookup or use an array to represent a
list. It can be very empowering though when the student sees that
the implementations are just tools in the belt and they can be used in
all sorts of interesting ways.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Days 17 and 18</title>
      <link>https://cestlaz.github.io/post/advent-2020-1718/</link>
      <pubDate>Fri, 18 Dec 2020 12:35:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-1718/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Day 17
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/17&#34;&gt;Day 17&lt;/a&gt; brought back Cellular Automata. It was a nice follow up to &lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day11/&#34;&gt;day
11&lt;/a&gt;. In my &lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day11/&#34;&gt;writeup&lt;/a&gt; I talked about data representation - how a Cellular
Automoton like Conway&amp;#39;s game of life is a nice 2D array project in a
class like APCS-A but multi dimensional arrays are only one way to
represent a cellular automaton. Day 17 really drove that home. &lt;/p&gt;
&lt;p&gt;
The actual rules were pretty simple - if a cell is active and has 2 or
3 active neighbors it stays active. If it&amp;#39;s inactive and has three
active it becomes active. Otherwise the cell is inactive. &lt;/p&gt;
&lt;p&gt;
The catch for part 1 is that this CS is in three dimensions. Each and
a cell&amp;#39;s neighbors are defined as all coordinates that differ by one
in any of the three dimensions. So, if a cell is at an (x,y,z) location
it&amp;#39;s neighbors will be at (x+1,y,z), (x-1,y,z), (x+1,y+1,z),
(x+1,y-1,z), etc. for 26 neighbors in all. &lt;/p&gt;
&lt;p&gt;
You could use a list  within a list within a list or a three
dimensional array to represent your world but that&amp;#39;s tricky and error
prone. What&amp;#39;s worse, part 2 took the CA into the fourth dimension.&lt;/p&gt;
&lt;p&gt;
Better is to just keep a list or set of active cells. Then the problem
becomes pretty easy. You need to be able to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find all of a cell&amp;#39;s neighbors - this is pretty easy because you
can iterate over all the +1 and -1 possibilities for each of the x,
y, and z values.&lt;/li&gt;
&lt;li&gt;Find all the potential cells for the next state - this is also
pretty easy because it&amp;#39;s the set of all cells that are currently
active along with all of their neighbors. &lt;/li&gt;
&lt;li&gt;Count a given cell&amp;#39;s active neighbors - this is easy once you&amp;#39;ve
done the find neighbors routine. &lt;/li&gt;
&lt;li&gt;A way to test if a cell is active which is just checking to see if
it&amp;#39;s in your active cells list or set.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then, it&amp;#39;s pretty easy to run the CA: 
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pythonesque pseudocode &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;potential_cells &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_all_neighbors(current_active_cells)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_cells &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cell &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; potential_cells: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count_neighbors(cell)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_active(cell) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_cells&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(cell)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; is_active(cell)) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_cells&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(cell)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Then you just have to run generate new states until you get the
answer.&lt;/p&gt;
&lt;p&gt;
Part 2 extended the CA to 4 dimensions. If you had a multidimensional
array this would get super message but with a list of active cells,
the changes are minimal - just add an extra coordinate, update getting
the neighbors and you&amp;#39;re good to go.&lt;/p&gt;
&lt;p&gt;
This is a case of where thinking through your data representation can
be a big win.&lt;/p&gt;
&lt;p&gt;
Clojure code &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day17.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Day 18
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/18&#34;&gt;Day 18&lt;/a&gt; was all about evaluating math expressions. For part 1 you had
parenthesized expressions consisting of numbers * and + that you had
to evaluate but you had to do it by first doing parens then left to
right - multiplication was not a higher precedence.&lt;/p&gt;
&lt;p&gt;
This sounds like a parsing first problem but it turns out I was able
to exploit some of Clojure&amp;#39;s language features. Looking at the
subreddit after solving it seems that a bunch of other languages also
have features that could be exploited.&lt;/p&gt;
&lt;p&gt;
Clojure represents data (and programs) as &lt;a href=&#34;https://en.wikipedia.org/wiki/S-expression&#34;&gt;S-Expressions&lt;/a&gt; - basically
stuff in parens. As a prefix language, instead of writing 10+20, in
Clojure you&amp;#39;d write &lt;code&gt;(+ 10 20)&lt;/code&gt;, that is  run the plus function on 10
and 20. If you have something lie &lt;code&gt;(+ 10 (* 20 3))&lt;/code&gt;, Clojure has to
evaluate the inner S-Expression (sexp) before it can add that to +10
so Clojure can do the parsing for us. We can take an input string and
convert it to an sexp using &lt;code&gt;read-string&lt;/code&gt;  but if we just try to do
&lt;code&gt;(read-string &amp;#34;1 + 2 + 3&amp;#34;)&lt;/code&gt; we&amp;#39;d get an error because &amp;#34;1 + 2 + 3&amp;#34;
isn&amp;#39;t a valid sexp so we just surround it by parens:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;equation-sexp (&lt;span style=&#34;color:#a6e22e&#34;&gt;read-string&lt;/span&gt; (str &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 + 2 * 3 + (4 * 5 )&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
The above would leave us with the sexp (1 + 2 * 3 + (4 * 5 )).&lt;/p&gt;
&lt;p&gt;
Next, forgetting the inner parens, we can write a function that will
evaluate an sexp of the form (1 + 2 * 3 + …) etc. Basically, this can
be done with a reduce. Start with the first value then take the rest
of the list two at a time, the first of each pair is an operator and
the second is an operand so apply the operand to the other number in
the pair and your overall result so far.&lt;/p&gt;
&lt;p&gt;
In Clojure it looks like this: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;part1-eval [f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; r]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (reduce (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[ans [op next]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (apply op [ans next] )) f (&lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; r)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Next, we insert that function name to the start of each sexp so 
(1 + 2 * 3 + (4 * 5*)) becomes (part1-eval 1 + 2 * 3 + (part1-eval 4 *
5)). Finally we can do a  Clojure &lt;strong&gt;eval&lt;/strong&gt; on this form which will run
part1-eval on the rest of the sexp which will first run part1-eval on
the 4 * 5, that will return the 20 and then the first part1-eval will
finish it&amp;#39;s calculations to give you the answer. &lt;/p&gt;
&lt;p&gt;
Part 2 was similar but there you had to perform addition before
multiplication. All that was necessary was write a part2-eval function
that would stand in for the part1-eval.&lt;/p&gt;
&lt;p&gt;
The idea is to take an sexp like (1 + 2 * 3 + 4 * 5) we first split this
list around the * this gives us (1 + 2) (&lt;strong&gt;) (3 + 4) (&lt;/strong&gt;) (5). We then
filter this to remove the non numbers which gives (1 2) () (3 4) (5)
(). Then we remove the empty lists: (1 2) (3 4) (5). Add the elements
of each list: 3 7 5 and then multiply them together.&lt;/p&gt;
&lt;p&gt;
All the code is &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day18.clj&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
I like day 17 a lot or some variant for students to discuss data
representations but I think 18 is a little more advanced and probably
wouldn&amp;#39;t touch it in an early CS class - it was fun to work through
though :-). &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - day 16</title>
      <link>https://cestlaz.github.io/post/advent-2020-day16/</link>
      <pubDate>Wed, 16 Dec 2020 17:12:56 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day16/</guid>
      <description>
&lt;p&gt;
Today&amp;#39;s problem was a fun one to solve. Why was it fun? Stay tuned,&lt;/p&gt;
&lt;p&gt;
The basic gist is that you have a plane ticket which is a set of
numbers but you don&amp;#39;t know which number maps to which category - row,
seat, gate, etc. You also know the number ranges for each
category. For example, row might be a number between 6 and 11 or 33
through 44 while a seat might be 13 through 40 or 45 through 50. &lt;/p&gt;
&lt;p&gt;
Finally, you also can see a number of nearby tickets - each also as
tring of numbers. &lt;/p&gt;
&lt;p&gt;
For part 1 you had to determine how many of the nearby tickets are
valid. A ticket is valid if all the numbers on it fall into at least
one category range. &lt;/p&gt;
&lt;p&gt;
See the &lt;a href=&#34;https://adventofcode.com/2020/day/16&#34;&gt;full description&lt;/a&gt; for all the details. &lt;/p&gt;
&lt;p&gt;
First up - parsing - a little cumbersome but not too bad.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Split the input into the three main sections - categories, your
ticket, nearby tickets&lt;/li&gt;
&lt;li&gt;Convert the categories into a usable form&lt;/li&gt;
&lt;li&gt;Convert your ticket into a list of numbers&lt;/li&gt;
&lt;li&gt;Convert the nearby tickets into a list of tickets each one being a
list of numbers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Taking each step in turn and it&amp;#39;s not too bad - particularly if you&amp;#39;re
comfortable with regular expressions.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
part 1
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Representing the categories leads us to our first interesting
decision. How will we test to see if a ticket is valid and based on
that how will we represent the categories?&lt;/p&gt;
&lt;p&gt;
Each category has two ranges connected with an &lt;strong&gt;or&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
row: 6-11 or 33-44
seat: 13-40 or 45-50
&lt;/pre&gt;
&lt;p&gt;
One could make a construct to hold the bounds, loop through the nearby
tickets and for each value, run an if statement with the two ranges
connected by an &lt;strong&gt;or&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;
This is where a class can talk about code vs data - a topic I&amp;#39;m really
fond of.&lt;/p&gt;
&lt;p&gt;
Instead of taking the above range and having some test like: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ticket:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; low1 &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; high1) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; low2 &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; high2):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       do something&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
or specifically for the row example:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ticket:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       do something&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
you could make a set with all the possible seats  and then just test
to see if the seat was in the set: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set( range(low1,high&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set( range(low2,hight2&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;valid_seats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;union(r2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# then later&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seat &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; valid_seats:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  do something&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
I just find this more elegant. &lt;/p&gt;
&lt;p&gt;
For part 1 I just made a big set with all the valid seats and then
checked each ticket to see if each if its numbers were in the valid
seats. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
part 2
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
For part 2 first you had to remove all the invalid tickets from the
nearby tickets. Since you figured out how to identify a valid ticket
in part one this shouldn&amp;#39;t be too ahrd.&lt;/p&gt;
&lt;p&gt;
Then we have to sleuth out which column from the tickets represented
which category. This would make a great group activity in a class,
particularly with an interactive language. This is a great data
exploration and representation problem.&lt;/p&gt;
&lt;p&gt;
To get more data, I thought I&amp;#39;d write a routine to pull all of one
column from the nearby tickets. Then I could see if all the values in
that row were valid for a particular category. For example, are all
the first numbers of all the tickets valid numbers for row. If so,
that column could represent row. Of course it could also represent
something else as well.&lt;/p&gt;
&lt;p&gt;
Now that i could test to see if a column is valid for a category I
decided to build some data. I built a list of all the possible
categories for each row.&lt;/p&gt;
&lt;p&gt;
Part of it looked sort of like this (but in clojure):&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[ [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wagon&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arrival-station&amp;#34;&lt;/span&gt;] ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wagon&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arrival-station&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;train&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Examining this table, I noticed that one row had only one category,
another had only 2 then one three etc. Great - we can now solve this
by plugging in the row we know, then the next one, then the next etc.&lt;/p&gt;
&lt;p&gt;
The explorations led to an easy answer. I sorted the list and looped
through. At each iteration I: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Added the current category and its associated row to the solution
set.&lt;/li&gt;
&lt;li&gt;Removed that category from the rest of the lines&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When done we had a dictionary with a mapping from category to
row. From there it was pretty simple to find the part 2 answer.&lt;/p&gt;
&lt;p&gt;
Lots of good stuff here. I love the data explorations and the way it
can lead to a pretty straightforward solution.&lt;/p&gt;
&lt;p&gt;
Full solution in clojure can be found here: &lt;a href=&#34;https://adventofcode.com/2020/day/16&#34;&gt;https://adventofcode.com/2020/day/16&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
So far I&amp;#39;ve managed to complete each day - 32 stars. That beats my 31
from last year adn my top year of 40 back in 2016. Tomorrow I give my
last exams and grading ca really begin so we&amp;#39;ll see if I can keep
going but so it&amp;#39;s been a fun Advent of Code year so far.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A teacher looks at Advent of Code day 14</title>
      <link>https://cestlaz.github.io/post/advent-2020-day14/</link>
      <pubDate>Mon, 14 Dec 2020 14:30:47 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day14/</guid>
      <description>&lt;p&gt;
Time for &lt;a href=&#34;https://adventofcode.com/2020/day/14&#34;&gt;Day 14&lt;/a&gt;!!!&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t write up day 12 but here&amp;#39;s a Clojure &lt;a href=&#34;https://www.youtube.com/watch?v=k8fvaAZRtts&amp;amp;feature=youtu.be&#34;&gt;video&lt;/a&gt; runthrough. I also
didn&amp;#39;t write up day 13 mostly because I hacked together my part 2 in
Python and still want to rewrite it in decent clojure. In any event,
all my solutions are up on &lt;a href=&#34;https://github.com/zamansky/advent2020&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Day 14 had a few interesting things going on. At its core it&amp;#39;s a small
machine simulator where you have to deal with binary numbers. One of
the rubs is that the numbers are 36 digits which could be a problem if
your language / machine uses 32 bits to represent integers. &lt;/p&gt;
&lt;p&gt;
Right off, assuming you have large enough ints you have an interesting
choice. Do you work with the data them as numbers or do you just do
string manipulations. &lt;/p&gt;
&lt;p&gt;
I decided to do part 1 as numbers which leads to a nice little
exercise of using bitwise logic operations to turn bits on or off. &lt;/p&gt;
&lt;p&gt;
Part 2 was better solved, at least for me using string
manipulations. That part had a nice little recursive subproblem -
mapping wildcard values in the &amp;#34;mask&amp;#34; to all the possible combinations
of zeros and ones.&lt;/p&gt;
&lt;p&gt;
Both problems also had a bit of fun parsing and, at least for me, a
few neat clojure constructs. &lt;/p&gt;
&lt;p&gt;
I think you could turn this problem into a fun set of class
exercises. My code can be found &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day14.clj &#34;&gt;here&lt;/a&gt; and even if you don&amp;#39;t do Clojure,
you might want to check out the video runthrough:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/oVVHU7PDHyw&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2020 - days 9 and 10</title>
      <link>https://cestlaz.github.io/post/advent-2020-day0910/</link>
      <pubDate>Thu, 10 Dec 2020 16:52:45 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day0910/</guid>
      <description>&lt;p&gt;
As we get closer to the end of the semester and time becomes scarcer
I&amp;#39;m wondering how many more I&amp;#39;ll finish. Barely had time to do days 9
and 10.&lt;/p&gt;
&lt;p&gt;
Not much to say about &lt;a href=&#34;https://adventofcode.com/2020/day/9&#34;&gt;day 9&lt;/a&gt; Part one was basically a rehash of day 1
part 1 but with a sliding widow. Part 2? I just brute force tried all
the subranges. I meant to go back to try to improve the solution but
didn&amp;#39;t have a chance. &lt;/p&gt;
&lt;p&gt;
Clojure code can be found &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day09.clj&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/10&#34;&gt;Day 10&lt;/a&gt; was more interesting. &lt;/p&gt;
&lt;p&gt;
I misread part 1 but ultimately, my solution was to: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;read in the data&lt;/li&gt;
&lt;li&gt;sort it&lt;/li&gt;
&lt;li&gt;prepend a 0&lt;/li&gt;
&lt;li&gt;append an additional value of the max + 3 to the end&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then loop through comparing adjacent values and keep track of the
differences which can be 1, 2, or 3. &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[ int(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../data/sample10-1.dat&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlines()]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(max(data)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(data)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    diff&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;data[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    j[diff&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j[diff&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(j)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Part 2 was where the fun starts - how many combinations of adapters
will take you from the start to the end.&lt;/p&gt;
&lt;p&gt;
For example, if we had adapters with voltages 1,4,5,6 given the
problem constraints that you can only connect an adapter to another
with a &amp;#34;joltage&amp;#34; of up to three less, you can only use the 1 voltage 1
way (coming from the source of 0).&lt;/p&gt;
&lt;p&gt;
4 can connect to only 1 so it can only be used 1 way.&lt;/p&gt;
&lt;p&gt;
5 can connect to 4 so it too can only be used 1 way.&lt;/p&gt;
&lt;p&gt;
6 is a change, it can connect to 5 or 4 so you could chain either
6–&amp;gt;5–&amp;gt;4–&amp;gt;1 or 6–&amp;gt;4–&amp;gt;1 so you can get to 6 two ways. &lt;/p&gt;
&lt;p&gt;
If a student knows recursion and recursive search it&amp;#39;s easy enough to
code something that tries all the paths but it&amp;#39;s going to get very
slow very fast.&lt;/p&gt;
&lt;p&gt;
With a couple of insights though this can lead to a nice dynamic
programming type solution. &lt;/p&gt;
&lt;p&gt;
First thing to notice is that, similar to day 7, instead of looking at
how many adapters a lower joltage adapter can lead to we can look at how
many lower joltage adapters a given adapter could have come from. &lt;/p&gt;
&lt;p&gt;
To do this, we can look at the adapters as a graph. We can build a
dictionary where the keys are the adapter joltages and the entries are
the lower joltage adapters it can connect with:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build_reverse_map&lt;/span&gt;(data):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    graph&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(data)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;len(data) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; data[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; data[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        graph[current]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:j]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rmap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build_reverse_map(data)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/p&gt;
&lt;p&gt;
Line 3 reverses the list then for each item in the list, lines 6
through 8 find the adapters it can connect with. &lt;/p&gt;
&lt;p&gt;
The next insight is that instead of calculating all the possibilities
we can build them a step at a time. &lt;/p&gt;
&lt;p&gt;
Consider the first voltage from our above example of 1,4,5,6.&lt;/p&gt;
&lt;p&gt;
1 – it can only go to 0 so 0 is its only &amp;#34;neighbor&amp;#34; in the graph. We
can only get there 1 way so we can store 1 in ways[1].&lt;/p&gt;
&lt;p&gt;
4 – same deal - its only neighbor is 1. You can only get to 1 one way
so you can only get to 4 1 way - store it in ways[4]&lt;/p&gt;
&lt;p&gt;
5 – same deal, ways[5] = 1.&lt;/p&gt;
&lt;p&gt;
6 - now six is different. It has 2 neighbors - 5 and 4. You can get to
5 one way and 4 one way so we can get to 6 two ways (the sum of the
ways to get to each of it&amp;#39;s neighbors). Store that in ways[6]&lt;/p&gt;
&lt;p&gt;
Go through all the nodes and then ways[the last node] will have your
answer:  &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ways&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ways[d]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    neighbors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rmap[d]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; neighbors:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ways[n]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ways[d]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sum&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/p&gt;
&lt;p&gt;
Relatively straightforward and lightning fast. Dynamic programming
can be really hard to teach but I think this problem might be a good
one to do with an advanced data structures class. &lt;/p&gt;
&lt;p&gt;
For comparison, you can find the clojure code &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day10.clj&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Fun problem today. Looking forward to tomorrow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2020 - Days 7 and 8</title>
      <link>https://cestlaz.github.io/post/advent-2020-day0708/</link>
      <pubDate>Tue, 08 Dec 2020 14:47:17 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day0708/</guid>
      <description>&lt;p&gt;
Today we&amp;#39;ll talk about days &lt;a href=&#34;https://adventofcode.com/2020/day/7&#34;&gt;seven&lt;/a&gt; and &lt;a href=&#34;https://adventofcode.com/2020/day/8&#34;&gt;eight&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s start with 7. I teach all morning on Mondays. I woke up and
worked out and then took a look at the problem in the few minutes
before class. It was certainly harder than days one through six but I
felt it was something I knew I could do based on past experience so I
quickly started to throw something together. I tried to finish it in
the between classes but couldn&amp;#39;t get the right answer to part
one. After class I spent more time debugging. I was pretty certain my
algorithm was right and it turns out it was. The problem was in my
parsing.&lt;/p&gt;
&lt;p&gt;
Anyway, to the problem. Read it over if you haven&amp;#39;t yet.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;ve studied data structures and algorithms you&amp;#39;ll recognize that
this problem can be viewed as a graph problem. Bags are nodes in the
graph and edges tell you what bags each bag can contain.&lt;/p&gt;
&lt;p&gt;
The data is set up to represent a graph like this: &lt;/p&gt;
&lt;img width=&#34;50%&#34; src=&#34;https://cestlaz.github.io/img/advent2020-0708/g1.png&#34;&gt;
&lt;p&gt;
I left out the weights (numbers of bags). This can be represented in
an adjacency list. The video does this in Clojure but in Python, you&amp;#39;d
get something that starts like this:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lightred&amp;#39;&lt;/span&gt;     : [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;brightwhite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mutedyellow&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;darkorange&amp;#39;&lt;/span&gt;   : [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;brightwhite&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mutedyellow&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;brightwhite&amp;#39;&lt;/span&gt;  : [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shinygold&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mutedyellow&amp;#39;&lt;/span&gt;  : [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shinygold&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fadedblue&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shinygold&amp;#39;&lt;/span&gt;    :[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;darkolive&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vibrantplum&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;darkolive&amp;#39;&lt;/span&gt;    :[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fadedblue&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dottedblack&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vibtrantplum&amp;#39;&lt;/span&gt; :[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fadedblue&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dottedblack&amp;#39;&lt;/span&gt;]}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
The challenge comes when you see that many starting points can lead to
the goal of the shiny gold bag. &lt;/p&gt;
&lt;p&gt;
The insight comes when you notice that you can &amp;#34;reverse the edges.&amp;#34;
For example, when we saw the line that led to the lightred contains
brightwhite and mutedyellow, instead we represent it the other way
making two entries - brightwhite is contained by lightred and also
mutedyellow is contained by lightred. &lt;/p&gt;
&lt;p&gt;
Once we set this up the solution is a breadth or depth first search. &lt;/p&gt;
&lt;p&gt;
The video doesn&amp;#39;t do a complet walk through but goes into more
details. &lt;/p&gt;
&lt;p&gt;
I like this type of problem for classes because students can see that
sometimes changing the data can make the problem much easier. If you
implement the adjacency list as it&amp;#39;s presented the problem seems
hard. Once you see you can go from shinygold out instead of from  all
the bags to shinygold the porblem becomes much easier.&lt;/p&gt;
&lt;p&gt;
The other interesting point is that without fundamental data
structures and algorithms this is a hard problem. With them, it&amp;#39;s
pretty straightforward. Remind your students of this when they ask why
they need data structures and algorithms. This problem might be made
up but graphs represent a lot of things in the real world and graph
traversals and algorithms can solve a lot of real world problems&lt;/p&gt;
&lt;p&gt;
Now to day 8. &lt;/p&gt;
&lt;p&gt;
Day 8 involved a simple machine simulator and leads to a very
straightforward solution - write a program that simulates the computer
stated in the problem. My solution tries to approach the problem in a
functional way and also makes use of a function lookup table to avoid
multiple ifs. The solution and complete walk through is in the video
and in Clojure but a similar solution can be written in Python.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/IEjnnRhUAxg&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2020 - Day 06</title>
      <link>https://cestlaz.github.io/post/advent-2020-day06/</link>
      <pubDate>Sun, 06 Dec 2020 10:14:03 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day06/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/6&#34;&gt;Day 6&lt;/a&gt; turned out to be pretty straightforward. Like day 4 you had to
deal with two consecutive newlines when parsing the data but assuming
you did day 4 that&amp;#39;s no problem. &lt;/p&gt;
&lt;p&gt;
The gist is that a group is formed by consecutive lines and groups are
separated by a blank line. Each line in each group is a string of
letters representing answers to questions. For instance, for this
group: &lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
abc
abd
ab
&lt;/pre&gt;
&lt;p&gt;
you have three people. The first answered &amp;#39;yes&amp;#39; to a, b, and c. the
second to a,b, and d and the third to a and b. &lt;/p&gt;
&lt;p&gt;
Your goal was to figure out how many different questions did each
group answer &amp;#39;yes&amp;#39; to and what was the total across the groups. &lt;/p&gt;
&lt;p&gt;
It seemed that the easiest thing to do was to take each group, remove
the newlines and then count the unique characters. &lt;/p&gt;
&lt;p&gt;
In Python, something like this (Clojure in the video and on &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day06.clj&#34;&gt;GitHub&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;abd&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ab&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(d)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(s)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
So, you just have to do that for each group and add them all up.&lt;/p&gt;
&lt;p&gt;
Part 2 added a small twist. Now you wanted to look at each group and
count the number of answers that everyone in that group answered &amp;#34;yes&amp;#34;
to. For the above example, it would be 2 - everyone answered a and b.&lt;/p&gt;
&lt;p&gt;
Assuming your language supports set operations, you can just use
union.&lt;/p&gt;
&lt;p&gt;
Again in Python: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;abd&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ab&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(d_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; d_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; set(item)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(result)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Again,  do it for all the groups and add it up.&lt;/p&gt;
&lt;p&gt;
This is a great question to go over set operations!!&lt;/p&gt;
&lt;p&gt;
Check out the Clojure video for that approach where I also talk about
easier ways to complete yesterday&amp;#39;s problem.&lt;/p&gt;
&lt;p&gt;
Enjoy!&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/I8dbKJ_315Q&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A teacher looks at Advent of Code 2020 - Day 5</title>
      <link>https://cestlaz.github.io/post/advent-2020-day05/</link>
      <pubDate>Sat, 05 Dec 2020 11:18:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day05/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/5&#34;&gt;Day five&amp;#39;s problem&lt;/a&gt; is a nice one for an early CS class. It can be very
much brute forced but it also touches on some nice concepts and can be
solved pretty elegantly. I&amp;#39;ve embedded a walk through in Clojure at
the end but a Python solution would be pretty similar.  &lt;/p&gt;
&lt;p&gt;
Read the problem over if you haven&amp;#39;t. At it&amp;#39;s core you are taking a boarding
pass representing a coded airplane seat number and you&amp;#39;re converting
it to a known seat (row and column). The encoding scheme uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Binary_space_partitioning&#34;&gt;binary
space partitioning&lt;/a&gt;. The &lt;a href=&#34;https://adventofcode.com/2020/day/5&#34;&gt;question statement&lt;/a&gt; goes over the details.&lt;/p&gt;
&lt;p&gt;
One of the first things to notice is that you should separate the pass
into two parts - the row, which consists of the first seven characters
each one being an &lt;strong&gt;F&lt;/strong&gt; or a &lt;strong&gt;B&lt;/strong&gt; and the last three which are the
columns and they are marked with either a &lt;strong&gt;R&lt;/strong&gt; or an &lt;strong&gt;L&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
So, the sample pass &lt;strong&gt;FBFBBFFRLR&lt;/strong&gt; separates into &lt;strong&gt;FBFBBFF&lt;/strong&gt; for the row
and &lt;strong&gt;RLR&lt;/strong&gt; for the clumn.&lt;/p&gt;
&lt;p&gt;
There are 128 rows numbered 0 through 127 so you start with 127 (the
back of the plane) and then depending on if the next character is an
&lt;strong&gt;F&lt;/strong&gt; or a &lt;strong&gt;B&lt;/strong&gt; you either subtract out half the range size or you
don&amp;#39;t. If the character is an &lt;strong&gt;B&lt;/strong&gt; you don&amp;#39;t since you&amp;#39;re at the back
of the section and the back rows are higher. If it&amp;#39;s a &lt;strong&gt;F&lt;/strong&gt; you do
since you&amp;#39;re at the front and front rows have lower numbers.&lt;/p&gt;
&lt;p&gt;
So, the first &lt;strong&gt;F&lt;/strong&gt; says you&amp;#39;re at the front so you subtract &lt;strong&gt;half&lt;/strong&gt; the
range and now you&amp;#39;re looking at 0-63. The next character is a &lt;strong&gt;B&lt;/strong&gt; so
you don&amp;#39;t subtract anything but you&amp;#39;ll be next looking at 32 through
63 etc. The question has a full walk through.&lt;/p&gt;
&lt;p&gt;
Looking at the  row string, you have &lt;strong&gt;FBFBBFF&lt;/strong&gt;. If we substitute the
amount we subtract for the letters we get &lt;code&gt;64 0 16 0 0 2 1&lt;/code&gt; or the
place values of a binary number &lt;strong&gt;in reverse&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;
In my solution, I reversed the string and then converted each &lt;strong&gt;F&lt;/strong&gt; or &lt;strong&gt;B&lt;/strong&gt;
into a number. A &lt;strong&gt;B&lt;/strong&gt; became a 0 and an &lt;strong&gt;F&lt;/strong&gt; became 2^i where &lt;strong&gt;i&lt;/strong&gt; is the
location (index) in the string. For the sample string, once reversed
to &lt;strong&gt;FFBBFBF&lt;/strong&gt; it gives &lt;code&gt;1 2 0 0 16 0 64&lt;/code&gt;. If we sum those up and
subtract from 127 we get our row number.&lt;/p&gt;
&lt;p&gt;
We basically can do the same thing for the column but there you
subtract from 7.&lt;/p&gt;
&lt;p&gt;
Part 1 of the question asks you to map the row and column to a final
number by calcualing &lt;code&gt;row*8+col&lt;/code&gt; and then find the highest seat number
from a give list of boarding passes.&lt;/p&gt;
&lt;p&gt;
Part 2 requires you look through all the boarding passes to determine
your actual seat - the one seat missing from the data set.&lt;/p&gt;
&lt;p&gt;
Lots of good stuff for a class in this question.&lt;/p&gt;
&lt;p&gt;
You&amp;#39;ve got the basic data parsing as usual but I love that this can be
brute forced but by noticing the base 2 nature of the data you can
write up a number of different elegant solutions. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a complete solution coded up in Clojure. You can also check all
my Advent of Code solutions up on GitHub
&lt;a href=&#34;https://github.com/zamansky/advent2020&#34;&gt;https://github.com/zamansky/advent2020&lt;/a&gt;. &lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/lq5AdWkzyjg&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Day 4</title>
      <link>https://cestlaz.github.io/post/advent-2020-day04/</link>
      <pubDate>Fri, 04 Dec 2020 17:31:06 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day04/</guid>
      <description>&lt;p&gt;
One of the nice things about Advent of Code is that it gets me to
explore language features I haven&amp;#39;t used yet. Today&amp;#39;s problem got me
to explore Clojure Spec which is a very cool validation
library. There&amp;#39;s a complete run through of the solution in Clojure in
the video but here I&amp;#39;ll talk about the problem in Python (mostly). &lt;/p&gt;
&lt;p&gt;
Today&amp;#39;s &lt;a href=&#34;https://adventofcode.com/2020/day/4&#34;&gt;problem&lt;/a&gt; is about validating passports. You start with a text
file consisting of passport information. Each passport is one or more
lines with each line having a bunch of key value pairs. For example,
these two lines represent a passport for someone who&amp;#39;s eye color (ecl)
is gray (gry) and who was born (byr) in 1937:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
ecl:gry pid:860033327 eyr:2020 hcl:#fffffd
byr:1937 iyr:2017 cid:147 hgt:183cm
&lt;/pre&gt;
&lt;p&gt;
The catch is that one passport can span multiple lines and that
passports are separated by two consecutive newlines in the file.&lt;/p&gt;
&lt;p&gt;
A passport has 8 field types with one, Country of Origin (cid) being
optional.&lt;/p&gt;
&lt;p&gt;
For part 1, a valid passport is one that contains all 7 required
fields. &lt;/p&gt;
&lt;p&gt;
The video goes over a Clojure solution which, I think is cleaner but
the idea is the same as the Python I&amp;#39;ll talk about here.&lt;/p&gt;
&lt;p&gt;
Splitting the data into a list of potential passports is easy because
you can split the string on two newlines: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../data/sample04.dat&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Now we have a list of string. &lt;/p&gt;
&lt;p&gt;
Next, we can split each string on whitespace so that each string in
each sublist is a string in the form &lt;strong&gt;k:v&lt;/strong&gt;: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([item &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()])&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
So, for example, data_list[0] might look like this: &lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
[&amp;#39;ecl:gry&amp;#39;, &amp;#39;pid:860033327&amp;#39;, &amp;#39;eyr:2020&amp;#39;, &amp;#39;hcl:#fffffd&amp;#39;, &amp;#39;byr:1937&amp;#39;, &amp;#39;iyr:2017&amp;#39;, &amp;#39;cid:147&amp;#39;, &amp;#39;hgt:183cm&amp;#39;]
&lt;/pre&gt;
&lt;p&gt;
Finally, we can convert each passport into a dictionary: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data_dicts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data_list:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]:item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; d} 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cid&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data_dicts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(temp)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
The easiest way I came up with to check if a passport was valid was to
make a set out of a list of required field names, make a set out of
each potential passports field names (they&amp;#39;re dictionary keys) and see
if they&amp;#39;re equal: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fields &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;byr&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iyr&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eyr&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hgt&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hcl&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ecl&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;valid_passports &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  [set(x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys()) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; fields &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data_dicts]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
I think the Clojure code is cleaner but it&amp;#39;s much the same.&lt;/p&gt;
&lt;p&gt;
Part two added a twist - you now have to not only see if the required
fields are there but you had to make sure they had valid data. For
example, height had to start with a positive integer followed by
either &lt;strong&gt;cm&lt;/strong&gt; or &lt;strong&gt;in&lt;/strong&gt;. If it was &lt;strong&gt;cm&lt;/strong&gt;, the number had to be in a certain
range and if it was &lt;strong&gt;in&lt;/strong&gt; it had to be within a different range. &lt;/p&gt;
&lt;p&gt;
This didn&amp;#39;t sound hard but could get tricky. For each field type you
could write a function that took in the value and returned true or
false depending on its validity - lots of ad hoc code. You could then
loop over all the passports and test to see if all the conditions were
met. &lt;/p&gt;
&lt;p&gt;
It turns out that Clojure has a really cool library - Clojure Spec
that does just that. You set up validators for each field type and
then one for an entire passport. Here&amp;#39;s the code: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::byr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;gt;= (&lt;span style=&#34;color:#a6e22e&#34;&gt;u/parse-int&lt;/span&gt; %) &lt;span style=&#34;color:#ae81ff&#34;&gt;1920&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;lt;= (&lt;span style=&#34;color:#a6e22e&#34;&gt;u/parse-int&lt;/span&gt; %) &lt;span style=&#34;color:#ae81ff&#34;&gt;2002&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::iyr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;gt;= (&lt;span style=&#34;color:#a6e22e&#34;&gt;u/parse-int&lt;/span&gt; %) &lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;lt;= (&lt;span style=&#34;color:#a6e22e&#34;&gt;u/parse-int&lt;/span&gt; %) &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::eyr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;gt;= (&lt;span style=&#34;color:#a6e22e&#34;&gt;u/parse-int&lt;/span&gt; %) &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;lt;= (&lt;span style=&#34;color:#a6e22e&#34;&gt;u/parse-int&lt;/span&gt; %) &lt;span style=&#34;color:#ae81ff&#34;&gt;2030&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::hgt&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? hgt-test))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::hcl&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(re-find &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#[0-9a-f]{6}&amp;#34;&lt;/span&gt; %)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::ecl&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(re-find &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amb|blu|brn|gry|grn|hzl|oth&amp;#34;&lt;/span&gt; %)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::pid&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(re-find &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^[0-9]{9}$&amp;#34;&lt;/span&gt; % )))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::cid&lt;/span&gt; string?)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::passport&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/keys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#e6db74&#34;&gt;:req&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;::byr&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::iyr&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::eyr&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::hgt&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::hcl&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::ecl&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::pid&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#e6db74&#34;&gt;:opt&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;::cid&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/valid?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::passport&lt;/span&gt; test-passport)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
The last line would test to see if &lt;strong&gt;test-passport&lt;/strong&gt; was valid. It&amp;#39;s all
covered in detail in the video.&lt;/p&gt;
&lt;p&gt;
Clojure spec wasn&amp;#39;t required for this problem but I&amp;#39;ve been meaning to
play with it for a while and it led to a clean and elegant way of
testing passports. &lt;/p&gt;
&lt;p&gt;
Not sure if I&amp;#39;ll get to more posts or even solve more problems - I&amp;#39;m
trying to limit my own screen time over the weekends but we&amp;#39;ll see.&lt;/p&gt;
&lt;p&gt;
If you want to check out all the Clojure goodness here it is: Enjoy!&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/QzdCrJgXsww&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Day 3</title>
      <link>https://cestlaz.github.io/post/advent-2020-day03/</link>
      <pubDate>Thu, 03 Dec 2020 14:27:02 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day03/</guid>
      <description>&lt;p&gt;
I thought I&amp;#39;d do a video for today. No particular reason. Mostly why
not.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll talk about day 3&amp;#39;s problem and code up a solution in Clojure. If
you haven&amp;#39;t ever used Clojure, hopefully this will give a bit of the
flavor. This video also serves double duty as being my next Using
Emacs video since it demos Emacs&amp;#39;s Clojure tools. Mostly Cider which
even with a few quirks is the best development environment I&amp;#39;ve ever
used. &lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know if I&amp;#39;ll do any more videos or blog posts on AOC this
year. I hope to but I&amp;#39;m going to have to get to end of semester
obligations soon so you never know.&lt;/p&gt;
&lt;p&gt;
Enjoy!&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ecJ1TJGWrfs&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 75 - Bufler</title>
      <link>https://cestlaz.github.io/post/using-emacs-75-bufler/</link>
      <pubDate>Tue, 22 Sep 2020 13:17:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-75-bufler/</guid>
      <description>&lt;p&gt;
Quick Emacs hit today.&lt;/p&gt;
&lt;p&gt;
After my last video, I received a comment noting that I was using
ibuffer and that there was another package I might want to consider -
&lt;a href=&#34;https://github.com/alphapapa/bufler.el&#34;&gt;bufler&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
I started with basic ibuffer and then started to &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/&#34;&gt;customize it&lt;/a&gt; to group
buffers but that was always somewhat finicky. More often than not I
couldn&amp;#39;t tune it the way I wanted. Most recently, I started using
&lt;a href=&#34;https://github.com/purcell/ibuffer-projectile&#34;&gt;ibuffer-projectile&lt;/a&gt; which group projects for me but lost the other
customizations. In any event, I was more or less happy with things.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/alphapapa/bufler.el&#34;&gt;Bufler&lt;/a&gt; though looks to be a nice alternative. Out of the box it looks
like it groups things pretty well and has a nice Emacs &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;hydra&lt;/a&gt; that you
can bring up with &lt;code&gt;?&lt;/code&gt; to remind you how to do things like kill one or
more buffers.  &lt;/p&gt;
&lt;p&gt;
Right now, I&amp;#39;m using it as an ibuffer replacement but it also has its
own version of switch buffer that I plan to play with as well. &lt;/p&gt;
&lt;p&gt;
The only knit I&amp;#39;ve found thus far is that when you run bufler, it
splits the window and lists the buffers in the new space. If I&amp;#39;m using
ibuffer I want it to use the whole Emacs frame. Otherwise I just use
ivy-switch-buffer (or now bufler-switch-buffer). I couldn&amp;#39;t figure out
a way built in so ended up writing a small function: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun mz/bufler-one-window (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; force-refresh)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (interactive &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (bufler-list)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (delete-other-windows)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x C-b&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mz/bufler-one-window&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Check out the video for more details.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/KqvjeRf84do&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 74 Eglot</title>
      <link>https://cestlaz.github.io/post/using-emacs-74-eglot/</link>
      <pubDate>Mon, 31 Aug 2020 13:03:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-74-eglot/</guid>
      <description>&lt;p&gt;
I primarily program in four languages these days -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clojure &lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And most of the time, my Emacs configuration has handled each one
differently. Cider for Clojure, Irony for C++, Elpy and Jedi for
Python and Java I could never figure out. This is of course on top of
tools that work across languages like company for completions, or
flycheck for general language syntax checking. &lt;/p&gt;
&lt;p&gt;
A while ago I heard about lsp-mode - Language Server Protocol
mode. Basically, you set up the mode and it connects to back end
language servers. The idea is to keep configuration down and provide a
consistent interface across langauges while leveraging the types of
support these back ends can provide. I wrote a bit about lsp-mode and
made a video and you can find it &lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-58-lsp-mode/&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
When I first tried LSP it just didn&amp;#39;t work. I tried it again later and
it basically worked but was finicky. Configuration took more work than
I wanted, particularly for customizing per language and even when
working it didn&amp;#39;t work as expected. &lt;/p&gt;
&lt;p&gt;
This past summer, I had to teach using Java so I tried lsp-mode
again. Setup wasn&amp;#39;t too bad and most of the issues were more related
to Java than to lsp-mode but I didn&amp;#39;t like the results. While it might
be great for the professional developer there were too many popups and
made the screen way too busy for teaching. &lt;/p&gt;
&lt;p&gt;
Still, the idea of a single simple configuration was enticing.&lt;/p&gt;
&lt;p&gt;
So, when I decided to get my configuration together for the Fall
semester I decided to try yet again and discovered &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt; for
Emacs. Eglot turned out to be easier to install and gave me more of
the experience I was looking for.&lt;/p&gt;
&lt;p&gt;
To start, I set it up for C++ using&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package eglot :ensure t)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-to-list &amp;#39;eglot-server-programs &amp;#39;((c++-mode c-mode) &amp;#34;clangd-10&amp;#34;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &amp;#39;c-mode-hook &amp;#39;eglot-ensure)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &amp;#39;c++-mode-hook &amp;#39;eglot-ensure)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Eglot defaults to &lt;a href=&#34;https://github.com/MaskRay/ccls&#34;&gt;ccls&lt;/a&gt; as a C++ language server. I didn&amp;#39;t want to have
to build it but was able to &lt;code&gt;apt-get install clangd-10&lt;/code&gt; and use that
instead by adding clangd-10 to the eglot-server-programs in the second
configuration line.&lt;/p&gt;
&lt;p&gt;
For python I had to install &lt;a href=&#34;https://github.com/palantir/python-language-server&#34;&gt;pyls&lt;/a&gt;, the Python Language Server but that
was easy to do and then I just had to add &lt;code&gt;(add-hook &amp;#39;python-mode-hook
&amp;#39;eglot-ensure)&lt;/code&gt; to my config.&lt;/p&gt;
&lt;p&gt;
Finally, Java was more of an issue I had to get &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt; on my
system. It turns out that lsp-mode installed it for me already so I
just had to point to it:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defconst my-eclipse-jdt-home &amp;#34;/home/zamansky/.emacs.d/.cache/lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.5.800.v20200727-1323.jar&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun my-eglot-eclipse-jdt-contact (interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;Contact with the jdt server input INTERACTIVE.&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (let ((cp (getenv &amp;#34;CLASSPATH&amp;#34;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (setenv &amp;#34;CLASSPATH&amp;#34; (concat cp &amp;#34;:&amp;#34; my-eclipse-jdt-home))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (unwind-protect (eglot--eclipse-jdt-contact nil)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (setenv &amp;#34;CLASSPATH&amp;#34; cp))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setcdr (assq &amp;#39;java-mode eglot-server-programs) #&amp;#39;my-eglot-eclipse-jdt-contact)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &amp;#39;java-mode-hook &amp;#39;eglot-ensure)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
So far, I&amp;#39;m liking eglot very much. I&amp;#39;ll probably check lsp-mode out
again somewhere down the line but as of now it&amp;#39;s Cider for Clojure and
Eglot for everything else.&lt;/p&gt;
&lt;p&gt;
The video has a run through and demo. Check it out.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ROnceqt3kpE&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 73 - Ripgrep and updating the blog</title>
      <link>https://cestlaz.github.io/post/using-emacs-72-rg/</link>
      <pubDate>Sun, 14 Jun 2020 11:58:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-72-rg/</guid>
      <description>&lt;p&gt;
As I said in my &lt;a href=&#34;As I mentioned in my &#34;&gt;last post&lt;/a&gt;, I&amp;#39;m moving to a new Hugo theme. I decided
on &lt;a href=&#34;https://github.com/mitrichius/hugo-theme-anubis&#34;&gt;Anubis&lt;/a&gt;. It&amp;#39;s simple and clean. Unfortunately, in this change over,
many things broke. Specifically, all my embedded html. Using earlier
version of Hugo I could directly embed HTML and it would render. Now I
have to bracket the HTML with special org markup - &lt;strong&gt;#+begin_export html&lt;/strong&gt; and &lt;strong&gt;#+end_export html&lt;/strong&gt;. &lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
#+begin_export html
&amp;lt;h1&amp;gt;html stuff to render goes in here &amp;lt;/h1&amp;gt;
#+end_export
&lt;/pre&gt;
&lt;p&gt;
Minimally I had to find all my embedded videos and all my embedded
Tweets. There&amp;#39;s probably a lot more. Fortunately with Emacs this is
pretty easy. I used &lt;a href=&#34;https://github.com/dajva/rg.el&#34;&gt;rg.el&lt;/a&gt; which is an Emacs front end to &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;. If
you don&amp;#39;t know ripgrep, it&amp;#39;s kind of like a super fast, super enhanced grep on
steroids. &lt;/p&gt;
&lt;p&gt;
In Emacs, I was able to do a ripgrep search which created a buffer
containing all the embedded html fragments from all my blog posts
across all the directories. I then used Emacs&amp;#39; &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt; feature which
allowed me to edit that combined buffer and save all the results back
to the original files. &lt;/p&gt;
&lt;p&gt;
All in all it just took a few minutes. There are still some things I
have to clean up from older posts but at least the site is workable now.&lt;/p&gt;
&lt;p&gt;
Check out the video for a walkthrough:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/OcR-Ke2CiPo&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 72 - Customizing Elfeed</title>
      <link>https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/</link>
      <pubDate>Thu, 21 May 2020 14:47:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/</guid>
      <description>&lt;p&gt;
I made this video write after I made the &lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-71-openwith/&#34;&gt;openwith&lt;/a&gt; one so even though
I don&amp;#39;t mention anything in this video, I wanted to share some updates
on dired and openwith.&lt;/p&gt;
&lt;p&gt;
I got a lot of suggestions on alternate ways to achieve the workflow I
was seeking - being able to open a file using an external viewer. One
person noted that under newer versions of Emacs, the &lt;code&gt;W&lt;/code&gt; key is bound
to the command &lt;code&gt;(browse-url-of-dired-file)&lt;/code&gt; which does exactly what I
wanted. Problem solved with no customizing or extra packages. &lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a good thing I got a solution when I did - I needed it. I&amp;#39;ve been
reviewing applications for my new Teacher Certification program. It&amp;#39;s
a 21 credit graduate program that results in participants receiving a
brand spanking new New York State Computer Science teaching
license. The applications consist of a bunch of files incuding PDFs,
images (photos), doc and text files and source code samples. I&amp;#39;ve got
all the applications in a Google drive which I&amp;#39;ve downloaded and now I
can just drop into dired and go through each directory, hit &lt;code&gt;enter&lt;/code&gt; for
source code and it&amp;#39;s loaded in an Emacs buffer and &lt;code&gt;W&lt;/code&gt; for everything
else.&lt;/p&gt;
&lt;p&gt;
Now for today&amp;#39;s video. It&amp;#39;s about a small customization I made to the
elfeed RSS reader. It&amp;#39;s also about the advantages and limitations of
Emacs built in documentation. I&amp;#39;m not particularly strong in elisp -
I&amp;#39;m a dabbler at best but even so, using Emac&amp;#39;s built in help I was
able to get to elisp code that was very close to what I wanted to do
and then customize it. It also looks at the limitations - there still
some code that I looked at that I have no clue as to what it does.&lt;/p&gt;
&lt;p&gt;
Specifically, elfeed lets you open a link in an external brower by
hitting &lt;code&gt;b&lt;/code&gt;. That&amp;#39;s how I like reading most of my feeds. I&amp;#39;ll scroll
up and down and hit &lt;code&gt;b&lt;/code&gt; for what I want to read. The trouble is that
when you hit &lt;code&gt;b&lt;/code&gt; focus goes to the browser and at the same time,
elfeed marks the entry as read and advances. I want it not to mark as
read. After I made the video, I decided I also didn&amp;#39;t want elfeed to
advance to the next story. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what I did.&lt;/p&gt;
&lt;p&gt;
I went in to elfeed and instead of typing &lt;code&gt;b&lt;/code&gt; on an entry, I ran
&lt;code&gt;(describe-key&lt;/code&gt;)~ which is bound to &lt;code&gt;C-h k&lt;/code&gt;. I then typed &lt;code&gt;b&lt;/code&gt; which
revealed that it ran &lt;code&gt;elfeed-search-browse-url&lt;/code&gt;. I followed the
hyperlinks in the help to open &lt;code&gt;elfeed-search.el&lt;/code&gt; and found the
function. From there I just copied it over to my Emacs config, tweaked
it and voila, problem solved.&lt;/p&gt;
&lt;p&gt;
The video has all the details. Enjoy.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/G1NGNR40lB4&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 71 Openwith</title>
      <link>https://cestlaz.github.io/post/using-emacs-71-openwith/</link>
      <pubDate>Wed, 13 May 2020 11:45:39 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-71-openwith/</guid>
      <description>&lt;p&gt;
I spend most of my time in Emacs but still use the shell and browser
for some things. One of the things I use my shell for is to launch
libreoffice to view and edit docx files and spreadsheets, evince for
pdf files and imagemagick for image files. Yes, I know I can view all
of these in Emacs but there are a few limitations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Emacs chokes on large files&lt;/li&gt;
&lt;li&gt;I can&amp;#39;t edit the docx file or the image&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, I hop to the shell and launch the program I need on the files in
question. It&amp;#39;s fine but it does mean I end up with two windows for
each operation - the terminal from which I run, say, libreoffice and
libreoffice itself. I will also have my browser and one ore more Emacs
windows open so things can get a bit cluttered.&lt;/p&gt;
&lt;p&gt;
Now, on the Emacs side, one tool that I still haven&amp;#39;t gotten myself to
regularly use is dired. I figured dired could be made to do what I
want - quickly and easily launch programs to view and edit my files.&lt;/p&gt;
&lt;p&gt;
By default, dired opens files in a new Emacs buffer. That&amp;#39;s fine for
text files but not the behavior I want for docx and other files. It
turns out there are a number of good solutions. The one that I&amp;#39;ll
likely stick with is &lt;a href=&#34;https://github.com/jpkotta/openwith/tree/1dc89670822966fab6e656f6519fdd7f01e8301a&#34;&gt;openwith&lt;/a&gt; but there are other options as
well. Check out the video for more:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/_qjJ5UzInRI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
  </channel>
</rss>