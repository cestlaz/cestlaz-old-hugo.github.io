<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tools on C&#39;est la Z</title>
    <link>https://newblog/tags/tools/</link>
    <description>Recent content in tools on C&#39;est la Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Feb 2023 14:50:07 -0400</lastBuildDate><atom:link href="https://newblog/tags/tools/rss.xml" rel="self" type="application/rss" />
    <item>
      <title>Copilot and similar types of AI in learning CS</title>
      <link>https://newblog/post/ai-in-learning-cs/</link>
      <pubDate>Tue, 28 Feb 2023 14:50:07 -0400</pubDate>
      
      <guid>https://newblog/post/ai-in-learning-cs/</guid>
      <description>So it seems like Copilot and similar will be beneficial to programmers but the question remains as to how beneficial. Will it be incremental change or will it be a game changer?
Today we&amp;#39;ll look at how it will affect teaching and learning CS.
It seems pretty clear that one group of learners will benefit from things like copilot - people who are already strong programmers who are learning something new.</description>
    </item>
    
    <item>
      <title>AI as a programmers aide</title>
      <link>https://newblog/post/ai-in-programming/</link>
      <pubDate>Tue, 28 Feb 2023 11:33:22 -0400</pubDate>
      
      <guid>https://newblog/post/ai-in-programming/</guid>
      <description>ChatGPT in education has been all the rage but there&amp;#39;s another twist on AI that was getting some buzz even earlier - AI based code completions. GitHub&amp;#39;s Copilot has gotten the most air time but there are others out there as well.
When you code with Copilot, you type in a function name and maybe a comment above it and the AI system will fill in the function.
A canonical example seems to be Mergesort.</description>
    </item>
    
    <item>
      <title>A poor craftsman blames his tools</title>
      <link>https://newblog/post/ides-tools/</link>
      <pubDate>Mon, 13 Feb 2023 06:48:49 -0400</pubDate>
      
      <guid>https://newblog/post/ides-tools/</guid>
      <description>Yesterday, Alfred Thompson posted on students knowing their development environments. Alfred&amp;#39;s post was inspired by a related post by Eugene Wallingford. Eugene&amp;#39;s post was about more than development environments and both his and Alfred&amp;#39;s posts are worth a read.
Being a tool wonk I thought I&amp;#39;d add my two cents.
I&amp;#39;ve always been a tool wonk. Use the right tool for the job and if you need to buy one, don&amp;#39;t cheap out - get the best value right tool.</description>
    </item>
    
    <item>
      <title>Using Emacs 75 - Bufler</title>
      <link>https://newblog/post/using-emacs-75-bufler/</link>
      <pubDate>Tue, 22 Sep 2020 13:17:41 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-75-bufler/</guid>
      <description>Quick Emacs hit today.
After my last video, I received a comment noting that I was using ibuffer and that there was another package I might want to consider - bufler. I started with basic ibuffer and then started to customize it to group buffers but that was always somewhat finicky. More often than not I couldn&amp;#39;t tune it the way I wanted. Most recently, I started using ibuffer-projectile which group projects for me but lost the other customizations.</description>
    </item>
    
    <item>
      <title>Zulip - maybe the answer for class communication</title>
      <link>https://newblog/post/zulip/</link>
      <pubDate>Wed, 16 Sep 2020 14:01:23 -0400</pubDate>
      
      <guid>https://newblog/post/zulip/</guid>
      <description>It&amp;#39;s always been a challenge to get students to buy in to an out of class communication tool. Over the years I&amp;#39;ve tried many including mailing lists, Piazza, Discourse, Vanilla and other discussion forums, Slack and probably a few other things.
I guess it&amp;#39;s not surprising that it&amp;#39;s a hard sell - prior to the internet once school was out kids there as no teacher student interaction until the next school day and kids would only interact with their direct friends.</description>
    </item>
    
    <item>
      <title>Using Emacs 74 Eglot</title>
      <link>https://newblog/post/using-emacs-74-eglot/</link>
      <pubDate>Mon, 31 Aug 2020 13:03:14 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-74-eglot/</guid>
      <description>I primarily program in four languages these days -
Clojure C++ Python Java And most of the time, my Emacs configuration has handled each one differently. Cider for Clojure, Irony for C++, Elpy and Jedi for Python and Java I could never figure out. This is of course on top of tools that work across languages like company for completions, or flycheck for general language syntax checking. A while ago I heard about lsp-mode - Language Server Protocol mode.</description>
    </item>
    
    <item>
      <title>Preparing CS Teachers - tools for remote instruction</title>
      <link>https://newblog/post/teacher-cert-tools/</link>
      <pubDate>Mon, 10 Aug 2020 06:07:26 -0400</pubDate>
      
      <guid>https://newblog/post/teacher-cert-tools/</guid>
      <description>Our summer intensive was supposed to be in person but COVID-19 changed that in a hurry. We had to scramble to redesign and figure out how we were going to run things.
We decided to go with the following:
Zoom for live meetings Slack for chat Git and GitHub
GitHub classroom for assignments GitHub repos for code distribution, class website and resource sharing. GitHub discussions for off hour and long form discussion While Zoom is a great platform it was lacking in a few areas so we also ended up using: Padlet as a collaborative writing space for groups Assorted whiteboarding tools.</description>
    </item>
    
    <item>
      <title>Tools matter when teaching (and learning)</title>
      <link>https://newblog/post/tools-matter/</link>
      <pubDate>Wed, 22 Jul 2020 07:52:24 -0400</pubDate>
      
      <guid>https://newblog/post/tools-matter/</guid>
      <description>One of our teacher certification cohort members asked for some help on our Slack the other day. It was about a side project - he was learning him so Javascript. It&amp;#39;s always very cool to see teachers exploring things that can help with their craft on their own.
The whole situation reminded me about how important good tooling is and why, in spite of its popularity, javascript has some severe issues as a learning language and I&amp;#39;m a guy that actually likes javascript.</description>
    </item>
    
    <item>
      <title>Github and Student Feedback</title>
      <link>https://newblog/post/github-student-feedback/</link>
      <pubDate>Mon, 20 Jul 2020 16:12:47 -0400</pubDate>
      
      <guid>https://newblog/post/github-student-feedback/</guid>
      <description>Beyond the CS specifics We&amp;#39;ve been primarily using three tools in our summer certification program.
Zoom for video conferencing Slack for text based communicaiton GitHub for just about everything else We use GitHub as a CMS - a place to share code and assignments as well as collect them. We&amp;#39;re also playing with GitHub discussions although that&amp;#39;s fallen somewhat to the wayside with Slack being preferred. One of the choices I&amp;#39;m digging more than ever is GitHub Classroom for assignments.</description>
    </item>
    
    <item>
      <title>Using Emacs 73 - Ripgrep and updating the blog</title>
      <link>https://newblog/post/using-emacs-72-rg/</link>
      <pubDate>Sun, 14 Jun 2020 11:58:11 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-72-rg/</guid>
      <description>As I said in my last post, I&amp;#39;m moving to a new Hugo theme. I decided on Anubis. It&amp;#39;s simple and clean. Unfortunately, in this change over, many things broke. Specifically, all my embedded html. Using earlier version of Hugo I could directly embed HTML and it would render. Now I have to bracket the HTML with special org markup - #+begin_export html and #+end_export html. #+begin_export html &amp;lt;h1&amp;gt;html stuff to render goes in here &amp;lt;/h1&amp;gt; #+end_export Minimally I had to find all my embedded videos and all my embedded Tweets.</description>
    </item>
    
    <item>
      <title>Pro Version Or Education Version</title>
      <link>https://newblog/post/pro-version-or-ed-version/</link>
      <pubDate>Fri, 29 May 2020 19:00:13 -0400</pubDate>
      
      <guid>https://newblog/post/pro-version-or-ed-version/</guid>
      <description>I woke up to this tweet by Mark Guzdial today:#pro-version-or ed-version.org#
An indication that CS Ed in US high schools is about vocational training: 2 (of 5) recommended sessions at the @csteachersorg conference are on Github and Agile. Is @CSforAll a Silicon Valley jobs program? https://t.co/n8ugnmTU84
&amp;mdash; Mark Guzdial (@guzdial) May 28, 2020 This led to a lively discussion throughout the day with lots of likes and lots of comments.</description>
    </item>
    
    <item>
      <title>Zoom alternatives that aren&#39;t from MicroGoogle</title>
      <link>https://newblog/post/bigbluebutton/</link>
      <pubDate>Mon, 25 May 2020 16:33:17 -0400</pubDate>
      
      <guid>https://newblog/post/bigbluebutton/</guid>
      <description>As we scrambled to move online in March we used what we knew, what we heard of and what we were allowed. This usually meant Zoom, Google Meet, or Microsoft Teams.
I settled on Zoom. It worked and worked pretty well. There were a few things I felt they could improve on but given that Zoom wasn&amp;#39;t designed as a teaching tool I&amp;#39;ve been pretty happy with it.
Now that the emergency rush has passed we have time to see if there are some better alternatives.</description>
    </item>
    
    <item>
      <title>Using Emacs 72 - Customizing Elfeed</title>
      <link>https://newblog/post/using-emacs-72-customizing-elfeed/</link>
      <pubDate>Thu, 21 May 2020 14:47:59 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-72-customizing-elfeed/</guid>
      <description>I made this video write after I made the openwith one so even though I don&amp;#39;t mention anything in this video, I wanted to share some updates on dired and openwith.
I got a lot of suggestions on alternate ways to achieve the workflow I was seeking - being able to open a file using an external viewer. One person noted that under newer versions of Emacs, the W key is bound to the command (browse-url-of-dired-file) which does exactly what I wanted.</description>
    </item>
    
    <item>
      <title>Using Emacs 71 Openwith</title>
      <link>https://newblog/post/using-emacs-71-openwith/</link>
      <pubDate>Wed, 13 May 2020 11:45:39 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-71-openwith/</guid>
      <description>I spend most of my time in Emacs but still use the shell and browser for some things. One of the things I use my shell for is to launch libreoffice to view and edit docx files and spreadsheets, evince for pdf files and imagemagick for image files. Yes, I know I can view all of these in Emacs but there are a few limitations:
Emacs chokes on large files I can&amp;#39;t edit the docx file or the image So, I hop to the shell and launch the program I need on the files in question.</description>
    </item>
    
    <item>
      <title>To Zoom or not to Zoom</title>
      <link>https://newblog/post/zoom-or-not/</link>
      <pubDate>Tue, 07 Apr 2020 14:03:13 -0400</pubDate>
      
      <guid>https://newblog/post/zoom-or-not/</guid>
      <description>Zoom has been on a wild ride. As teachers scrambled to try to deliver instruction from there homes to student homes Zoom quickly became a favorite. It was easy, performed well, and had features that other services seemed to lack. Features like being able to mute students and for me a big one - breakout rooms. Now, these features weren&amp;#39;t flawless as I mentioned in my last post but that&amp;#39;s okay.</description>
    </item>
    
    <item>
      <title>Using Emacs 70 Org Protocol</title>
      <link>https://newblog/post/using-emacs-70-org-protocol/</link>
      <pubDate>Fri, 27 Mar 2020 15:15:28 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-70-org-protocol/</guid>
      <description>I spent part of today cleaning up my Emacs workflow. Specifically, how I capture emails and links into org-mode
I already wrote about how I used org-capture (here and here). It&amp;#39;s pretty clean and easy but there was one thing that always nagged at me. When I capture from mu4e within Emacs by hitting C-c m it&amp;#39;s set up to automatically populate the capture template with a link to the email labelled with the email&amp;#39;s subject.</description>
    </item>
    
    <item>
      <title>Using Emacs 69 Floobits</title>
      <link>https://newblog/post/using-emacs-69-floobits/</link>
      <pubDate>Sat, 21 Mar 2020 10:52:37 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-69-floobits/</guid>
      <description>Hunter, like most other schools has gone remote. I taught my first two online classes on Thursday. Currently, I&amp;#39;m using Zoom for synchronous stuff and a mailing list and slack for async. There are still some missing pieces. When we&amp;#39;re all together, it&amp;#39;s easy to look at a student&amp;#39;s work and talk them through issues. It&amp;#39;s also easy to get students to work together, at least to a point. With everyone locked up in their own homes, real time collaboration is harder.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 68 - Tramp and org-publish</title>
      <link>https://newblog/post/using-emacs-68-tramp-org-publish/</link>
      <pubDate>Sat, 14 Mar 2020 20:57:08 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-68-tramp-org-publish/</guid>
      <description>I maintain a couple of small simple web sites. One provides information about my undergraduate honors CS program and another that isn&amp;#39;t live yet is a FAQ for my CS teacher certification program. Traditionally I would use ssh to connect to the host machine, fire up Emacs and edit the html files to update the sites. I always forget that with Emacs we can do better.
One way is with Tramp Mode.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 67 - Emacs vs Vi a rant with some historical perspective</title>
      <link>https://newblog/post/using-emacs-67-emacs-rant/</link>
      <pubDate>Sun, 23 Feb 2020 07:57:08 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-67-emacs-rant/</guid>
      <description>I&amp;#39;ve been meaning to do my version of the Emacs VI rant for a while. A few years ago I staged out a video showing what it would be like for a beginner to start with Emacs, Vim, Atom, and Sublime Text but decided it would be long, unwieldy and clunky to present - particularly when it came to customization. I tabled it for a while but recently have been seeing a bunch of threads, videos and posts talking about Emacs and Vim.</description>
    </item>
    
    <item>
      <title>Github Org Explorer - now with oauth</title>
      <link>https://newblog/post/github-org-explorer-oauth/</link>
      <pubDate>Sun, 16 Feb 2020 12:53:59 -0400</pubDate>
      
      <guid>https://newblog/post/github-org-explorer-oauth/</guid>
      <description>A while ago I wrote about a small side project - GitHub Org Explorer - a small tool to make it easier to manager GitHub repositories based on organization. I&amp;#39;m using it as a replacement for the GitHub provided Classroom Assistant. I find it more flexible in terms of exporting assignments to my own machine and it allows me to delete repos en masse which is critical after the semester is over.</description>
    </item>
    
    <item>
      <title>CS Ed Podcast 2 - Dan Garcia on test creation</title>
      <link>https://newblog/post/cs-ed-podcast-2/</link>
      <pubDate>Thu, 13 Feb 2020 08:41:21 -0400</pubDate>
      
      <guid>https://newblog/post/cs-ed-podcast-2/</guid>
      <description>Episode 2 of the CS Ed podcast had Dan Garcia talk about exam creation. This wasn&amp;#39;t a podcast about the value of exams - in class, high stakes or otherwise. In fact Dan says in the podcast it would be great to &amp;#34;get grades out of the equation. Grades are gonna be an impediment to learning.&amp;#34; But recognizes that we have not say in this most of the time (and I&amp;#39;ll add that though I agree grades can and do perform a function) so we should be creative in terms of assessment.</description>
    </item>
    
    <item>
      <title>Using Emacs 66 - an eshell switcher in elisp</title>
      <link>https://newblog/post/using-emacs-66-eshell-elisp/</link>
      <pubDate>Sat, 08 Feb 2020 08:12:22 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-66-eshell-elisp/</guid>
      <description>I thought it was time to give eshell in Emacs another try. It has some pretty cool features but for whatever reason, I&amp;#39;ve never really been able to adopt Emacs as my go to shell.
Eshell out of the box is pretty cool but could use some enhancements. When launching at login it doesn&amp;#39;t know about the path you set in your .bashrc or .zshrc in my case files. It just seemed to have problems with paths in general but that was fixed with the exce-path-from-shell package.</description>
    </item>
    
    <item>
      <title>Riffing on the CS Ed Podcast - Episode 1 - David Malan</title>
      <link>https://newblog/post/cs-ed-podcast-1/</link>
      <pubDate>Thu, 06 Feb 2020 16:42:08 -0400</pubDate>
      
      <guid>https://newblog/post/cs-ed-podcast-1/</guid>
      <description>I saw a couple of posts the other day about the CS Ed Podcast. Kristin Stephens-Martinez of Duke interviewed (or will interview) six CS educators on a variety of topics. There are four posted so far:
David Malan Dan Garcia Amy Ko Mark Guzdial Before I started I thought I&amp;#39;d listen to a few and then share some thoughts but I found so much to unpack in the second episode where Dan talks about testing that I decided to share my thoughts on the first episode, then Dan&amp;#39;s and then see if find anything to comment on in episodes three and beyond.</description>
    </item>
    
    <item>
      <title>Using Emacs 65 - Live Python</title>
      <link>https://newblog/post/using-emacs-65-live-python/</link>
      <pubDate>Sun, 02 Feb 2020 13:13:09 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-65-live-python/</guid>
      <description>The other day I stumbled upon Emacs&amp;#39;s Live Coding plugin. It takes interactive coding up to the next level. Normally, when you code Python, if you&amp;#39;re working in a REPL, every time you hit &amp;lt;Enter&amp;gt; the line you just typed is evaluated. When you&amp;#39;re working ina source file, you&amp;#39;re just editing until you send the file into a Python interpreter.
With this module, your file is continually evaluated as you type and it shows you the results in a side window.</description>
    </item>
    
    <item>
      <title>Using Emacs 64 - Notmuch</title>
      <link>https://newblog/post/using-emacs-64-notmuch/</link>
      <pubDate>Sat, 18 Jan 2020 08:52:01 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-64-notmuch/</guid>
      <description>I&amp;#39;ve been using the gmail web interface for a long time. My first email or at least the oldest one still in the system dates back to Oct 18, 2004 7:29am. It was a letter to a buddy about an indoor turkey fryer and if he needed a lift to Fairway the following morning to shop.
Before that, I used my Panix shell account - probably with PINE. Work email was using my own servers at Stuy along with either PINE or Emacs using VM mode which has long been deprecated.</description>
    </item>
    
    <item>
      <title>Using Emacs 63 ClojureScript</title>
      <link>https://newblog/post/using-emacs-63-clojurescript/</link>
      <pubDate>Thu, 09 Jan 2020 08:11:52 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-63-clojurescript/</guid>
      <description>I&amp;#39;ve been playing with ClojureScipt for my web projects recently and really like it. Much more fun than any of the JavaScript frameworks I&amp;#39;ve used. Still, getting started was somewhat difficult due to the number of options in tooling and uneven documentation and learning resources.
Here&amp;#39;s a video that shows how I use Emacs for ClojureScript development but the focus of the video is on how to get started with ClojureScript and Emacs takes a back seat other than an example of my workflow.</description>
    </item>
    
    <item>
      <title>GitHub Org Explorer</title>
      <link>https://newblog/post/github-org-explorer/</link>
      <pubDate>Fri, 03 Jan 2020 14:40:40 -0400</pubDate>
      
      <guid>https://newblog/post/github-org-explorer/</guid>
      <description>I&amp;#39;m a big fan of GitHub Classroom and use it for all of my class assignments. It&amp;#39;s great for organizing, distributing, and collecting assignments and gets the kids used to using real world tools at the same time. I&amp;#39;ve written a bunch of posts on how I use it:
How I use GitHub Classroom Communicating with Students - meybe GitHub to the rescue GitHub as a tool for education (part of a 4 part series) As well as a couple of others.</description>
    </item>
    
    <item>
      <title>Using Emacs 62 Magit Forge</title>
      <link>https://newblog/post/using-emacs-62-magit-forge/</link>
      <pubDate>Tue, 19 Nov 2019 12:25:58 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-62-magit-forge/</guid>
      <description>Ever since I started looking at Magit as a &amp;#34;git dashboard&amp;#34; instead of as a &amp;#34;git interface&amp;#34; it&amp;#39;s been yet another Emacs killer app to me. I just recently started playing with forge which allows Magit to interface and interact with git &amp;#34;forges&amp;#34; like GitHub. This allows you to work on issues and pull requests without ever leaving Emacs.
Here&amp;#39;s a video on how easy it is. The video doesn&amp;#39;t show this but the first time you fire forge up it will prompt you for credentials.</description>
    </item>
    
    <item>
      <title>Using Emacs 61 - org-msg</title>
      <link>https://newblog/post/using-emacs-61-org-msg/</link>
      <pubDate>Sat, 16 Nov 2019 05:00:57 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-61-org-msg/</guid>
      <description>By living in Emacs I get a consistent interface across all sorts of tasks - programming, lesson planning, making presentations, preparing documents, and yes, even email. I&amp;#39;ve been using mu4e as my Emacs email client for a while now. Currently, I&amp;#39;m using Emacs for my work email and Gmail for personal. I&amp;#39;ve been thinking of going whole hog to mu4e and possibly migrating from Gmail to a new email provider for the personal stuff but there are still a few pain points with Emacs email:</description>
    </item>
    
    <item>
      <title>Using Emacs 60 - Restclient</title>
      <link>https://newblog/post/using-emacs-60-restclient/</link>
      <pubDate>Fri, 25 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-60-restclient/</guid>
      <description>I started to work on a web application the other day. It&amp;#39;s nothing special but if I ever finish it, it will be a pretty complete project. The backend will be a REST API and I&amp;#39;m planning on writing the frontend in Clojurescript. The problem with developing a web application like this is that you can&amp;#39;t really write the front end until you have enough of the backend to provide data.</description>
    </item>
    
    <item>
      <title>Using Emacs 59 - markdown</title>
      <link>https://newblog/post/using-emacs-59-markdown/</link>
      <pubDate>Fri, 18 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-59-markdown/</guid>
      <description>Org-mode is my markup of choice. I spend the vast majority of my time working on text files working in org-mode. Since GitHUb started rendering org-mode files in their site I&amp;#39;ve also used org-mode for things like Readme files in my projects. I even force it on my students at times. When I make an assignment, I seed it with an org-mode file that they have to modify - that is - fill in things like their names, group members etc.</description>
    </item>
    
    <item>
      <title>Using Emacs 58 - lsp-mode</title>
      <link>https://newblog/post/using-emacs-58-lsp-mode/</link>
      <pubDate>Mon, 07 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-58-lsp-mode/</guid>
      <description>I&amp;#39;ve been wanting to check out lsp-mode under Emacs for a while now. LSP stands for Language Protocol Service. The idea is that you have a standard interface between your editor and some language server. If you program in multiple languages and each has an LSP server you end up, in theory, with a simpler configuration and a consistent interface.
This certainly sounds more appealing than how we did it in the old days where you have some ad hoc configuraiton for each language you work in.</description>
    </item>
    
    <item>
      <title>CSTA 2019 - Using GitHub as a CMS</title>
      <link>https://newblog/post/csta-2019-github/</link>
      <pubDate>Wed, 26 Jun 2019 12:09:48 -0400</pubDate>
      
      <guid>https://newblog/post/csta-2019-github/</guid>
      <description>With ISTE ending, the next big event for CS treachers is the annual CSTA Conference. I first attended two years ago in Baltimore. Last year the conference, in Omaha was bigger and better in every way imaginable. I expect this year to be the best yet.
I don&amp;#39;t go to a lot of conferences so I don&amp;#39;t have much to compare CSTA with but I like the fact that it&amp;#39;s is about half the size of SIGCSE.</description>
    </item>
    
    <item>
      <title>Using Emacs 57 Dired Narrow</title>
      <link>https://newblog/post/using-emacs-57-dired-narrow/</link>
      <pubDate>Sun, 07 Apr 2019 11:57:57 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-57-dired-narrow/</guid>
      <description>One of Emacs power features that I&amp;#39;ve never quite gotten into is dired, the Directory Editor. I&amp;#39;ve already done a video on the package. It&amp;#39;s really cool and I do use it at times but I still haven&amp;#39;t started using it for my day to day.
Well, I just started using a couple of packages that might change this. They&amp;#39;re part of a set of dired addons that you can check out at the dired hacks page.</description>
    </item>
    
    <item>
      <title>Evaluating Java IDES for teaching teachers.</title>
      <link>https://newblog/post/java-ides/</link>
      <pubDate>Fri, 08 Mar 2019 13:29:18 -0400</pubDate>
      
      <guid>https://newblog/post/java-ides/</guid>
      <description>Since Hunter uses C++ as it&amp;#39;s core language, I haven&amp;#39;t used Java much in the past three years. That&amp;#39;s going to change pretty soon. Once we start offering our CS teacher Certificate and Masters programs I&amp;#39;ll once again start teaching with Java as that&amp;#39;s one of the langauges that we want to prepare our teachers with.
That means deciding on a set of tools and so I&amp;#39;ve been spending time evaluating Java programming environments with an eye on the beginner since not only do the teachers I work with have to be comfortable with the tool but more importantly they will have to be able to support the tool for all of their students.</description>
    </item>
    
    <item>
      <title>How I use Github Classroom</title>
      <link>https://newblog/post/github-classroom/</link>
      <pubDate>Sun, 17 Feb 2019 16:42:48 -0400</pubDate>
      
      <guid>https://newblog/post/github-classroom/</guid>
      <description>It&amp;#39;s been an amazingly unproductive weekend. Mostly because I&amp;#39;ve been sick with the flu. It sucks but since the rest of the family&amp;#39;s away anway at least I&amp;#39;m not making everyone miserable.
I did manage to stage my next couple of classes and figured that writing this post wouldn&amp;#39;t take too much energy since it&amp;#39;s mostly a video.
Earlier, I talked about using GitHub and TravicCI and this time around I show how I use GitHub classroom to set up, disseminate, and collect assignments.</description>
    </item>
    
    <item>
      <title>GitHub Helps Me Help Students</title>
      <link>https://newblog/post/github-helps-me-help-students/</link>
      <pubDate>Mon, 11 Feb 2019 18:55:22 -0400</pubDate>
      
      <guid>https://newblog/post/github-helps-me-help-students/</guid>
      <description>Earlier today I was reminded why I love GitHub in support of my classes. One of my students posted a question about our current lab. They posted a synopsis of the problem along with the error message.
Since we&amp;#39;re all working on GitHub the student&amp;#39;s work was already up online Since I started using GitHub Classroom I was able to quickly navigate to the repo. This might have been enough but to really in to the students work I cloned the repo and went into Emacs.</description>
    </item>
    
    <item>
      <title>Github Classroom and Travis CI</title>
      <link>https://newblog/post/github-classroom-travis/</link>
      <pubDate>Sat, 02 Feb 2019 09:44:29 -0400</pubDate>
      
      <guid>https://newblog/post/github-classroom-travis/</guid>
      <description>I&amp;#39;ve been using GitHub with my classes since GitHub&amp;#39;s early days. Over time I&amp;#39;ve gotten my workflows down. I use a combination of shell scripts - many just written on the fly, GitHub organizations, and some naming conventions and protocols that have served me well. A few years ago, the GitHub Education team started GitHub Classroom. I looked at it at the time. It was pretty cool but I had my workflow so I didn&amp;#39;t adopt it.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 56 - Dictionaries</title>
      <link>https://newblog/post/using-emacs-56-dictionaries/</link>
      <pubDate>Mon, 28 Jan 2019 16:58:11 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-56-dictionaries/</guid>
      <description>One of the great things about Emacs is that it&amp;#39;s not just for writing programs. Sure, you can set it up as an IDE for just about every programming language under the sun but that&amp;#39;s just the tip of the iceberg. I use Emacs for just about all my text processing. This includes writing blog posts, reading and writing emails, creating lesson plans and pretty much anything and everything having to do with text.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 55 - Irony Completions</title>
      <link>https://newblog/post/using-emacs-55-irony-completions/</link>
      <pubDate>Mon, 21 Jan 2019 08:27:41 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-55-irony-completions/</guid>
      <description>Last year I put together a post and video on some basics of Emacs for C++ development. In the video I didn&amp;#39;t quite get completions fully working. I also used ggtags in that video but find myself using dumb-jump more frequently.
Here&amp;#39;s a quick video showing how to set up irony-mode which uses libclang for completions. It&amp;#39;s pretty slick. Now the only thing I think I&amp;#39;m missing is header file completions.</description>
    </item>
    
  </channel>
</rss>
