<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithms on C&#39;est la Z</title>
    <link>https://newblog/tags/algorithms/</link>
    <description>Recent content in algorithms on C&#39;est la Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jan 2020 13:10:47 -0400</lastBuildDate><atom:link href="https://newblog/tags/algorithms/rss.xml" rel="self" type="application/rss" />
    <item>
      <title>Sorting by hand or searching and inserting</title>
      <link>https://newblog/post/sorting-by-hand/</link>
      <pubDate>Sun, 26 Jan 2020 13:10:47 -0400</pubDate>
      
      <guid>https://newblog/post/sorting-by-hand/</guid>
      <description>Natan commenting on work the other day:
&#34;You have two lists. One is sorted, the other is not. Every item in one list corresponds to an item in the other. Is it faster to sort the unsorted list and then merge them, or simply go through the unsorted list in order and pair each item with the item you can find in the presorted list?&#34; is a question I asked today in the dressing room of an off-Broadway theater.</description>
    </item>
    
    <item>
      <title>Grokking Algorithms</title>
      <link>https://newblog/post/grokking-algorithms/</link>
      <pubDate>Tue, 11 Jun 2019 07:29:30 -0400</pubDate>
      
      <guid>https://newblog/post/grokking-algorithms/</guid>
      <description>Someone mentioned Grokking Algorithms by Aditya Y. Bhargava in one of the CS educator Facbeook groups. It looked interesting so I thought I&amp;#39;d give it a once over.
It&amp;#39;s certainly an accessible book. Text mixed with cute line drawings, &amp;#34;hand written&amp;#34; text, diagrams and picture.s It reminded me of one of my favorite, most accessible Calculus books Who Was Fourier.
Overall I enjoyed the book but I&amp;#39;m not sure what its best audience is.</description>
    </item>
    
    <item>
      <title>Seam Carving and Dynamic Programming</title>
      <link>https://newblog/post/seam-carving/</link>
      <pubDate>Mon, 22 Apr 2019 13:51:52 -0400</pubDate>
      
      <guid>https://newblog/post/seam-carving/</guid>
      <description>It&amp;#39;s spring break and for me that&amp;#39;s always been a good time to explore some new ideas.
Here&amp;#39;s one that some of you might like, particularly if you&amp;#39;re teaching APCS-A or something similar. Many APCS-A teachers do a unit on image processing using the picture lab (alternate resource). Image processing is a nice platform to explore two dimensional arrays. You basically use a 2D array of pixels (points) to represent an image.</description>
    </item>
    
    <item>
      <title>Teaching Sorting</title>
      <link>https://newblog/post/teaching-sorting/</link>
      <pubDate>Mon, 19 Nov 2018 20:04:08 -0400</pubDate>
      
      <guid>https://newblog/post/teaching-sorting/</guid>
      <description>Earlier today I saw a facebook post asking for thoughts on teaching sorting. The question was specifically not about motivations like having the class act out sorts or sort cards but rather about the coding. I&amp;#39;ve been meaning to write about this since last summer when I attended Owen Astrachan&amp;#39;s talk on the same subject.
Early in my career when teaching sorting I developed the n^2 sorts as standalone routines just as they&amp;#39;re presented in most books but as I gained more experience as a teacher, I changed it up to build the sorts (at least some of them) from existing concepts.</description>
    </item>
    
    <item>
      <title>A* is born</title>
      <link>https://newblog/posts/a-star-is-born/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/a-star-is-born/</guid>
      <description>Over on the CS Educator StachExchange, which is in private beta for a few more days, I saw a post asking about how to introduce the A* search algorithm.
I taught A* as part of the APCS class at Stuy so I thought I&amp;#39;d talk about what I did here.
Some time around mid year, we get to intermediate recursion. This is about the time, give or take, when we talk about the nlogn sorts.</description>
    </item>
    
    <item>
      <title>Sorting - Subtle Errors</title>
      <link>https://newblog/posts/2014-03-17-subtle-errors-sorting/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/2014-03-17-subtle-errors-sorting/</guid>
      <description>&lt;!DOCTYPE html&gt; Time to wrap up sorting for a while. We just finished quicksort having gone through a series of lessons We started with Quickselect. Then we did a quicksort, copying to new arrays during the partition Then finally to an in place quicksort. For the final quicksort we used a partition algorithm pretty much the same as the one described here. We started testing using by building a randomly filled array like this: Random rnd = new Random(); int a[] = new int[n]; for (int i=0;i&amp;lt;n;i++) { a[i] = rnd.</description>
    </item>
    
    <item>
      <title>From selection to sorting</title>
      <link>https://newblog/posts/2014-03-12-select-to-sort/</link>
      <pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/2014-03-12-select-to-sort/</guid>
      <description>&lt;!DOCTYPE html&gt; When I first saw the quicksort it was in an algorithms class back in the day. We first learned the quicksort, then choosing a good pivot element and then as an afterthought we did quickselect. Fast forward to teaching. I was never really happy teaching quicksort. Mergesort is easy to motivate and it&#39;s pretty easy to write. Quicksort always felt a little forced. I thought I&#39;d try switching things up this time and doing quickselect first.</description>
    </item>
    
    <item>
      <title>I guess I&#39;m a dumbass</title>
      <link>https://newblog/posts/2014-02-27-dumbass/</link>
      <pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/2014-02-27-dumbass/</guid>
      <description>I like a fairly informal atmosphere in my classes. Students have to know that there&amp;rsquo;s a line between teacher and student but I also want them to feel like we&amp;rsquo;re all part of the Stuy CS family.
Whenever we start a new term, it takes a while to break down the walls. The students don&amp;rsquo;t know what to expect of me, can they trust me? Am I a bozo? Who knows.</description>
    </item>
    
    <item>
      <title>Fibonacci by the tail</title>
      <link>https://newblog/posts/2014-02-13-fibonacci/</link>
      <pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/2014-02-13-fibonacci/</guid>
      <description>We&amp;rsquo;re ramping up for recursion in my junior classes - state space search, nlg(n) sorts, etc. As a refresher, we took a quick look at the Fibonacci numbers.
Now, some people seem to think that it&amp;rsquo;s a tired problem. It&amp;rsquo;s mathy, it&amp;rsquo;s played out, it&amp;rsquo;s boring etc.. They just might be missing the point.
The beauty isn&amp;rsquo;t in the problem itself, but rather, that it&amp;rsquo;s a platform on which you can look at many problem solving techniques.</description>
    </item>
    
    <item>
      <title>Sorting from the top and from the bottom</title>
      <link>https://newblog/posts/2010-03-14-sorting-from-top-and-from-bottom/</link>
      <pubDate>Sun, 14 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/2010-03-14-sorting-from-top-and-from-bottom/</guid>
      <description>&lt;!DOCTYPE html&gt; Sorting from the top and from the bottom I&#39;ve been meaning to write this post for a couple of weeks, but some times life just gets in the way. I&#39;ve always thought it important to arm students with as many different tools with which to attack problems as possible. As such, the courses I teach use a number of different languages, each highlighting a different paradigm and thought process.</description>
    </item>
    
  </channel>
</rss>
