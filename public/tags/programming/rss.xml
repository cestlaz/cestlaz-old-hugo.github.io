<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on C&#39;est la Z</title>
    <link>https://newblog/tags/programming/</link>
    <description>Recent content in programming on C&#39;est la Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Mar 2023 09:58:04 -0400</lastBuildDate><atom:link href="https://newblog/tags/programming/rss.xml" rel="self" type="application/rss" />
    <item>
      <title>Recursive Sentences</title>
      <link>https://newblog/post/recursive-sentences/</link>
      <pubDate>Fri, 10 Mar 2023 09:58:04 -0400</pubDate>
      
      <guid>https://newblog/post/recursive-sentences/</guid>
      <description>It&amp;#39;s been a while since I last wrote up a specific lesson idea so when my friend Garth asked about recursion ideas I thought I&amp;#39;d write this one up. This is a unit I used to teach in my intro class at Stuy using Racket (nee Scheme) but I coded up a quick and dirty Python version.
Recursion is a polarizing topic. Some people love it, others hate it. I&amp;#39;m sure the usual suspects of intro recursion problems doesn&amp;#39;t help.</description>
    </item>
    
    <item>
      <title>Advent 2022 - day 3 - sets</title>
      <link>https://newblog/post/advent-2022-day03/</link>
      <pubDate>Sat, 03 Dec 2022 10:13:56 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2022-day03/</guid>
      <description>Day 3 ended up being a quick one. That is, as long as your language supports set operations. You can do it without set operations but it&amp;#39;s easier if you&amp;#39;ve got them.
Part 1 Input is a file of text where each line is an input.
You have to read each line, split it in half and then find the common letter between the left and right halves and then apply their scoring rules on that letter.</description>
    </item>
    
    <item>
      <title>Advent of Code 2022 - Days 1 and 2</title>
      <link>https://newblog/post/advent-2022-day01-01/</link>
      <pubDate>Fri, 02 Dec 2022 13:59:06 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2022-day01-01/</guid>
      <description>It&amp;#39;s Advent of Code season again. Every day a new two part programming challenge and once again I&amp;#39;m taking part. At least until grading and other end of term obligations end up eating my lunch.
I wasn&amp;#39;t planning on writing anything up but the first two days looked like nice problems for CS1 or even CS0 students and since my friend Steve was writing up his take, I thought I&amp;#39;d at least comment on the first two.</description>
    </item>
    
    <item>
      <title>Learning a new language - part 2 - Rust</title>
      <link>https://newblog/post/learn-new-language-2/</link>
      <pubDate>Tue, 29 Nov 2022 08:59:11 -0400</pubDate>
      
      <guid>https://newblog/post/learn-new-language-2/</guid>
      <description>Last time, I wrote about frustrations in trying to motivate myself to learn ocaml. I could see the strong points but given that I&amp;#39;ve been using Clojure now for a while, it didn&amp;#39;t really hold any value added for me in my current situation.
Next, I thought I&amp;#39;d explore Rust. On the non-functional style, my go to languages have always been Python for scripting and small things and C professionally.</description>
    </item>
    
    <item>
      <title>Subtle Errors</title>
      <link>https://newblog/post/subtle-errors/</link>
      <pubDate>Fri, 02 Sep 2022 15:05:19 -0400</pubDate>
      
      <guid>https://newblog/post/subtle-errors/</guid>
      <description>The semesters back up in full swing again - teaching 2 undergrad classes in person - CS0 in Python and CS1 in C++ along with my teacher certification class - Ethics via Zoom. Grand total of about 125 students. An error came up in the CS0 class the other day that reminded me how tough it is not only to prepare students to deal with all the things that can go wrong when learning to program but even for a teacher to realize what&amp;#39;s going on.</description>
    </item>
    
    <item>
      <title>Coding For Problem Solving</title>
      <link>https://newblog/post/coding-for-problem-solving/</link>
      <pubDate>Fri, 01 Oct 2021 10:17:01 -0400</pubDate>
      
      <guid>https://newblog/post/coding-for-problem-solving/</guid>
      <description>Like most CS educators I&amp;#39;m a regular reader of Alfred Thompson&amp;#39;s blog. Alfred&amp;#39;s latest post is spot on but there was a line in it and a particular Twitter response that reminded me that we so often forget a big reason why people learn to code.
Alfred mentions, as did that Tweet about coding to solve problems. What problem are you trying to solve. This is the mainstream push - programming helps you solve problems.</description>
    </item>
    
    <item>
      <title>Advent of Code 2020</title>
      <link>https://newblog/post/advent-2020-leadin/</link>
      <pubDate>Mon, 30 Nov 2020 14:21:17 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-leadin/</guid>
      <description>Tomorrow, or more practically, tonight at Midnight, Eric Wastl will once again launch the Advent of Code. As I&amp;#39;ve written before, it&amp;#39;s a month long event where each day a new programming problem is released. The problems range in difficulty and complexity. Some are very approachable to beginners and some are crazy challenging. I&amp;#39;ve written a bunch about AOC in past years:
Solve A to Solve B Data structures and Hidden Complexity Tools can shape- how we think 2019 day 1 2019 day 2 2019 day 3 2019 day 4 2019 day 8 2019 day 8 addendum and a few more not listed.</description>
    </item>
    
    <item>
      <title>Multi Stage Assignments - the good and the bad - Advent of Code</title>
      <link>https://newblog/post/multi-stage-assignments/</link>
      <pubDate>Thu, 12 Dec 2019 17:19:27 -0400</pubDate>
      
      <guid>https://newblog/post/multi-stage-assignments/</guid>
      <description>In the real world you&amp;#39;re usually not building your own projects from scratch. Much more frequently you&amp;#39;re working on a team and you and other players come and go over time. This is in stark contrast to most CS educational experiences where students typically complete relatively small assignments from beginning to end. One of my biggest fears way back when as I was about to graduate college was when I woke up one night in a cold sweath &amp;#34;oh crap - in a couple of weeks I&amp;#39;m going to have to actually produce good code.</description>
    </item>
    
    <item>
      <title>Advent 2019 Day 8 - addendum - generating inputs</title>
      <link>https://newblog/post/advent-2019-day8-part2/</link>
      <pubDate>Sun, 08 Dec 2019 17:04:30 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2019-day8-part2/</guid>
      <description>As I said in my last post, day 8 would be a nice project or lesson in an APCS-A or college CS1 class. Another nice problem would be to write a program to generate an image in the format required by the question. Alternatively, a teacher doing day 8 with their classes might want to generate a bunch of images for the students to test their decoders on. I thought I&amp;#39;d write one to see how appropriate it would be for the students.</description>
    </item>
    
    <item>
      <title>Advent 2019 Day - 8</title>
      <link>https://newblog/post/advent-2019-day8/</link>
      <pubDate>Sun, 08 Dec 2019 08:42:32 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2019-day8/</guid>
      <description>I spent most of last week up in Albany working on the NY State K12 CS Standards so fell a bit behind. I had to go back to complete day 5 but still haven&amp;#39;t finished day 7 which builds on day 5 which in turn builds on day 2. I might not get to finishing 7 for a while but it looks like a good chance to play with core.</description>
    </item>
    
    <item>
      <title>Advent 2019 Day 4</title>
      <link>https://newblog/post/advent-2019-day4/</link>
      <pubDate>Wed, 04 Dec 2019 19:32:34 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2019-day4/</guid>
      <description>Day 4. Most of the day was spent working on the NY State CS standards to I didn&amp;#39;t figure to have much time to work on the problem. Fortunately, I was able to knock out part 1 before work started and part 2 was a quick adjustment when I got back to it at the start of lunch.
Once again, it was a problem with a few interesting teacher side aspects.</description>
    </item>
    
    <item>
      <title>Advent 2019 Day 3</title>
      <link>https://newblog/post/advent-2019-day3/</link>
      <pubDate>Tue, 03 Dec 2019 19:01:13 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2019-day3/</guid>
      <description>Today&amp;#39;s problem dealt with intersecting paths. You start with two inputs, figure out the paths they represent and where they intersect and then find the intersection that correctly answers the question.
For part 1 you have to find the intersection closest to the origin. From a teacher&amp;#39;s point of view, the interesting part here is data representation. This problem deals with a two dimensional grid on which the paths live.</description>
    </item>
    
    <item>
      <title>Advent 2019 Day 2</title>
      <link>https://newblog/post/advent-2019-day2/</link>
      <pubDate>Mon, 02 Dec 2019 17:11:43 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2019-day2/</guid>
      <description>Day 2 of Advent of Code 2019 was also pretty straightforward and once again I wrote my solution in Clojure but in order to talk about this from a teacher&amp;#39;s point of view, we&amp;#39;ll look at a Python solution. At its core, this is a simulation problem - read the data into an array or list and write a program to run through the steps. At first I was hoping that the solution would consume the data - that is, once you read past an instruction you don&amp;#39;t go back to it.</description>
    </item>
    
    <item>
      <title>Advent of Code 2019 Day 1</title>
      <link>https://newblog/post/advent-2019-day1/</link>
      <pubDate>Sun, 01 Dec 2019 14:23:35 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2019-day1/</guid>
      <description>Like most programming challenges, Advent of Code ramps out from easier, more accessible problems to harder, more complex ones. As such, a number of the early challenges are great problems for early CS students. I thought that while I watched my NY Giants play valiantly in their attempt to get a high draft pick I&amp;#39;d talk about today&amp;#39;s challenge from a teacher&amp;#39;s point of view.
The summary of part one is that you have a list of inputs (masses of components) and for each one you have to perform a calculation (how much fuel is needed).</description>
    </item>
    
    <item>
      <title>Back To Python</title>
      <link>https://newblog/post/back-to-python/</link>
      <pubDate>Fri, 14 Jun 2019 15:53:54 -0400</pubDate>
      
      <guid>https://newblog/post/back-to-python/</guid>
      <description>With summer right around the corner I&amp;#39;m hoping to spend at least a little time on some personal coding projects. There are a few work related tools I&amp;#39;d love to develop and just some random areas of CS I&amp;#39;d like to explore. If I finish them, the work projects will be web based.
I was thinking about using this as an opportunity to do a deeper dive into Clojure having used it for some experiments and competitions like Advent of Code but at the end of the day I decided not to.</description>
    </item>
    
    <item>
      <title>Give me a break (and a continue)</title>
      <link>https://newblog/post/break-continue/</link>
      <pubDate>Wed, 01 May 2019 08:39:41 -0400</pubDate>
      
      <guid>https://newblog/post/break-continue/</guid>
      <description>What can I do to discourage my students from using the &amp;#34;break&amp;#34; statement?
That was more or less the gist of the comment and it elicited some good responses. This time the conversation was on Facebook but I&amp;#39;ve seen this one and participated in it many times before. I never liked the question when presented as a &amp;#34;how can I stop them&amp;#34; one. I equally dislike when the offered advice is basically &amp;#34;never use break no matter what&amp;#34; or something similar.</description>
    </item>
    
    <item>
      <title>Compile Each Concept</title>
      <link>https://newblog/post/compile-each-concept/</link>
      <pubDate>Tue, 09 Oct 2018 14:46:59 -0400</pubDate>
      
      <guid>https://newblog/post/compile-each-concept/</guid>
      <description>We&amp;#39;ve all been there:
Student: Teacher, I need help Teacher (comes over) Student (shows screen listing three bazillion errors)
The student has just written pages of code and finally decided to try to run it only to end up with pages of errors.
Error messages can at times be hard to read for beginners but to see and truth be told, they frequently don&amp;#39;t even read them but over the years I&amp;#39;ve developed a practice that I&amp;#39;ve found helpful as a software developer and if students adopt the same practice it can save them a lot of time and effort.</description>
    </item>
    
    <item>
      <title>Globals Breaks And Returns, oh my</title>
      <link>https://newblog/post/globals-breaks-and-returns/</link>
      <pubDate>Sat, 06 Oct 2018 15:48:55 -0400</pubDate>
      
      <guid>https://newblog/post/globals-breaks-and-returns/</guid>
      <description>Never use global variables Never break out of a loop These are two &amp;#34;best practices&amp;#34; that are frequently touted in early CS classes both at the high school and college level.
They came up a couple of times yesterday. Once in the Facebook APCS-A teachers group and once on Alfred Thompson&amp;#39;s blog.
Alfred post was topically on global variables. Actually it was deeper than just global variables. It&amp;#39;s also about how students progress - what they can figure out at various stages of progress and how what seems like a good idea early on the path to computer science doesn&amp;#39;t seem so great later on.</description>
    </item>
    
    <item>
      <title>Rite Of Passage Projects</title>
      <link>https://newblog/posts/rite-of-passage-projects/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/rite-of-passage-projects/</guid>
      <description>JCS&amp;#39;s post on Irreal today brought me back. It was about Brief which was the editing hotness back in the day. I played with it a little really mostly used Emacs clones for real work when I was stuck on MS-DOS systems. Usually either JOVE or Epsilon
In the comments Jon reminded me about the MKS Toolkit which brought most everyday Unix tools to DOS along with a shell and a version of Vi.</description>
    </item>
    
    <item>
      <title>Advent of Code 2017 - Day 1</title>
      <link>https://newblog/posts/advent-2017-1/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/advent-2017-1/</guid>
      <description>It&amp;#39;s once again time for Advent of Code. That one a day programming competition that&amp;#39;s been running now for three years.
Here are some thoughts on day 1. The core of the problem is that you have a large string of digits and you have to calculate a checksum. This is done by adding the sum of a subset of the digits. Only the ones that are identical to the digit to their right.</description>
    </item>
    
    <item>
      <title>Motivating and understanding quicksort</title>
      <link>https://newblog/posts/quick-sort-starting/</link>
      <pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/quick-sort-starting/</guid>
      <description>Thks question was posed the other day - how can one get students to truly understand the quicksort algorithm?
I&amp;#39;ve written a few posts about quicksort. The last time I did a lesson writeup on the subject I wrote about first looking and quickselect and then moving to the quicksort. The class was first faced with the problem of writing a routine to find the Kth smallest item in an unsorted data set.</description>
    </item>
    
    <item>
      <title>Programming Idioms</title>
      <link>https://newblog/posts/programming-idioms/</link>
      <pubDate>Sun, 08 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/programming-idioms/</guid>
      <description>I just read Jeff Yearout&amp;#39;s recent post titled The Beginner&amp;#39;s Garden of Concepts. Not directly related but it got me thinking about programming idioms.
I&amp;#39;ve been using the phrase &amp;#34;programming idiom&amp;#34; for years to describe a short useful recurring code construct. I didn&amp;#39;t realize that it was officially &amp;#34;a thing&amp;#34; until doing a web search on the phrase years later.
As our students grow from newbies on I think it&amp;#39;s helpful for them to see recurring and related patterns and programming idioms gives us a name to apply to many beginner patterns.</description>
    </item>
    
    <item>
      <title>A* is born</title>
      <link>https://newblog/posts/a-star-is-born/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/a-star-is-born/</guid>
      <description>Over on the CS Educator StachExchange, which is in private beta for a few more days, I saw a post asking about how to introduce the A* search algorithm.
I taught A* as part of the APCS class at Stuy so I thought I&amp;#39;d talk about what I did here.
Some time around mid year, we get to intermediate recursion. This is about the time, give or take, when we talk about the nlogn sorts.</description>
    </item>
    
    <item>
      <title>Advent of Code 2016 - Check your data</title>
      <link>https://newblog/posts/advent-of-code-2016-check-data/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/advent-of-code-2016-check-data/</guid>
      <description>I&amp;#39;m spending the weekend up in Michigan. Visiting my brother and is family. We&amp;#39;re here to see the UMGASS production of Gilbert and Sullivan&amp;#39;s The Sorcerer. Batya also came up from Cornell to join us so the two families are all togehter for the first time in about 10 years.
This hasn&amp;#39;t left much time for Advent of Code but I did manage to finish yesterday&amp;#39;s challenge this morning.</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #2</title>
      <link>https://newblog/posts/advent-of-code-2016-2/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/advent-of-code-2016-2/</guid>
      <description>Today we&amp;#39;re looking at Advent of Code 2016 number 2.
To change things up, I thought I&amp;#39;d do a video where I live code a solution.
The solution I present is pretty straightforward - use a 2D array (or technically, an array of strings) to represent the keypad, parse the input, and follow the input instructions to build the code.
One of the things I really like about Advent of Code is that every problem has two parts and depending on how you solved part 1, you may or may not have extra work to do for part 2.</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #1</title>
      <link>https://newblog/posts/advent-of-code-2016-1/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/advent-of-code-2016-1/</guid>
      <description>I recently posted about Advent of Code - a series of programming problems relseased one a day. While they vary in terms of level of difficulty, a number of them make nice problems for introductory to mid level programming classes.
I thought I&amp;#39;d share some of my thoughts on a few of them starting with the first problem from this years competition.
Take a minute to read it over.</description>
    </item>
    
    <item>
      <title>Inverted Index Project</title>
      <link>https://newblog/posts/inverted-index/</link>
      <pubDate>Sat, 26 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/posts/inverted-index/</guid>
      <description>I haven&amp;#39;t spoken much about the class I&amp;#39;ve been teaching this semester. It&amp;#39;s an intro CS course - a programming heavy intro. I decided to use Python with a transition at the end to C++. The transition is to mirror Hunter&amp;#39;s normal first CS course that ends with a C++ intro to prepare the students for next semester&amp;#39;s CS course which is a more intense OOP class using C++ - the language we use in our core courses.</description>
    </item>
    
  </channel>
</rss>
