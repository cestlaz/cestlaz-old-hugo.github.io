<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithms on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/categories/algorithms/</link>
    <description>C&#39;est la Z (algorithms)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Apr 2023 09:06:29 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/categories/algorithms/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Data Structres and Algorithms - What&#39;s Important</title>
      <link>https://cestlaz.github.io/posts/algos-whats-important/</link>
      <pubDate>Fri, 07 Apr 2023 09:06:29 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/posts/algos-whats-important/</guid>
      <description>&lt;p&gt;
So, last post I talked about the technical interview and
unquestionably students at elite private schools have yet another leg
up on the other folk. Today, let&amp;#39;s look at the core subject of those
interviews and what I think should be emphasized in class.&lt;/p&gt;
&lt;p&gt;
I want to be clear - I&amp;#39;m only talking about &lt;strong&gt;in class&lt;/strong&gt; here. There are
many things that can be done at public institutions like Hunter to
help better prepare students for tech careers. I think I&amp;#39;ve been very
successful with this at Hunter College and my friend and colleague
&lt;a href=&#34;https://www.linkedin.com/in/eharris9876/&#34;&gt;Elise&lt;/a&gt; has taken it to another level. Today though, just about in
the emphasis class.&lt;/p&gt;
&lt;p&gt;
As I said yesterday, I&amp;#39;ve been covering run time recently and I always
thing around this time on how important or unimportant knowing all the
ins and outs of Big-Oh is  along with proofs of run times, and even
building all the tools. Another question is if we should actually be
using interview style questions in class. &lt;/p&gt;
&lt;p&gt;
To me, the important thing is that my students be able to understand
the ramifications of using an algorithm or data structure and be able
to compose solutions to real problems be that by writing things from
scratch or by using existing tools. That means they have a feel for
why something runs in a certain time more so than what that time is.&lt;/p&gt;
&lt;p&gt;
Yes, they&amp;#39;ll know that a mergesort is O(nlgn) and that, for practical
purposes so is the quicksort but I also want them to consider the
use. If the application is a large data set that&amp;#39;s queried frequently
but changes infrequently is it better they sort it each time (
O(nlgn) + kO(nlgn) ) or just sort it once then do one linear pass (
O(nlgn)+kO(n) ). We know the latter is probably easier and better but
we know that by knowing the application and understanding what&amp;#39;s going
on and not blindly using the algorithm du jour.&lt;/p&gt;
&lt;p&gt;
Hash Tables are another one - they&amp;#39;re so much of a go to data
structure these days that they&amp;#39;re practically a primitive,
particularly with languages like Python and Javascript including them
in the basics along with list or arrays. Hash Tables are great -
they&amp;#39;re easy, powerful, and fast but only if they&amp;#39;re sparse and you
don&amp;#39;t have loads of collisions. Of course you won&amp;#39;t on toy problems
and likely on coding interviews but I want my students to understand
this.&lt;/p&gt;
&lt;p&gt;
Same for binary search trees. Sure, they won&amp;#39;t actually use a straight
binary search tree - it&amp;#39;s a stepping stone data structure to introduce
a tree structure that can give you logarithmic run times and students
will move on to use structures that can guarantee better performance
but the binary search tree allows us to stumble on to the degenerate
case and see how what&amp;#39;s first presented as a good and efficient data
structure can turn out being not so good.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s why I do &lt;a href=&#34;https://cestlaz.github.io/posts/2013-03-23-who_won_the_election-quadratic_to_linear_time/&#34;&gt;this&lt;/a&gt; lesson before I explore run time. It gets the kids
thinking about what makes an algorithm run in a certain time and
exposes them to hidden complexity. It also shows them how to use a
data structure, an array, in a manner that most of them had never
considered before - buckets where the index is the value and the data
in the cell is how many times that value occurs. It&amp;#39;s also why we
write super bad implementations of the nlgn sorts and then see about
improving things.&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s my focus. I&amp;#39;m not so hung up on the whats but I want my
kids to internalize the whys and the hows.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>