<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS Ed on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/categories/cs-ed/</link>
    <description>C&#39;est la Z (CS Ed)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Sep 2024 11:49:58 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/categories/cs-ed/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>StuyCS - Playing the long game</title>
      <link>https://cestlaz.github.io/post/cs-programs-the-long-game/</link>
      <pubDate>Tue, 17 Sep 2024 11:49:58 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-programs-the-long-game/</guid>
      <description>&lt;p&gt;
Last Thursday, I was back at Stuy. I was there along with members of
the Alumni Association to host Stuy&amp;#39;s first tech meetup of the
season. I guess that&amp;#39;s the first &amp;#34;official&amp;#34; project I&amp;#39;m working on
since retirement. In the past, there had been various issues with
Stuy&amp;#39;s assorted alumni associations (yes, there were at one time three
competing entities) but for the past few years they&amp;#39;ve been under what
we can call &amp;#34;new management&amp;#34; - people I both like and trust so I&amp;#39;m
happy to be working with them.&lt;/p&gt;
&lt;p&gt;
This event was just a normal meetup - mostly networking time and a
couple of speakers. One of the speakers was my friend, former student,
former colleague, and successor as Coordinator of CS at Stuy - JonAlf.
JonAlf gave an update on the &amp;#34;state of StuyCS&amp;#34; going back to when I
first started to build things. I enjoyed the talk and since, as JonAlf
said, even though the audience collectively knew the development,
individually very few did. There were also a couple of old timers who
probably didn&amp;#39;t know any of it.&lt;/p&gt;
&lt;p&gt;
It made me think of how much education is playing the long game.&lt;/p&gt;
&lt;p&gt;
Things started in Fall 1994 when I started teaching APCS-AB - the
one that was both a college CS1 and CS2 - four sections. Prior to that
there had been a single APCS class and a random programming elective
here or there but all taught by math teachers and all taught as one
offs.&lt;/p&gt;
&lt;p&gt;
Spring &amp;#39;95 brought graphics and Fall &amp;#39;95, Systems.&lt;/p&gt;
&lt;p&gt;
At this point, we, or I was just starting but I wouldn&amp;#39;t call it a
program. Three courses but I&amp;#39;m not sure I&amp;#39;d be able to claim any
strong coherence.&lt;/p&gt;
&lt;p&gt;
APCS was, well, APCS. Nothing special there except that we probably
covered more and more deeply than most high school programs.&lt;/p&gt;
&lt;p&gt;
Graphics was the terminal course - second term senior year. It had a
nice combination of the programming they had learned in APCS, Math
from precalc and a touch of calc, and a little of their physics. Much
like the rug, it tied things together nicely. That, plus the kids made
pretty pictures which helped stave off but didn&amp;#39;t eliminate
senioritis.&lt;/p&gt;
&lt;p&gt;
Systems was just thrown in. It was based around Intel Assembly
programming in our lab of MS-DOS/Windows-95 machines I thought it
might be interesting and fun for the kids and I knew I could teach it
but there wasn&amp;#39;t any deep thought that went into why I created it as
opposed to some other course to fill that space.&lt;/p&gt;
&lt;p&gt;
Around 1998 / 1999 things started to change. First, Systems had
changed. We had switched the labs over from the extremely overpriced
and obsolete IBM PS/2s (obsolete because IBM had stopped selling them
prior to selling them to Stuy) for regular PCs which we could install
Linux on. Since we could do much more with the platform I decided to
change up the course. I also had a few years of graduates now in
college and was able to get their thoughts on what was missing from
their CS sequences.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s how our new Systems class was born. It covered C programming
and an assortment of Systems topics. Some was similar to what they&amp;#39;d
cover in college but a lot was set up to support them in college. I
continued to get feedback from my grads on this and other courses from
that point on and it helped direct my approach to course building.&lt;/p&gt;
&lt;p&gt;
I also created the sophomore one semester intro course that would
later become a requirement. This class was designed as a new CS0 -
something that would be programming heavy but would both expose
students to a wider range of CS topics than a typical intro
programming class and also relate CS to other disciplines. In some
ways APCS-Principles which came around later had a similar intent but
I&amp;#39;d say my course was much more rigorous and much better for my population.&lt;/p&gt;
&lt;p&gt;
The goal would be to provide something valuable to the majority of
students who might never take any more CS while at the same time,
inspiring and preparing those who would.&lt;/p&gt;
&lt;p&gt;
Now I&amp;#39;d say we had a program. It was still basically just me along
with a math teacher and then two  picking up some of the APCS classes
but we had a cohesive sequence of courses that made sense.&lt;/p&gt;
&lt;p&gt;
Intro would lead into APCS would lead into Systems/Graphics.&lt;/p&gt;
&lt;p&gt;
Being a StuyCS grad meant something.&lt;/p&gt;
&lt;p&gt;
A few other selective schools also claimed CS programs at the time but
as far as I could tell they had intro programming followed by APCS
followed by just teaching the next college course or courses in high
school.&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t see the point of that. The kids would get algorithms,
theory, compilers etc. in college anyway.&lt;/p&gt;
&lt;p&gt;
For me, Systems and Graphics made much more sense. My Systems was set
up to support the college classes and Graphics was typically an
elective so it would add to my kid&amp;#39;s backgrounds and not just be
something they&amp;#39;d take again. Besides, I ended up working some things
like parsing and automata into the graphics course.&lt;/p&gt;
&lt;p&gt;
We also started to grow.&lt;/p&gt;
&lt;p&gt;
By 2007 we had 3 full time CS teachers plus five sections of CS
classes being taught by math teachers. Intro was a single semester
requirement. We had 12 intro classes each semester, 5 ACPS classes
(still teaching AB), 2 Systems/Graphics (Fall/Spring), plus one
research which was really a fake class to let me work with my kids to
run the network although I did do my best to support the kids who did
want to do legit research and within a few years, the class did morph
into a legit research class.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s a little over 10 years. The long game.&lt;/p&gt;
&lt;p&gt;
We gad a coherent three year sequence. It wasn&amp;#39;t random
electives. Being a StuyCS grad meant something. Now, I&amp;#39;m not saying
that my way was the only way or the right way for everyone but I think
for CS it made a world of sense. Contrast that with Stuy&amp;#39;s English
department. Through most of your four years, students could select
which English &amp;#34;selective&amp;#34; to take and they ranged wildly. You could
take Science Fiction, Women&amp;#39;s Voices, Children&amp;#39;s book authoring,
science writing, detective fiction and tons more. This means that Stuy
grads can have radically different English and Literature
experiences. For English. maybe that&amp;#39;s good. For a HS CS program, I
think a coherent sequence is better. I guess it&amp;#39;s also like having
area requirements for a Bachelors of Arts degree - take one from this
category, two from this etc. versus Columbia&amp;#39;s core curriculum where
everyone literally takes the same classes for the core.&lt;/p&gt;
&lt;p&gt;
I was confident though that it was working. At one point, I saw a
tweet by Morgan Missen. I don&amp;#39;t know her but was told that she was the
top tech team talent builder in the Bay Area. She tweeted &amp;#34;Stuyvesant,
the Stanford of the East.&amp;#34; I also started hearing from VCs, investors,
and founders about how they didn&amp;#39;t really like seeing a high school on
a graduate&amp;#39;s resume unless it was Stuyvesant. If they saw StuyCS, the
knew it meant something.&lt;/p&gt;
&lt;p&gt;
By the time I left Stuy for Hunter College we were mostly
stable. Maybe one or two more APCS sections on any given year and I
did create a Software Engineering course called Software Development
to replace research. That course, like my others, was designed based
on what my graduates were saying they needed.&lt;/p&gt;
&lt;p&gt;
So it took twenty years of work but in this case slow and steady might
not have won the race, but it built the program.&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;ve gone over why I left Stuy in some other posts but two
important reasons were my stagnating - I had done everything I felt I
could do and also, I felt that some of my team was also being held
back as they were too deferential to me.&lt;/p&gt;
&lt;p&gt;
Regardless, I left, JonAlf took over team leadership and here&amp;#39;s where
they are today.&lt;/p&gt;
&lt;p&gt;
They now have an opt in full year CS requirement. Kids can either take
a full year of CS or one of CS and one of drafting.&lt;/p&gt;
&lt;p&gt;
That translates to 13 sections of the full year course and 6 of the
single semester. They also rebranded intro and now call it
&amp;#34;foundations of CS.&amp;#34;&lt;/p&gt;
&lt;p&gt;
They also have 7 APCS classes and that&amp;#39;s probably the limit, at least
based on teaching the Stuy version that includes data structures. They
tried to have additional sections based on requests but that led to a
portion of the students really struggling.&lt;/p&gt;
&lt;p&gt;
To address that, they created NeXTCS which covered APCS-A but at a
more relaxed pace and had a lot of fun projects. I think they were
using Processing. They&amp;#39;re running 4 sections of that.&lt;/p&gt;
&lt;p&gt;
On top of that add 2 Systems to go along with 2 of a new Cybersecurity
class as well as the usual 2 of softdev and a new Ethics class. The
only reason they aren&amp;#39;t running 2 graphics classes this year as well
is because they had a crunch in math and need to send a CS teacher
over to teach a couple of math classes - how times have changed.&lt;/p&gt;
&lt;p&gt;
To run this, they have 8 full time CS teachers.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s no doubt in my mind that my leaving was the right move. StuyCS
has gone on to new heights under new leadership and I couldn&amp;#39;t be
prouder of them.&lt;/p&gt;
&lt;p&gt;
It did take a span of just about 30 years to go from no CS to a three
year sequence, a full year required option, a coherent sequence of
electives and eight full time CS teachers. Just another indication
that education is a marathon not a sprint. Now, we&amp;#39;re in the infancy
of CS teacher certifications and much of the country isn&amp;#39;t even where
Stuy was thirty years ago in terms of courses. I expect it&amp;#39;ll be
another thirty years or probably more before it&amp;#39;s all worked out. I
guess for old timers like me (and some of my readers and friends) we get to be
Moses - we get to see the promised land but we won&amp;#39;t get to enter
it. It won&amp;#39;t be here for another few decades but that&amp;#39;s okay, that&amp;#39;s
just how education progresses. It&amp;#39;s gratifying to look back and see
how far we&amp;#39;ve come so far.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The CS-Ed podcast - teaching college without a PhD</title>
      <link>https://cestlaz.github.io/post/csed-podcast-teaching-with-masters/</link>
      <pubDate>Sat, 09 Mar 2024 09:20:03 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/csed-podcast-teaching-with-masters/</guid>
      <description>&lt;p&gt;
It&amp;#39;s our third day in Charleston and we&amp;#39;re stuck in our hotel. Stormy
rains and strong winds and a coastal flood alert telling everyone to
stay home. Our car is in the parking lot with water halfway up the
wheels.&lt;/p&gt;
&lt;p&gt;
We had tickets to go to the &lt;a href=&#34;https://iaamuseum.org/&#34;&gt;International African American Museum&lt;/a&gt; this
morning but got an email saying they won&amp;#39;t be open until the afternoon
and that our tickets would automatically be refunded.&lt;/p&gt;
&lt;p&gt;
So while waiting and hoping that the rain subsides and the parking lot
drains I decided to listen to the latest episode of the &lt;a href=&#34;https://csedpodcast.org/ &#34;&gt;CS-Ed podcast&lt;/a&gt;
hosted by Kristin Stephens-Martinez with guest Adam Blank. The title
was &amp;#34;What is in a Teaching Faculty Job Title?&amp;#34; but it was really about
teaching at the college level without a PhD. Adam, the guest, has been
teaching full time at the college level with &amp;#34;only&amp;#34; a Masters. I say
&amp;#34;only&amp;#34; because faculty without a PhD isn&amp;#39;t the norm. I in no way mean to belittle his
degree or situation. I too &amp;#34;only&amp;#34; have a Masters in CS but, to be
honest, as soon as I joined Hunter College&amp;#39;s faculty, I was the
strongest teacher in the department and likely one of the strongest in
the whole faculty. Maybe not the nicest, most popular, or charismatic
but the strongest. Yeah, that maybe sounds a bit arrogant and
egotistical but after my 26 years of self reflection and work to
improve at my craft at the high school leve, I can say I&amp;#39;m one of the
better teachers overall out there and K12 teachers, by and large are
much better teachers than college faculty.&lt;/p&gt;
&lt;p&gt;
Anyway, you should give the podcast a listen, here&amp;#39;s a direct link to
the episode (&lt;a href=&#34;https://csedpodcast.org/blog/s4e3_teaching_faculty_job_title/&#34;&gt;link&lt;/a&gt;) and here are some of my thoughts.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Disclaimer:&lt;/strong&gt; Some of the things said on the podcast were given as the
opinions of the host or the guest and at other times they were stating
things that others have said. I&amp;#39;m doing my best not to mix those
things up but apologize in advance if I do.&lt;/p&gt;
&lt;p&gt;
Both Kristin and Adam seem to believe that having a PhD doesn&amp;#39;t make
you a better prepared teacher than just having a Masters. I
wholeheartedly agree.&lt;/p&gt;
&lt;p&gt;
I agree with the sentiment but Kristin pushed back saying that one
could get a PhD in CS Education.&lt;/p&gt;
&lt;p&gt;
I disagree with that push back on a number of fronts. First off,
there&amp;#39;s still limited opportunities to do a PhD in CS Education,
second, education degrees, at least in the circles I&amp;#39;ve been exposed
to are sometimes not treated with the same respect as straight old
hardcore CS degrees and that brings us back to the whole point of the
podcast that a college instructor without a PhD shouldn&amp;#39;t be a second
class citizen. Finally, there&amp;#39;s the whole problem with education
education and education research.&lt;/p&gt;
&lt;p&gt;
Both Adam and Kristin felt that you can&amp;#39;t understand the
research on education if you haven&amp;#39;t done any research and this
understanding leads to one being a better teacher.&lt;/p&gt;
&lt;p&gt;
I guess it can, but much better is actually teaching and reflecting
and acting on those reflections.&lt;/p&gt;
&lt;p&gt;
In general, education research is held in very low regard. It&amp;#39;s
rarely reproduced and hardly ever accounts for the myriad variables
that influence a class. An education researcher looks in from the
outside and says &amp;#34;oh, this seems to work.&amp;#34; A teacher lives it and
either adapts or dies (1/3 of teachers leave the profession within 3 years).&lt;/p&gt;
&lt;p&gt;
To put it another way. I like classic movies. I watch many of
them. I&amp;#39;ve read analyses and taken classes. I&amp;#39;ve criticized
performances and directorial choices. None of this will make me a good
or even bettor actor, director, or cinematographer.&lt;/p&gt;
&lt;p&gt;
Even closer to home for me is that I was a competitive fencer. I
watched other people train and bout and even studied film. None of
that improved me. At best, it would inform me as to what to work on
when I took lessons, practiced and competed but only with that
practice and competition did I really improve.&lt;/p&gt;
&lt;p&gt;
Want to become a better teacher? Teach, get feedback, reflect, improve.&lt;/p&gt;
&lt;p&gt;
Something else that got me thinking along these lines was a comment
Kristin made asking if teachers really needed to be up on the latest
research or if it were enough for them to wait until that research
were distilled into a teaching handbook.&lt;/p&gt;
&lt;p&gt;
It got me thinking on how many times I was given a different &amp;#34;true
way&amp;#34; to teach based on the research.&amp;#39;&lt;/p&gt;
&lt;p&gt;
It also got me thinking about the typical teacher career
path. Teachers are most &amp;#34;up&amp;#34; on the research when the graduate from
their teacher education programs. When they&amp;#39;re new. It&amp;#39;s also when
they&amp;#39;re at their worst as teachers. They quickly learn that their best
instructors were the ones that said &amp;#34;this is what the research says,
this is what your supervisor wants to see, and now we&amp;#39;ll talk about
the reality of what you need in the classroom.&amp;#34;&lt;/p&gt;
&lt;p&gt;
The teachers that get better might read the current research but more
likely they work on their craft, self reflect, and work with other,
frequently more experienced teachers. Teaching is very much a craft
and most of the master teachers you&amp;#39;ll find won&amp;#39;t be quoting the
research but developed in this way.&lt;/p&gt;
&lt;p&gt;
This brings me back to the subject of the podcast. Our entire higher
ed system has evolved into a hierarchical system focused on
research. Even if you&amp;#39;re &amp;#34;teaching faculty&amp;#34; and don&amp;#39;t have many or any
research obligations, there exists this caste system and there&amp;#39;s
rarely anything in an institutions organizational structure to support
faculty members becoming better teachers. Sure, some faculty members
are great teachers and many work on their craft but it seems that
teacher development is normally something that an instructor is left
to do or not to do on their own.&lt;/p&gt;
&lt;p&gt;
With this system, there&amp;#39;s absolutely no reason not to have a teaching
career path with the entry point being sufficient CS knowledge. I&amp;#39;d
prefer that plus some background in how to teach it but that&amp;#39;s likely
a bridge too far for now.&lt;/p&gt;
&lt;p&gt;
Even had I not been an experienced teacher, the biggest difference
between me with my Masters in CS and the PhD&amp;#39;s I worked with is that
they had super deep knowledge in some very narrow area of CS. This
meant that maybe I couldn&amp;#39;t teach a small handful of super specialized
400 level electives but in practice I could teach many of them and as
my education and experience was more of a generalist, I could
generally teach a wider swath of classes at the entry to mid level
than many super specialized researchers.&lt;/p&gt;
&lt;p&gt;
The PhD is nothing special, or maybe it is special but no more so than
someone who dedicated an equivalent number of years towards being a
great teacher, a great software engineer, or a great a lot of other
things.&lt;/p&gt;
&lt;p&gt;
Hopefully one day higher education will realize this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Low Level CS in HS</title>
      <link>https://cestlaz.github.io/post/low-level/</link>
      <pubDate>Tue, 19 Dec 2023 09:31:44 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/low-level/</guid>
      <description>&lt;p&gt;
There&amp;#39;s been discussion recently about current CS student&amp;#39;s knowledge,
or lack thereof of hardware. The discussion was spurred when &lt;a href=&#34;https://www.magesguild.io/the-decline-of-hardware-knowledge-in-the-era-of-cloud-native-compute/&#34;&gt;this&lt;/a&gt;
article made it&amp;#39;s round in the CS Ed communities. My friend and fellow
CS Ed Blogger Alfred Thompson gave his take &lt;a href=&#34;https://blog.acthompson.net/2023/12/how-much-hardware-knowledge-to-cs.html?spref=fb &#34;&gt;on his blog&lt;/a&gt;. I thought I&amp;#39;d
share mine here.&lt;/p&gt;
&lt;p&gt;
First, let&amp;#39;s get some definitions straight. The original article
wasn&amp;#39;t really talking about hardware. The author was really talking
about what I&amp;#39;d call &amp;#34;low level&amp;#34; computer and programming
concepts. Things like bit level operations, the internals of memory
management and in fact memory management altogether, and things like
interrupts and how system calls work.&lt;/p&gt;
&lt;p&gt;
When we&amp;#39;re talking hardware, we could be talking about a couple of
things. It could be Information Technology (IT) hardware - putting
together computers. Knowing interface standards like EIDE or the older
SCSI. Networking technologies. We could also be talking about things
that should be covered in robotics - wiring and programming an ATMEL, the
processor under the hood on an arduino directly to control a device
for example. Robotics, however, at the K12 level is usually more of an
intro programming class with physical output instead of merely visual
on a screen.&lt;/p&gt;
&lt;p&gt;
The question that arose was this: should any of these be covered in
K12?&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look at each in turn.&lt;/p&gt;
&lt;p&gt;
IT Hardware? Probably not, at least not across the board in all CS
classes. Building computers and wiring your own networks were big in
the 90s and turn of the century. Not so much anymore. You used to be
able to purchase components at a variety of places but now, vendors
have dwindled. At the same time, the market has consolidated and moved
more towards laptops or smaller - platforms students can&amp;#39;t easily work
on. On the other hand, this can be and should be a fun and great
elective.&lt;/p&gt;
&lt;p&gt;
Low level robotics type hardware? Also, not in required classes but
would be a great elective.&lt;/p&gt;
&lt;p&gt;
That brings us to the low level programming concepts. Once again, as
an elective this can be great. In addition to covering some of this in
the classes I designed at Stuy, I created and offered a System Level
programming class that covered a lot of this. It was popular among the
CS students and from what I was told, super worthwhile for those who
went on to study CS or a related field in college.&lt;/p&gt;
&lt;p&gt;
What about for everyone else?&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the question. On the one hand, time is very limited. If a
school offers or requires CS it might just be one semester or one
year. You can&amp;#39;t cover everything in that amount of time. Also, as
Alfred pointed out in his post, we don&amp;#39;t currently even have nearly
enough knowledgable K12 CS teachers to teach the basics.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d like to try to make a case though for including some of it.&lt;/p&gt;
&lt;p&gt;
Even though everyone uses computers these days, they can certainly be
intimidating and feel like magic. People have no idea how they work. I
joke with my students that if they unplug the keyboard quickly while
typing they can shake some characters out of the cable. Teaching some
low level CS concepts can demystify computers. Take away the
fear. Just as learning some programming and algorithms can demystify
the &amp;#34;magic&amp;#34; of recommendation systems and high level wonders, some low
level knowledge can demytify how these computer things work inthe
first place.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not talking about going all &lt;a href=&#34;https://www.nand2tetris.org/&#34;&gt;Nand to Tetris&lt;/a&gt;. I&amp;#39;m also not talking
about dropping in topics out of context. The College Board did this
famously with binary, decimal, and hex. Without context it&amp;#39;s
meaningless and worthless. Hunter, where I last taught did the same
thing. They required binary, decimal, and hex in their CS0 course. I
ignored it. The argument the professors gave was that the kids needed
it when they took their first systems/architecture course. I asked
them, &amp;#34;well, for all the students in all the other CS0 classes, they
did cover the topic, did it really help?&amp;#34; The answer was &amp;#34;no, they all
forgot and we had to reteach it.&amp;#34; So much for it being important in
CS0.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m talking about a unit where you can get far enough to understand
something memorable. I brought a bunch of HS students to a 45 minute
talk once explaining how solid state memory worked. These kids had
zero background and the speaker kept things at an informal level but
after the 45 minutes, those kids understood at a basic level, how a
flash drive stored information.&lt;/p&gt;
&lt;p&gt;
Another example is a unit developed for my intro course. The heavy
lifting was done by a colleague and friend of mine - I can&amp;#39;t take the
credit. The unit centered around a small assembly interpreter that he
designed and built a web emulator for. Kids learned some logic gates,
how you could do arithmetic and were also able to see how memory
worked. The kids got to look behind the curtain. Sure, their laptop
was a bazillion times more complicated but at their cores the same
things were happening.&lt;/p&gt;
&lt;p&gt;
Now, the rub comes with resources and bang for your buck. Can you
spend a couple of week on something like that? Do you have teachers
who know enough to do it? If you do it, what other topic(s) can&amp;#39;t you
cover.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;ve only got one semester with the kids, you&amp;#39;ve got to call your
shots. I can&amp;#39;t say that low level CS is the most important thing to
cover there but when there is time, I think it&amp;#39;s certainly
worthwhile. On the other hand, if you have a year or more with your
students, I&amp;#39;m pretty sure a creative teacher can come up with a way to
get the basics in.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching CS - How early and how often?</title>
      <link>https://cestlaz.github.io/post/cs-how-early/</link>
      <pubDate>Tue, 16 Aug 2022 15:38:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-how-early/</guid>
      <description>&lt;p&gt;
A big part of the CS4All movement has been making computer science
available at all grade levels. Of course that can mean many
things. Grade levels could be elementary, middle, and high school or
it can me k-2, 3-5, 6-8, 9-12 or maybe even every grade.&lt;/p&gt;
&lt;p&gt;
Does it mean required at every level or just an option?&lt;/p&gt;
&lt;p&gt;
This has led to many discussions and, at least from the ones I&amp;#39;ve
listened in on, the prevailing feeling from the CS side is all CS all
the time.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know if this should be the case. It&amp;#39;s important to think about
other factors - bang for your buck, budgets, student workload,
available faculty, what are the other requirements, and more.&lt;/p&gt;
&lt;p&gt;
This question also isn&amp;#39;t limited to computer science, or at least it
shouldn&amp;#39;t be. K12 schooling is still a zero sum game - there are only
so many minutes in a school day and while CS is important, so too are
most if not all of the other subjects and some, like art and music are
in danger or being left by the wayside at the expense of CS. Of
course, on the other hand, there are some subject that I feel are
already given too much time or the wrong amount.&lt;/p&gt;
&lt;p&gt;
That said, this post is about CS. We have neither the funds nor the
faculty to offer CS as a requirement in every grade but is it even
necessary? I don&amp;#39;t know. An important part of offering CS in K12 is so
that it&amp;#39;s on a student&amp;#39;s radar so they can consider studying more
after HS. This is particularly important with some colleges requiring
students apply as a CS major before even attending. Another side is to
give a student the base level knowledge that we feel every educated
person should have just as we seek to do this in biology, chemistry,
history and so on.&lt;/p&gt;
&lt;p&gt;
I know that we can accomplish these goals with a single class
requirement and two years of offerings overall . How do I know this?
Because we did this at Stuy. Doing this requires two basic things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A well taught, well designed intro course that exposes students to
the subject.&lt;/li&gt;
&lt;li&gt;Covering enough material deeply enough so that students are well
prepared for the next steps in college should a student take them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The required intro gives the base level that everyone should have and
a more advanced follow up elective sets students up for success if
they want more in college. Truth be told the required course should
really be a year rather than a semester but we still made it work.&lt;/p&gt;
&lt;p&gt;
This fits well in the Stuyvesant program and given New York graduation
requirements adding a single required course or even a required year
fits pretty easily and adding electives also isn&amp;#39;t a problem.&lt;/p&gt;
&lt;p&gt;
If you can&amp;#39;t offer or require more then this can be enough. The
question, though, is - &amp;#34;is it ideal?&amp;#34; I&amp;#39;d be hard-pressed to say that
a school should require more than a year of CS. If you do it right and
follow up with electives a year is plenty. If you don&amp;#39;t do it right,
well, then multiple years of bad CS isn&amp;#39;t any better than 1. &lt;/p&gt;
&lt;p&gt;
What about earlier grades? Middle school? Standalone CS is nice but is
it necessary or are we better off embedding CS into other classes? I
haven&amp;#39;t landed on an opinion on this but I do know that we&amp;#39;ve had a
few middle school teachers graduate from my State Certification
Program and I&amp;#39;d love to get their opinions over the next few years. 
As a general statement, I think it&amp;#39;s safe to say that if you can fit
in some meaningful CS in middle school that would be great but if I
had a choice to either require it in middle school or in high school,
I&amp;#39;d opt for HS. Middle school is too far from college and work. Why
would I say this? Because of what I&amp;#39;ve noticed. There were periods of
time where CS, or at least programming or web dev were introduced in a
lot of Stuy&amp;#39;s feeder schools and more often than not, when I surveyed
students about past experiences they either barely remembered them
(wait, I think I did something like making a web page in 7th grade…)
or in any event based on my surveys, it made little difference towards
either success in High School CS nor in interest in doing more CS.&lt;/p&gt;
&lt;p&gt;
Finally, the primary grades. When the whole CSforAll thing got started
I noted that a lot of what we&amp;#39;d see in the elementary schools would be
a rebranding of stuff that already being done in schools that can
afford it - logic, problem solving, algorithms etc and also a
relabeling of already taught concepts using CS or CT vocabulary. This
is all good stuff and since it&amp;#39;s more foundational it&amp;#39;s probably
pretty important. Of course, when schools and teachers had the freedom
and budget, this was already happening prior to the CS movement even
if we didn&amp;#39;t call it CS.&lt;/p&gt;
&lt;p&gt;
So, do we need CS at all levels? Probably not. Would it be nice? Sure
but we&amp;#39;re not serving kids if we&amp;#39;re just CS zealots. We have to look
at the big picture and the whole student. If I ran a school system and
could only afford CS at one level I&amp;#39;d go high school as I outlined
above. If I could do two, I&amp;#39;d hop down to elementary school and then
fill in middle last. Of course, that&amp;#39;s just me.&lt;/p&gt;
&lt;p&gt;
Of course non of what I&amp;#39;ve said talks at all about digital citizenship
or fluency but that&amp;#39;s for another day.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teacher Preparation - know what&#39;s under the hood</title>
      <link>https://cestlaz.github.io/post/arraylists-under-the-hood/</link>
      <pubDate>Tue, 12 Jul 2022 11:52:31 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/arraylists-under-the-hood/</guid>
      <description>&lt;p&gt;
Yesterday was the last day on our first course for teacher
certification. A programming course similar to a college CS1 - think
APCS-A. We&amp;#39;re now moving to a data structures course.&lt;/p&gt;
&lt;p&gt;
There are a few reasons for this. First, it&amp;#39;s depth of knowledge. The
most advanced class a high school student will normally take would be
APCS-A. Data structures is the next course. A teacher should have
studied a topic to a greater depth than the students. We fill in the
breadth in our topics course. Now, this means that our elementary
school candidates need data structures and I&amp;#39;m the first one who&amp;#39;ll
agree that elementary school teachers don&amp;#39;t need the same depth of
knowledge as a high school teacher but New York State in it&amp;#39;s infinite
wisdom decreed that their CS Certification would be K12 - same thing
for all teachers from Kindergarten through the end of high school.&lt;/p&gt;
&lt;p&gt;
A second reason, and this is a big one, is that studying data
structures is a computer scientist or programmers first opportunity to
understand what&amp;#39;s going on under the hood. Why is this important?
Well, to me, it&amp;#39;s one of the differences between what, for lack of a
better word I&amp;#39;ll call a coder or programmer with a computer scientist.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not talking about a computer scientist as a college employed
researcher, I&amp;#39;m using the term as someone who problem solves and
creates solutions using the tools and techniques of computer
science. For a coder / programmer, I mean someone who creates working
programs but doesn&amp;#39;t think deeply about the solution but rather uses
built in constructs, libraries and packages blindly.&lt;/p&gt;
&lt;p&gt;
This is not to say that someone employed as a coder can&amp;#39;t be or isn&amp;#39;t by my
definition, a computer scientist, they certainly can. &lt;/p&gt;
&lt;p&gt;
Back to the point. We closed out the programming class learning about
classes and implementing something that we called a SuperArray,
basically a cut down Java Arraylist.&lt;/p&gt;
&lt;p&gt;
On day one of data structures we went over the ArrayList. This is our
usual strategy - implement something and then you learn about and can
use the built in one.&lt;/p&gt;
&lt;p&gt;
A poorly trained programmer will just learn about the ArrayList and
then use it blindly. But by first exploring something
like the SuperArray, the computer scientist has deeper knowledge.&lt;/p&gt;
&lt;p&gt;
An ArrayList has a number of nice features. You can keep adding to
them paying little attention to size, you can delete from the middle,
insert anywhere and more. All these operations take time. If you try
to remove an element from an ArrayList, the ArrayList has to shift all
the elements past the element in question down. If you want to insert
at the front, you&amp;#39;ve got to shift everything down to make room. Adding
something to the end, however, takes no time at all unless the
underlying array is full, in which case, more work is to be done.&lt;/p&gt;
&lt;p&gt;
When writing the SuperArray, students had to write the code necessary to
do all of these operations so we can discuss the good, the bad, and
the ugly.&lt;/p&gt;
&lt;p&gt;
If you are using an ArrayList and you blindly do all your insertions
at the front, you&amp;#39;re going to have horrible performance but if you
always add to the end, things will be much faster. The coder doesn&amp;#39;t
understand this but the computer scientist does.&lt;/p&gt;
&lt;p&gt;
When we do LinkedLists next week we can dig deeper on these ideas and
even more when we get to sorting and searching.&lt;/p&gt;
&lt;p&gt;
The bottom line is that even if one doesn&amp;#39;t write an entire ArrayList,
exploring under the hood can arm a coder (or teacher) so that they
make wise choices instead of treating every problem like a nail.&lt;/p&gt;
&lt;p&gt;
A side added bonus on this specific SuperArary / ArrayList
project is that when you&amp;#39;re done you can actually look at the Java
ArrayList code. The class won&amp;#39;t understand all of it but they should
be able to get the gist and they&amp;#39;ll see that the Java code is very
similar to what the students wrote. This can be very empowering.&lt;/p&gt;
&lt;p&gt;
After this data structures course, the teachers may never again write
the code for a linked list, implement a hash table or tree or manually
sort a data set but the underlying knowledge will help them understand
and teach all sorts of computer science concepts. A web page is
represented in a a tree, a network is a graph. Understanding hash
tables and search trees are a gateway to databases.&lt;/p&gt;
&lt;p&gt;
Sometimes the specific implementations one studies are never used
again but for teachers, the underlying concepts can be game changes
for their students.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hunter College CS Teacher Certification Summer 2021</title>
      <link>https://cestlaz.github.io/post/teacher-cert-cohort-2/</link>
      <pubDate>Mon, 02 Aug 2021 08:58:21 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-cohort-2/</guid>
      <description>&lt;p&gt;
Last Friday concluded the summer portion of Hunter&amp;#39;s CS Teacher
Certification program. It was an intense month. All day every day from
June 28th through July 30. On the one hand between &lt;a href=&#34;https://cestlaz.github.io/post/no-csta2021/&#34;&gt;burnout and covid
fatigue&lt;/a&gt; it was a tough month and I&amp;#39;m dealing with some much needed
recovery this week. On the other hand, working with JonAlf, Topher,
new team member Genady along with around 25 amazing teachers and
teacher candidates made it a highlight of the year.&lt;/p&gt;
&lt;p&gt;
last year, the cohort was entirely in service teachers. This year we
added three Masters students into the mix. I know we had the states
first certified CS teachers with last years cohort but I&amp;#39;m also
wondering if we&amp;#39;ll have the state&amp;#39;s first newly minted teachers with a
Masters in CS Ed when they finish come May.&lt;/p&gt;
&lt;p&gt;
Hopefully, this years cohort members are all getting some rest and
relaxation through August and then we&amp;#39;ll kick off again with the
school year when they&amp;#39;ll complete the program in Fall and Spring.&lt;/p&gt;
&lt;p&gt;
There were some changes from last time around. This time, we were only
able to run 3 classes during the summer - Programming, Data
Structures, and Methods 1. Last year we ran four - these three plus
topics in CS. It was nice getting 12 credits done all at once but the
switch to 3 classes was probably a good thing. A less good thing
though was that on the state&amp;#39;s insistence we had to teach the courses
independently as opposed to in an integrated fashion. The idea was
that this way, people wouldn&amp;#39;t have to take all three but the reality
was that we had a cohort moving through the program as one.&lt;/p&gt;
&lt;p&gt;
While for the most part, the programming and data structures should be
independent we lost a good deal of value not being able to integrate
methods in at the same time. Still overall, based on our perceptions
and student ratings, things worked well.&lt;/p&gt;
&lt;p&gt;
In the fall the cohort will continue with Ethics and Computer Science
along with Curriculum Development and then two final classes in the
Spring.&lt;/p&gt;
&lt;p&gt;
This will give us close to 50 certified teachers in NY state which,
while not close to enough is a good start. We&amp;#39;re hoping to more than
double that with next years cohort.&lt;/p&gt;
&lt;p&gt;
The biggest obstacle we have is that our program requires some
fundamental knowledge in a text based programming language and as it
turns out, very few teachers currently teaching CS in NYC have
that. To help address this, we&amp;#39;ll start offering free workshops in the
Fall to get current teachers up to speed so they&amp;#39;ll be more than ready
for our program come cohort three.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re a CS teacher in NYC, keep an eye out for those when the
school year starts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>They&#39;re all good first programming languages ;-)</title>
      <link>https://cestlaz.github.io/post/first-language/</link>
      <pubDate>Fri, 25 Jun 2021 10:06:36 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/first-language/</guid>
      <description>&lt;p&gt;
There&amp;#39;s been a lot of chatter recently about the first programming
language to teach. First, I read a Facebook thread focussing on Java,
C and C++ and then, presumably unrelated, Mark Guzdial posted &lt;a href=&#34;https://cacm.acm.org/blogs/blog-cacm/253393-why-did-we-ever-think-the-first-programming-language-didnt-matter/fulltext&#34;&gt;this&lt;/a&gt;
which lead to another Facebook discussing and then yesterday I noticed
a Twitter thread started by someone in the Bootcamp world asking
people what their first language was which resulted in answers ranging
from JS to PHP to Perl to a bunch of others.&lt;/p&gt;
&lt;p&gt;
A question Mark said he was thinking about recently was &amp;#34;Why did
anyone ever think that the first programming language didn’t matter?&amp;#34;&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t think people were thinking it didn&amp;#39;t matter but it was rather
like Anton Ego&amp;#39;s commenting on Gusteu&amp;#39;s &amp;#34;Anyone can cook.&amp;#34;&lt;/p&gt;
&lt;img width=&#34;300&#34; src=&#34;https://1.bp.blogspot.com/-lS9ekZSoIxw/XRkKDhIOO5I/AAAAAAAAd9M/H-Bjekcvh4IH_86RZlFcAikZvbqBY7uuwCLcBGAs/s1600/anyone-can-cook-book.jpg&#34;&gt;
&lt;p&gt;
It&amp;#39;s not that anyone can cook but rather great cooking can come from
anywhere. It&amp;#39;s not that the language doesn&amp;#39;t matter but rather any
language (or maybe most any language) &lt;strong&gt;can&lt;/strong&gt; be used as a first
language under the right set of circumstances.&lt;/p&gt;
&lt;p&gt;
All to often the argument goes like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&amp;#34;I start my kids with C&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;But that&amp;#39;s no good - pointers - that&amp;#39;s why I use Javascript - it&amp;#39;s practical&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;But the development tools are lousy for beginners, not to mention the tool chain&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;Yeah but it&amp;#39;s ubiquitous, anyway how about Java&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;Too much overhead. Maybe scratch&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;No way, the kids will think it&amp;#39;s inauthentic.&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;I know, apl!!!!!!!!&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;DEAL!!!!&amp;#34;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Most of the discussion focuses on the language. Maybe on the related
toolset and ecosystem. A few of us though, have been pushing the fact
that there&amp;#39;s more to the equation. Teacher knowledge, comfort, and
passion is a HUGE part of the equation. So is the student level and
background. Mark raised an important factor in his post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The first programming language is particularly important when we think
about programming for other-than-CS majors. Students want to learn
what’s valued in their desired community of practice. If a student
wants to become a data scientist, R or Python makes a lot more sense
than learning C.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is probably more relevant at the college level than K12 but still
important to consider for the earlier grades as well. I say consider
though because, as always, the real answer is &amp;#34;it depends.&amp;#34; Back when
Bioinformatics started to get hot in the &amp;#39;90s I seem to recall Perl
being the flavor of choice. Those of you who like me battled with Perl
and its &amp;#34;write once read never&amp;#34; approach to programming would agree
that even if it was the Lingua Franca of bioinformatics, I don&amp;#39;t know
if I would take beginners down a path so fraught with peril.&lt;/p&gt;
&lt;p&gt;
The truth is that the language does matter but there&amp;#39;s a lot of
latitude. Probably more for a general purpose programming intro
rather than for a specific discipline but even then. All things being
equal, I&amp;#39;d probably say that teacher comfort might be the most
important one to start with but that only holds when a teacher starts
teaching a class. I think it&amp;#39;s beholden on the teacher to then explore
alternatives and if another language makes more sense, become familiar
with it.&lt;/p&gt;
&lt;p&gt;
In any event, that&amp;#39;s my two cents. This conversation comes around a
couple of times a year. A couple of rounds ago I think it revolved
around Javascript so, we&amp;#39;re talking language. Last time, I and others
brought up teachers, their backgrounds and comfort levels. Now Mark&amp;#39;s
bringing another dimension. It&amp;#39;s nice to see the dialog evolving.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>But we don&#39;t have enough teachers!!</title>
      <link>https://cestlaz.github.io/post/enough-teachers/</link>
      <pubDate>Mon, 14 Jun 2021 07:55:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/enough-teachers/</guid>
      <description>&lt;p&gt;
A common refrain against requiring CS in our K12 schools is that we
don&amp;#39;t have the teachers and we won&amp;#39;t any time soon. Sure, we don&amp;#39;t
right now but we won&amp;#39;t if we don&amp;#39;t do something about it.&lt;/p&gt;
&lt;img width=&#34;300&#34; src=&#34;https://s-media-cache-ak0.pinimg.com/736x/16/71/5c/16715cc71bd6c28da0b32f24afec5045--simpsons-quotes-los-simpsons.jpg&#34;&gt;
&lt;p&gt;
The question to ask is &amp;#34;how long will it take&amp;#34; and &amp;#34;how do we get
there?&amp;#34;&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look at New York City. We&amp;#39;ve got approximately 1,000,000
students in our public schools. Let&amp;#39;s say that&amp;#39;s grades 1
to 12. That&amp;#39;s 83333 per grade. Let&amp;#39;s take one particular grade and see
how many classes. At 34 students per class we get 2450 classes. Since
teachers typically teach five classes that means to cover 1 class for
every student in one particular grade we&amp;#39;ll need about 500 teachers to
cover a full year class. 250 if the class is only one semester. &lt;/p&gt;
&lt;p&gt;
This if, of course, just back of the envelope calculating and we&amp;#39;d
need a good deal more to really do justice to teaching CS in K12 but
500 sounds like a reasonable critical mass to say &amp;#34;we&amp;#39;re teaching CS.&amp;#34;&lt;/p&gt;
&lt;p&gt;
How long until we can get there?&lt;/p&gt;
&lt;p&gt;
At Hunter we started our advanced certificate program a year
ago. The cert program is specifically for teachers licensed in another
area seeking to add the New York State CS credential. Our first cohort
graduated 21 and I can proudly say they&amp;#39;re all very well prepared to
teach CS in K12. They know their content and how to teach it. We&amp;#39;re
starting another batch in two weeks and a third cohort next summer. By
June 2023 we should have between 60 and 100 teachers certified. That&amp;#39;s
not bad. We&amp;#39;ll have a core group of teacher leaders three years from
our start. &lt;/p&gt;
&lt;p&gt;
How are we doing this? What&amp;#39;s the incentive for current teachers to
get this new certification? It&amp;#39;s an opportunity to really learn some
CS and how to teach it. All the training and PD based models just
don&amp;#39;t cut it long term. On the other hand, it costs a pretty penny -
21 graduate credits. True, those credits can be applied to salary
differentials but still. Also, while the state could just flat out
require the certification but they&amp;#39;ve put in a generous ramp up -
teachers will need the credential but not for a few year.&lt;/p&gt;
&lt;p&gt;
The biggest reason we&amp;#39;ve been able to get these teachers in is the
generosity of the New York Tech community. We&amp;#39;ve been able to provide
financial support to these teachers looking to be our leaders moving
forward. &lt;/p&gt;
&lt;p&gt;
Going with that, we have 4 students currently in our Masters program
with another 6 or so slated to start in the Fall and that&amp;#39;s with zero
advertising and outreach. I expect that in a couple of years, the
demand for the certificate program will wane while it accelerates for
the masters program. &lt;/p&gt;
&lt;p&gt;
We&amp;#39;re not going to have all the teachers we need in three years or
even in five but in three we&amp;#39;ll have a solid core. As other
certification programs come online the city will increase it&amp;#39;s teacher
training capacity and as we close in on 2026 when CS4All will expect
all schools to offer CS, we&amp;#39;ll have a good number of qualified
teachers to fill the need.&lt;/p&gt;
&lt;p&gt;
Sure, it&amp;#39;ll take a decade or longer to finish the job but you&amp;#39;ve got
to start with a plan and a vision and lots of support. At least in NYC
we&amp;#39;ve got all three.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS Ed Podcast 2 - Dan Garcia on test creation</title>
      <link>https://cestlaz.github.io/post/cs-ed-podcast-2/</link>
      <pubDate>Thu, 13 Feb 2020 08:41:21 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ed-podcast-2/</guid>
      <description>
&lt;p&gt;
Episode 2 of the &lt;a href=&#34;https://sites.duke.edu/csedpodcast/&#34;&gt;CS Ed podcast&lt;/a&gt; had Dan Garcia talk about
exam creation. &lt;/p&gt;
&lt;p&gt;
This wasn&amp;#39;t a podcast about the value of exams - in class, high stakes
or otherwise. In fact Dan says in the podcast it would be great to &amp;#34;get grades out of
the equation. Grades are gonna be an impediment to learning.&amp;#34; But
recognizes that we have not say in this most of the time (and I&amp;#39;ll add
that though I agree grades can and do perform a function) so we should
be creative in terms of assessment.&lt;/p&gt;
&lt;p&gt;
Dan hit on a lot of important points and there&amp;#39;s no way
I can weave them into a sensible narrative so I&amp;#39;ll just hit a bunch of
points and riff from there.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Multiple choice.
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Dan started right out front saying that he&amp;#39;s come around to being ok
or maybe even liking multiple choice  having referenced the ability
top make &amp;#34;good distractors.&amp;#34;&lt;/p&gt;
&lt;p&gt;
This is something that I think I&amp;#39;ll never agree with. On the one hand,
there is the idea of multiple guess but what really gets me is that
multiple choice questions, by definition, are gotcha questions. You&amp;#39;re
supposed to have distractors to pull you away from the right path. To
make a mistaken answer seem ok. I hate gotcha questions. Besides,
halfway decent multiple choice questions are really hard to write. &lt;/p&gt;
&lt;p&gt;
To me, MC questions are really a sometimes necessary tool to make up
for the fact that teachers are overworked and never have enough time
to grade. This might make them a necessary evil but it doesn&amp;#39;t make
them good. We might have to resort to them if we&amp;#39;re &amp;#34;teaching&amp;#34; a class
of hundreds or perhaps thousands  but we shouldn&amp;#39;t have classes
anywhere near that size. &lt;/p&gt;
&lt;p&gt;
Another problem with MC is that multiple choice tests seem to
frequently test speed rather than knowledge. APCS-A is a good example
of this. You have 90 minutes to answer 40 questions. That&amp;#39;s a bit over
2 minutes per question. That&amp;#39;s a race not an assessment. &lt;/p&gt;
&lt;p&gt;
Finally, I find multiple choice questions hard to write and time
consuming to typeset and format. I guess if I were better at the
distractors this might not be the case but a short
answer version of a MC question is always easier for me to write and
not much harder to grade.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Test creation
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Half a day. Twelve hours. That&amp;#39;s how long Dan says it takes him to
make a test. That sounds about right. There&amp;#39;s no two ways about
it. Creating a good exam is hard work. Creating a bad one is easy and
quick but that&amp;#39;s not a good answer.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s think about this for a minute. A college professor might teach
one or two classes a semester. A college lecturer three, maybe 4. A
high school teacher teaches 5 classes. Typically two or three
different subjects. They basically get 40 minutes at work a day to
prep and that includes EVERYTHING - lesson planning, grading, test
creation, working with students. The whole kit and caboodle. Even with
two preps rather than three that&amp;#39;s an additional 24 hours just to
create those two tests. More since you&amp;#39;ll need multiple versions of
each. &lt;/p&gt;
&lt;p&gt;
Of course we can mitigate this a it by reusing and modifying questions
from old exams and sharing with colleagues but writing exams is a bear. &lt;/p&gt;
&lt;p&gt;
It&amp;#39;s no wonder teachers turn to multiple choice test banks.&lt;/p&gt;
&lt;p&gt;
Really glad Dan spent time on this as teachers have to realize that
it&amp;#39;s not just them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
How long is too long?
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I frequently struggle with test duration. It sounds like it&amp;#39;s a common
problem. Dan has his TAs test the tests hoping they can do it in one
sixth the students time. He found, though that his slowest TAs might
take one third of the allocated time.&lt;/p&gt;
&lt;p&gt;
When I started, I heard ratios from math teachers ranging from
students take twice the time I would on my exams up to five times
longer. &lt;/p&gt;
&lt;p&gt;
It&amp;#39;s hard to get it right but it&amp;#39;s important that tests are tests of
knowledge and ability not speed. At Stuy where class periods were 43
minutes I&amp;#39;d try for tests that took the typical student 33 - 35
minutes. Just enough time to go over the exam. You might ace the exam,
you might fail but time wouldn&amp;#39;t be the issue.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Content
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
This was a big one. Dan talks about students expectations - are tests
cumulative or just since the last unit. Making sure test content is
proportional to lesson content. Watching out for test morale - letting
kids know hard questions are hard, test flow and much more. Not too
much to say here other than if you haven&amp;#39;t listen to the podcast.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Backstory
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
One content point that I do want to drill down on is Dan&amp;#39;s stating
that we sometimes give too much backstory on questions. &amp;#34;If you want
them to sort a list, make them sort a list! You don’t have to tell a
story about the list….&amp;#34; Too often tests are races and even when they
aren&amp;#39;t a student has to first read the question, understand it, make
sure there are no gotchas, formulate and write down a solution. Giving
a complex backstory from which the students have to glean the real
question in a timed high pressure environment is just too much. There
are other places where you can ask a general question with a big back
story and have students solve the poblem.&lt;/p&gt;
&lt;p&gt;
This made me think of technical interviews which are all
backstory. The truth though is that most kids solve them by pattern
matching. They prep by doing similar problems and look for key
phrases. Have unlimited memory and need fast access - there&amp;#39;s probably
a hash table involved. Something have an easy solution but it&amp;#39;s too
slow - think recurison. Recursion is obvious but too slow - dynamic
programming. It&amp;#39;s a &amp;#34;have I seen this question before&amp;#34; more so than a
real test of a potential employees ability.&lt;/p&gt;
&lt;p&gt;
The other thing it made me think is that while I very much agree with
Dan, it flies  in the face of what teachers have been forced to deal
with in the last couple of decades. It&amp;#39;s all about the word problem
where the kid must sleuth out the question. So many high stakes exams
are as much reading exams as they are content exams. I&amp;#39;m not even
going to get into how this affects non English speakers but let&amp;#39;s just
say this is a real issue.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Tests on computers and other test taking formats
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Towards the end, Dan talks about having an on-computer part of an
exam. I like having the students do live on computer exams but they
also have their issues. I&amp;#39;m not so concerned about cheating. I give
them the resources they can use and truth be told, the end results
don&amp;#39;t differ much from when I&amp;#39;ve used paper exams or other
assessments. I am always concerned about a computer breaking but
fortunately that hasn&amp;#39;t really been a problem.&lt;/p&gt;
&lt;p&gt;
What has been a problem however is the fact that speed can become an
issue. Some kids know how to type others don&amp;#39;t. This can be a HUGE
advantage in a CS0 or CS1 class. When you&amp;#39;re thinking about what
letter to type you&amp;#39;re not thinking about the problem and in general
beginners are very slow. I always tell my second year students to look
at what they can do as an overnight assignment. They realize that
what&amp;#39;s now overnight was a large semester project back in their first
year. This all means that you really have to be careful about the
length of a computer based test. &lt;/p&gt;
&lt;p&gt;
Another thing Dan mentioned was giving group tests. Students would
work in teams. He noted that in the group, The collective score was
always higher than the top individual score. I get the idea and it&amp;#39;s
probably true trend wise but can&amp;#39;t be universally true if your tests
are actually compatible. Given a fair test, surely some students can
ace it in which case the group can only equal the top scorer.&lt;/p&gt;
&lt;p&gt;
This group test reminded me of cooperative learning which was all the
rage back in the day. Of course cooperative learning is no longer &amp;#34;it&amp;#34;
but while it never was the silver bullet it is notable that it had
some good ideas and it sounds like Dan is implementing some of them
albeit without the same name.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
Thoughts on grading
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I&amp;#39;ll disagree here with Dan&amp;#39;s contention that we should all use
Gradescope. I&amp;#39;ve come out against autograders before so I&amp;#39;ll just
summarize here. I&amp;#39;m not entirely against autograders. They&amp;#39;re great
for rudimentary answers and can also provide a level of instant
student feedback. The flip side is that in order to get to know your
students you have to look at their work. You might not learn much from
multiple choice answers but you will if you look at code they&amp;#39;ve
written out or other long form answers. I get that you can&amp;#39;t do this
with huge classes but again, I&amp;#39;ll say we shouldn&amp;#39;t have huge
classes. To use an autograder as a necessity is one thing but to say
it&amp;#39;s better rather than just a time save is another. Now, you can use
autograding tools effectively to cull and sort and draw your attention
to things to look at by hand and that&amp;#39;s a plus but I haven&amp;#39;t seen too
much of that in current tools.&lt;/p&gt;
&lt;p&gt;
Rather than an autograder, I try to use testing frameworks on short
answers  and to provide instant feedback. Specifically I use &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt;
for C++ and &lt;a href=&#34;https://docs.python.org/2/library/unittest.html&#34;&gt;unittest&lt;/a&gt; for Python. They provide students with instant
answer feedback while at the same time introducing them to practical
software engineering sensibilities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
Some of my memorable tests
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I thought here I&amp;#39;d share a few exams I&amp;#39;ve given that I found
memorable.&lt;/p&gt;
&lt;p&gt;
First was a five question long answer exam. I gave it to my kids
telling them &amp;#34;Answer three of the five questions. You can select any
three but when grading, I will only grade quesitons 1, 2 and 4.&amp;#34; Some
students had some real issues with this. Led to an interesting
discussion as to about choice and consequences. I didn&amp;#39;t do this in
order to mess with the kids. It was back in the day when you had to
send exams to the central copy room to be copied and needed about a
weeks lead time. I didn&amp;#39;t know the direction the class would take so
wrote questions 3,4, and 5 to hedge my bets. By the time we got to the
test, question 4 made sense while 3 and 5 would have been really super
hard.&lt;/p&gt;
&lt;p&gt;
A second test, well quiz I gave once was a single question that was
something like this: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;take the next 20 minutes to share with me your thoughts on cellular
automata. Consider why we studied it. Was it interesting? Why, why
not? What did you learn?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Some students absolutely loved it. Others loathed it. The freedom gave
some kids license to give me super creative interesting answers. Some
really needed more constraints and had tremendous difficulty.&lt;/p&gt;
&lt;p&gt;
Finally, I once gave a semi-gag test. The instructions on the front
said that you had to proceed in order. You WERE NOT TO look ahead. It
was a mix of real CS questions and goof questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sprint up to the blackboard, draw a smiley on the board, then return
to your seat and go on to the next question.&lt;/li&gt;
&lt;li&gt;Stand up, do 10 jumping jacks, sit and proceed to the next question&lt;/li&gt;
&lt;li&gt;Stand up and raise your right hand. When you see someone else with
their hand raised, walk to them and give them a high five. Then
return to your seat nad proceed to the next question.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last page had an answer key and instructed the students to grade
themselves before handing it in.&lt;/p&gt;
&lt;p&gt;
Overall the class enjoyed the exam.&lt;/p&gt;
&lt;p&gt;
What was interesting, was that after class a few student appoached me
either in person or via email saying that they felt really bad but
they looked at the end of the exam when it started so saw the
answers. They felt they cheated and wanted to let me know and
understood if they got  zeros (which of course, I didn&amp;#39;t give them). &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
Final thoughts
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Wow. That was long but I said before that there was a lot to unpack. &lt;/p&gt;
&lt;p&gt;
I left a bunch out of this and it&amp;#39;s already a really long post. I
might write more on test creation and administration at some other
point but the takeaway from this is listen to the &lt;a href=&#34;https://sites.duke.edu/csedpodcast/&#34;&gt;podcast&lt;/a&gt; if you
haven&amp;#39;t already.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Riffing on the CS Ed Podcast - Episode 1 - David Malan</title>
      <link>https://cestlaz.github.io/post/cs-ed-podcast-1/</link>
      <pubDate>Thu, 06 Feb 2020 16:42:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ed-podcast-1/</guid>
      <description>
&lt;p&gt;
I saw a couple of posts the other day about the &lt;a href=&#34;https://sites.duke.edu/csedpodcast/&#34;&gt;CS Ed Podcast&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Kristin Stephens-Martinez of Duke interviewed (or will interview) six
CS educators on a variety of topics. There are four posted so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;David Malan&lt;/li&gt;
&lt;li&gt;Dan Garcia&lt;/li&gt;
&lt;li&gt;Amy Ko&lt;/li&gt;
&lt;li&gt;Mark Guzdial&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before I started I thought I&amp;#39;d listen to a few and then share some
thoughts but I found so much to unpack  in the second episode where
Dan talks about testing that I decided to share my thoughts on the
first episode, then Dan&amp;#39;s and then see if find anything to comment on
in episodes three and beyond.&lt;/p&gt;
&lt;p&gt;
All the podcasts are available via the link above and transcripts are
also provided - a nice touch for a number of reasons. It not only
increases accessibility, it also makes the episodes potentially more
discoverable via search engine and certainly more searchable. For me it was
helpful as I only listen to podcasts while working out - running or in
the gym so being able to search a text page to double check what I
thought I heard while struggling to finish mile six or seven was a
boon.&lt;/p&gt;
&lt;p&gt;
In episode 1, Stephens-Martinez interviewed David Malan of CS50
fame. The interview was mostly about tools used in CS50.&lt;/p&gt;
&lt;p&gt;
Even though I&amp;#39;m not going to comment on CS50 as it wasn&amp;#39;t the direct
topic of the interview I feel I should share my bias in case any comes
through. I&amp;#39;m not a fan of CS50. This is an opinion I formed by talking
to a number of my former students who have taken/TA&amp;#39;d CS50 and/or
courses that follow it combined with my own thoughts and beliefs about
CS Education. That said, I have no first hand exposure to Harvard&amp;#39;s
CS50 nor have I ever met Mr. Malan so I reserve the right to change my
point of view at some point in the future.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Summary stats
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Did I enjoy the podcast? Yes - I&amp;#39;d give it 4/5 on the making running
bearable scale. The interview flowed well and a lot of information
was shared. &lt;/li&gt;
&lt;li&gt;Did I learn anything? Honestly, no. This was probably due to the
topic but more on that below.&lt;/li&gt;
&lt;li&gt;Should you listen? Yes. Again, more below.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Thoughts
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
A theme of the podcast was that Malan wants his students to be exposed
to and end up using real tools but uses the CS50 tools to scaffold
their way. Not having a huge amount of exposure I won&amp;#39;t comment on how
well this works but it&amp;#39;s philosophically similar to my beliefs where I
start my beginners in a simplified environment like Thonny for Python
and have them &amp;#34;graduate&amp;#34; up to a more full featured yet less forgiving
editor. &lt;/p&gt;
&lt;p&gt;
One of the tools they talked about was &lt;a href=&#34;https://github.com/cs50/help50&#34;&gt;help50&lt;/a&gt; - a command line tool to
improve on error messages (there&amp;#39;s also a web interface
availabe). Instead of typing &lt;code&gt;gcc myfile.c&lt;/code&gt; students would type
&lt;code&gt;hepl50 gcc myfile.c&lt;/code&gt; and instead of getting just the cryptic error
message you&amp;#39;d also get an improved message. In my short time playing
with it I couldn&amp;#39;t actually get a better error but I only played with
it for a few minutes. &lt;/p&gt;
&lt;p&gt;
I like the idea of sharing both the original error message as well as
the improved one but can&amp;#39;t really comment further. What I would have
loved to hear, however was how they transition the kids first to use
the tool and then to grow out of it. I&amp;#39;d also be curious to see if
there were differences between adoption of  and graduation from the
tool as well as it&amp;#39;s effectiveness for the Harvard population where
everyone is pre-selected to be high performing in terms of class
performance vs an institution that takes all comers. &lt;/p&gt;
&lt;p&gt;
Another tool I liked was &lt;a href=&#34;https://cs50.readthedocs.io/style50/&#34;&gt;style50&lt;/a&gt; which tells you if and how your code
violates coding standards but doesn&amp;#39;t automatically fix it.&lt;/p&gt;
&lt;p&gt;
This is something I show my classes just using our editors style
checkers. I have Emacs set up to give me a red tick when I violate
style but only says what&amp;#39;s wrong when I move the cursor over and it
doesn&amp;#39;t auto correct. &lt;/p&gt;
&lt;p&gt;
I like this as it raises student awareness but they actually have to
make the change and learn to either code in an approved style or make
a conscious decision to violate style.&lt;/p&gt;
&lt;p&gt;
For me, the missing part of the interview was the &amp;#34;how.&amp;#34; How do you
get the students to adopt the tool and how do you get them to outgrow
them. &lt;/p&gt;
&lt;p&gt;
At the end, podcasts get to share something from tech that they find
cool and Mr. Malan shared containers - Docker images as an
example. The idea that you can package something for students and know
that they all get the same package with the same versions of all the
required tools. That seems to make sense but I think there&amp;#39;s another
side, a downside  to containers both in terms of using them in classes
and in terms of the direction we&amp;#39;re going with containers in tech. All
of that though is a topic for another day.&lt;/p&gt;
&lt;p&gt;
The podcast also covered other tools and if you haven&amp;#39;t listened yet
you should. &lt;/p&gt;
&lt;p&gt;
As I found a lot of rich material in Dan&amp;#39;s interview I&amp;#39;ll almost
certainly write something about that. Also probably on Amy&amp;#39;s about
debugging. Spoiler alert - both are worth listening to. Dan&amp;#39;s runs
about 40 minutes and Amy&amp;#39;s 24. I haven&amp;#39;t listened to Mark&amp;#39;s yet but
expect that to be worth our time as well.&lt;/p&gt;
&lt;p&gt;
One thing I do want to point out is that all six interviews for this
series are of college professors - no K12 teachers. Not sure why that
decision was made but I found it to be interesting. Anyone who knows
me is aware that I&amp;#39;m much more of a teacher as craftsman guy rather
than a &amp;#34;the research says&amp;#34; guy so I have my bias but regardless, I
think that interviewing a professor, a high school teacher, and an
early grade teacher could give some very interesting and contrasting
perspectives.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Lesson and project inspiration from old BSD games</title>
      <link>https://cestlaz.github.io/post/bsdgames/</link>
      <pubDate>Fri, 22 Nov 2019 13:55:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/bsdgames/</guid>
      <description>&lt;p&gt;
When I was writing the &lt;a href=&#34;https://cestlaz.github.io/post/i-speak-jive/&#34;&gt;I Speak Jive&lt;/a&gt; post, the first thing I had to do
was find those old programs. It turned out to be harder than I
thought. I found online versions but it took a while to find &lt;a href=&#34;https://github.com/hyperrealm/talkfilters&#34;&gt;this&lt;/a&gt;
GitHub repo.&lt;/p&gt;
&lt;p&gt;
On the way, I seemed to recall that these might be bundled with a
bunch of old &lt;a href=&#34;https://github.com/vattam/BSDGames&#34;&gt;BSD games&lt;/a&gt; so I took a look at the BSD games package for
Linux. While I didn&amp;#39;t find the filters, I found a whole bunch of old
programs that I hadn&amp;#39;t played with in years along with a few that I
never knew existed. To me it felt like an interesting project and
lesson treasure trove so I wanted to share.&lt;/p&gt;
&lt;p&gt;
I think this makes more sense to do as a video so I can actually show
the programs as they run so check out the video at the end of this
post.&lt;/p&gt;
&lt;p&gt;
In the video I talk about controlling the cursor on the screen so that
students can write programs like the ones I demo. That can be done in
a number of ways. You could use a library like &lt;a href=&#34;https://github.com/mabe02/lanterna&#34;&gt;lanterna&lt;/a&gt; for Java or
&lt;a href=&#34;https://en.wikipedia.org/wiki/Curses_%2528programming_library%2529&#34;&gt;curses&lt;/a&gt; or ncurses for C but you can also just use Ansi Escape
codes. Basically you print out &lt;a href=&#34;http://ascii-table.com/ansi-escape-sequences-vt-100.php&#34;&gt;special escape squences&lt;/a&gt; to move the
cursor, clear the screen and even set text and background colors. For
example, to move the cursor to the middle of the screen and print
&lt;strong&gt;Hello&lt;/strong&gt; you would use this: &lt;code&gt;System.out.print(&amp;#34;^[[12;40HHello&amp;#34;);&lt;/code&gt; The
first &lt;code&gt;^[&lt;/code&gt; is actually the ascii code for the escape character. I
enter it in Emacs by typing Control-q then hitting the escape
key. Other editors will have a way of doing the same.&lt;/p&gt;
&lt;p&gt;
So here you go – old BSD games. I hope you get as many ideas out of
this as I did.&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Uyvh1Q9SLbE&#34; frameborder=&#34;0&#34;
&lt;p&gt;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>