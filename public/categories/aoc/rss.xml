<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AOC on C&#39;est la Z</title>
    <link>https://newblog/categories/aoc/</link>
    <description>Recent content in AOC on C&#39;est la Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Dec 2020 15:57:22 -0400</lastBuildDate><atom:link href="https://newblog/categories/aoc/rss.xml" rel="self" type="application/rss" />
    <item>
      <title>Final thoughts on Advent of Code 2020</title>
      <link>https://newblog/post/advent-2020-final-thoughts/</link>
      <pubDate>Sun, 27 Dec 2020 15:57:22 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-final-thoughts/</guid>
      <description>Time for some final thoughts on Advent of Code 2020. This was my sixth Advent of Code but the first time I completed all 25 days. Better than last year&amp;#39;s 31 and a whole lot better than my weakest effort of 11 stars in 2017. I managed to find the time to finish all but two on the day they were released and finished those two on Christmas morning. This was also the first year I wrote all my solutions in Clojure and I also made a bunch of blog posts and videos (linked on the bottom of this post).</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Days 21 and 24</title>
      <link>https://newblog/post/advent-2020-21-24/</link>
      <pubDate>Thu, 24 Dec 2020 11:43:14 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-21-24/</guid>
      <description>Day 24 didn&amp;#39;t take that much time so I had a chance to go back and finish day 21.
As usual, all my code is up here. Day 21 Problem Link
It took me a while to get my head around this example. You have a set of recipes. Each recipe has a list of ingredients and a list of allergens. Your job for part 1 was basically to determine which ingredients don&amp;#39;t contain any allergens.</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - 19 through 23</title>
      <link>https://newblog/post/advent-2020-19-23/</link>
      <pubDate>Wed, 23 Dec 2020 15:09:38 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-19-23/</guid>
      <description>A few days have past so it&amp;#39;s time for an update. Two more days to go and while I haven&amp;#39;t completed all the problems, I have accumulated 43 stars which is a personal best. Given the nature of the problems I&amp;#39;m missing, I might even go back and do them at some point. Of course, I may very well also just crash out on the final two days.
As usual, all my code is up here.</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Days 17 and 18</title>
      <link>https://newblog/post/advent-2020-1718/</link>
      <pubDate>Fri, 18 Dec 2020 12:35:57 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-1718/</guid>
      <description>Day 17 Day 17 brought back Cellular Automata. It was a nice follow up to day 11. In my writeup I talked about data representation - how a Cellular Automoton like Conway&amp;#39;s game of life is a nice 2D array project in a class like APCS-A but multi dimensional arrays are only one way to represent a cellular automaton. Day 17 really drove that home. The actual rules were pretty simple - if a cell is active and has 2 or 3 active neighbors it stays active.</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - day 16</title>
      <link>https://newblog/post/advent-2020-day16/</link>
      <pubDate>Wed, 16 Dec 2020 17:12:56 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-day16/</guid>
      <description>Today&amp;#39;s problem was a fun one to solve. Why was it fun? Stay tuned,
The basic gist is that you have a plane ticket which is a set of numbers but you don&amp;#39;t know which number maps to which category - row, seat, gate, etc. You also know the number ranges for each category. For example, row might be a number between 6 and 11 or 33 through 44 while a seat might be 13 through 40 or 45 through 50.</description>
    </item>
    
    <item>
      <title>A teacher looks at Advent of Code day 14</title>
      <link>https://newblog/post/advent-2020-day14/</link>
      <pubDate>Mon, 14 Dec 2020 14:30:47 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-day14/</guid>
      <description>Time for Day 14!!!
I didn&amp;#39;t write up day 12 but here&amp;#39;s a Clojure video runthrough. I also didn&amp;#39;t write up day 13 mostly because I hacked together my part 2 in Python and still want to rewrite it in decent clojure. In any event, all my solutions are up on GitHub.
Day 14 had a few interesting things going on. At its core it&amp;#39;s a small machine simulator where you have to deal with binary numbers.</description>
    </item>
    
    <item>
      <title>A teacher looks at Advent of Code 2020 - Day 11</title>
      <link>https://newblog/post/advent-2020-day11/</link>
      <pubDate>Fri, 11 Dec 2020 15:00:43 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-day11/</guid>
      <description>Today was Cellular Automaton Day at Advent of Code. You have a world that&amp;#39;s usually represented as a grid of cells. Each cell can be in a certain state. Given a certain state, the next state is determined by simple rules like for a given cell how many of it&amp;#39;s neighbors are the same color. The most popular Cellular Automat is probably Conway&amp;#39;s Game of Life where each cell can be either alive or dead in a given generation and in the next generation the state will be determined by how many of its neighbors are currently dead or alive.</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2020 - days 9 and 10</title>
      <link>https://newblog/post/advent-2020-day0910/</link>
      <pubDate>Thu, 10 Dec 2020 16:52:45 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-day0910/</guid>
      <description>As we get closer to the end of the semester and time becomes scarcer I&amp;#39;m wondering how many more I&amp;#39;ll finish. Barely had time to do days 9 and 10.
Not much to say about day 9 Part one was basically a rehash of day 1 part 1 but with a sliding widow. Part 2? I just brute force tried all the subranges. I meant to go back to try to improve the solution but didn&amp;#39;t have a chance.</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2020 - Days 7 and 8</title>
      <link>https://newblog/post/advent-2020-day0708/</link>
      <pubDate>Tue, 08 Dec 2020 14:47:17 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-day0708/</guid>
      <description>Today we&amp;#39;ll talk about days seven and eight. Let&amp;#39;s start with 7. I teach all morning on Mondays. I woke up and worked out and then took a look at the problem in the few minutes before class. It was certainly harder than days one through six but I felt it was something I knew I could do based on past experience so I quickly started to throw something together.</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2020 - Day 06</title>
      <link>https://newblog/post/advent-2020-day06/</link>
      <pubDate>Sun, 06 Dec 2020 10:14:03 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-day06/</guid>
      <description>Day 6 turned out to be pretty straightforward. Like day 4 you had to deal with two consecutive newlines when parsing the data but assuming you did day 4 that&amp;#39;s no problem. The gist is that a group is formed by consecutive lines and groups are separated by a blank line. Each line in each group is a string of letters representing answers to questions. For instance, for this group: abc abd ab you have three people.</description>
    </item>
    
    <item>
      <title>A teacher looks at Advent of Code 2020 - Day 5</title>
      <link>https://newblog/post/advent-2020-day05/</link>
      <pubDate>Sat, 05 Dec 2020 11:18:59 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-day05/</guid>
      <description>Day five&amp;#39;s problem is a nice one for an early CS class. It can be very much brute forced but it also touches on some nice concepts and can be solved pretty elegantly. I&amp;#39;ve embedded a walk through in Clojure at the end but a Python solution would be pretty similar. Read the problem over if you haven&amp;#39;t. At it&amp;#39;s core you are taking a boarding pass representing a coded airplane seat number and you&amp;#39;re converting it to a known seat (row and column).</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Day 4</title>
      <link>https://newblog/post/advent-2020-day04/</link>
      <pubDate>Fri, 04 Dec 2020 17:31:06 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-day04/</guid>
      <description>One of the nice things about Advent of Code is that it gets me to explore language features I haven&amp;#39;t used yet. Today&amp;#39;s problem got me to explore Clojure Spec which is a very cool validation library. There&amp;#39;s a complete run through of the solution in Clojure in the video but here I&amp;#39;ll talk about the problem in Python (mostly). Today&amp;#39;s problem is about validating passports. You start with a text file consisting of passport information.</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Day 3</title>
      <link>https://newblog/post/advent-2020-day03/</link>
      <pubDate>Thu, 03 Dec 2020 14:27:02 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-day03/</guid>
      <description>I thought I&amp;#39;d do a video for today. No particular reason. Mostly why not.
I&amp;#39;ll talk about day 3&amp;#39;s problem and code up a solution in Clojure. If you haven&amp;#39;t ever used Clojure, hopefully this will give a bit of the flavor. This video also serves double duty as being my next Using Emacs video since it demos Emacs&amp;#39;s Clojure tools. Mostly Cider which even with a few quirks is the best development environment I&amp;#39;ve ever used.</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Day 2</title>
      <link>https://newblog/post/advent-2020-day02/</link>
      <pubDate>Wed, 02 Dec 2020 12:27:27 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-day02/</guid>
      <description>Day two introduced some staples of staples of not only Advent of Code but also of programming problems in general. The first is input parsing. For this problem you get lines of input like this:
1-3 a: abcde 1-3 b: cdefg 2-9 c: cccccccc or in general
number_1-number_2 Letter: String There are a few ways to handle this. One is to brute force it. In Python maybe something like: sample_line=&amp;#34;4-15 f: abcdefg&amp;#34; sample_list = sample_line.</description>
    </item>
    
    <item>
      <title>Advent of Code 2020</title>
      <link>https://newblog/post/advent-2020-leadin/</link>
      <pubDate>Mon, 30 Nov 2020 14:21:17 -0400</pubDate>
      
      <guid>https://newblog/post/advent-2020-leadin/</guid>
      <description>Tomorrow, or more practically, tonight at Midnight, Eric Wastl will once again launch the Advent of Code. As I&amp;#39;ve written before, it&amp;#39;s a month long event where each day a new programming problem is released. The problems range in difficulty and complexity. Some are very approachable to beginners and some are crazy challenging. I&amp;#39;ve written a bunch about AOC in past years:
Solve A to Solve B Data structures and Hidden Complexity Tools can shape- how we think 2019 day 1 2019 day 2 2019 day 3 2019 day 4 2019 day 8 2019 day 8 addendum and a few more not listed.</description>
    </item>
    
  </channel>
</rss>
