<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacs on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/categories/emacs/</link>
    <description>C&#39;est la Z (emacs)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jan 2025 09:25:00 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/categories/emacs/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Extracting Emails (with Emacs)</title>
      <link>https://cestlaz.github.io/post/extracting-emails/</link>
      <pubDate>Tue, 07 Jan 2025 09:25:00 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/extracting-emails/</guid>
      <description>&lt;p&gt;
Yesterday I found myself in a situation where I had a text document
interspersed with a bunch of email addresses and I wanted to extract
those email addresses.&lt;/p&gt;
&lt;p&gt;
Specifically, I had to copy email addresses from a couple of
spreadsheets and other sources and I thought it would be faster to
copy lines form the sheets instead of email cells as well as just
grabbing text from the other sources and then isolating the email
addresses in Emacs.&lt;/p&gt;
&lt;p&gt;
Now, writing a little &amp;#34;extract emails&amp;#34; script to operate on a text
file is easy enough. You can search for an email address using a
regular expression. Regular expressions are a text pattern matching
language that most programming language support. I used something like
the following regular expression to identify an email address:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[a-zA-Z0-9\.]+@[a-zA-Z0-9]+\.[a-zA-Z]{3}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The first [a-zA-Z0-9\.]+ matches a sequence of one or more characters
that are letters, numbers or a period (the slash before the period is
to escape it - prevent using the . for its special regular expression
meaning). That&amp;#39;s followed by the @ symbol, a second set of characters,
this time without the period, then a dot and then three more
characters.&lt;/p&gt;
&lt;p&gt;
This will match most email addresses.&lt;/p&gt;
&lt;p&gt;
In Clojure, I&amp;#39;d use the function re-seq which would take a string
(presumably my text file) and return a list of all the matches. That
is, all the email addresses. I could do the same in Python with
re.findall.&lt;/p&gt;
&lt;p&gt;
In an editor, at least in Emacs, it&amp;#39;s a little trickier. You can
search for a regular expression but that just finds the next email
address. I&amp;#39;d then have to manually copy it and then repeat the
process.&lt;/p&gt;
&lt;p&gt;
I guess a keyboard macro could do the trick but easier would be to
just write an elisp function and extend Emacs.&lt;/p&gt;
&lt;p&gt;
The video shows the whole walkthrough but the core of the routine is
using the &lt;code&gt;search-forward-regexp&lt;/code&gt; function which searches for the next
occurrence of an email match. I then add that email address to a
list. Putting it all in a while loop, you get:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(while (search-forward-regexp regexp &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (push (match-string-no-properties &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) matches))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The match-string-no-properties grabs the actual text of the match.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a little more detail but basically I wrote an equivalent of
re-seq for an Emacs buffer - it grabs everything that matches a
regular expression and returns all the matches in a list.&lt;/p&gt;
&lt;p&gt;
Then, it was a simple matter of looping over that list and inserting
the results. I ultimately named the routine &lt;code&gt;extract-emails&lt;/code&gt;. So now, I
can be in any Emacs buffer, copy over all my source email material,
run the command, and I&amp;#39;ll have all the emails together one per line
ready to be pasted into an email client.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m thinking that I should probably give the routine an additional
optional parameter - have it extract emails by default but allow the
user to pass in any regular expression.&lt;/p&gt;
&lt;p&gt;
Just another reason why Emacs is such a powerful editor.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video, enjoy:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/o2z9SKNVCwk?si=rpUG-hg8KqGoxZxw&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 82 - Conda and Direnv</title>
      <link>https://cestlaz.github.io/post/using-emacs-82-conda-direnv/</link>
      <pubDate>Tue, 13 Feb 2024 11:31:06 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-82-conda-direnv/</guid>
      <description>&lt;p&gt;
One of the things I want to do now that I have some time is get my
head around all the modern AI stuff. I&amp;#39;m starting with a review or
things I&amp;#39;ve already done  by going through Andrew Ng&amp;#39;s Coursera ML
class. I&amp;#39;ll probably continue with his courses but I&amp;#39;m certainly open
to any suggestions (specifically for a CS guy who&amp;#39;s not so strong on
the math side).&lt;/p&gt;
&lt;p&gt;
This means diving back into Python even though Clojure is usually my
weapon of choice. I thought I&amp;#39;d see how the platform has changed.&lt;/p&gt;
&lt;p&gt;
First up &lt;a href=&#34;https://www.anaconda.com/&#34;&gt;Anaconda&lt;/a&gt; which is a platform and package manager for
Python. I opted for &lt;a href=&#34;https://docs.anaconda.com/free/miniconda/index.html&#34;&gt;Miniconda&lt;/a&gt; which just gives the basics and I can
always add anything missing later.&lt;/p&gt;
&lt;p&gt;
See the previous two links to install Anaconda or Miniconda. The video
goes over basic use. It&amp;#39;s a lot like virtualenv. You can set up an
Python environment with specific packages and then activate or
deactivate whichever environment you wish to work under.&lt;/p&gt;
&lt;p&gt;
On the Emacs side, I installed the package conda as follows:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (use-package conda :straight &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        :config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (conda-env-initialize-interactive-shells)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (conda-env-initialize-eshell))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And that was pretty much it. To activate an particular environment we
just use &lt;code&gt;conda-env-actiate&lt;/code&gt;. Again, this is covered in the video.&lt;/p&gt;
&lt;p&gt;
Next up is &lt;a href=&#34;https://direnv.net/&#34;&gt;direnv&lt;/a&gt;. This lets you customize your environment per
directory. You can do things like set specific environment variables
or even, in our case, activate a conda environment just by going into
a project directory. Basic installation instructions can be found on
the home page.&lt;/p&gt;
&lt;p&gt;
To set up direnv to work with Anaconda/Miniconda though took a bit of
work. Between a few web sites and videos, I found that this worked.&lt;/p&gt;
&lt;p&gt;
First, I had to create a file named &lt;code&gt;.direnvrc&lt;/code&gt; in my home directory
with these contents:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  layout_conda() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; Ref Url: https://github.com/direnv/direnv/wiki/Python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; local ANACONDA_HOME=&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‚Äù&lt;/span&gt;${HOME}/anaconda3&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # PATH_add ‚Äú$ANACONDA_HOME‚Äù/bin1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    if [ -n &amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ]; then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # Explicit environment name from layout command.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    local env_name=&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    source activate ${env_name}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    elif (grep -q name: environment.yml); then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # Detect environment name from `environment.yml` file in `.envrc` directory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    source activate `grep name: environment.yml | sed -e ‚Äòs/name: //‚Äô | cut -d
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‚Äò&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; -f 2 | cut -d ‚Äò&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‚Äò&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    else
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&amp;gt;&amp;amp;2 echo No environment specified)&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fi&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You might have to play with it if you&amp;#39;re not using the miniconda
installation defaults.&lt;/p&gt;
&lt;p&gt;
Next, I had to edit my .zshrc:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export iam&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;whoami&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export CONDA_HOME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;iam&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/miniconda3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PATH&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; *&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONDA_HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin:&amp;#34;&lt;/span&gt;* &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONDA_HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PATH&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;&amp;lt;&amp;lt; my export init &amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt;&amp;gt;&amp;gt; conda initialize &amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# !! Contents within this block are managed by &amp;#39;conda init&amp;#39; !!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __conda_setup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/zamansky/miniconda3/bin/conda&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shell.zsh&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hook&amp;#39;&lt;/span&gt; 2&amp;gt; /dev/null&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $? -eq &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$__conda_setup&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/zamansky/miniconda3/etc/profile.d/conda.sh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            . &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/zamansky/miniconda3/etc/profile.d/conda.sh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/zamansky/miniconda3/bin:&lt;/span&gt;$PATH&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    unset __conda_setup
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;&amp;lt;&amp;lt; conda initialize &amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export LANG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;en_US.UTF-8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;direnv hook zsh&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Some of that was added when I installed direnv and followed those
directions. I think for the direnv Anaconda support I added the first
two lines and the last one.&lt;/p&gt;
&lt;p&gt;
Finally, in your project&amp;#39;s root directory create a file named &lt;code&gt;.envrc&lt;/code&gt;
which contains the line &lt;code&gt;layout conda name&lt;/code&gt; where &lt;strong&gt;name&lt;/strong&gt; is replaced with
the name of the conda environment you want.&lt;/p&gt;
&lt;p&gt;
The first time you go into the directory it will tell you that you
haven&amp;#39;t allowed direnv to work there yet and you have to enter &lt;code&gt;direnv
allow&lt;/code&gt;. After you do that, every time you enter that directory it will
activate your conda environment, leave it, it will deactivate it.&lt;/p&gt;
&lt;p&gt;
In Emacs, I found two packages that worked pretty much the same. One
named &lt;code&gt;direnv&lt;/code&gt; and the other &lt;code&gt;envrc&lt;/code&gt;. I opted for envrc.&lt;/p&gt;
&lt;p&gt;
You simply add:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (use-package envrc :straight &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    :config (envrc-global-mode))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
to your config and when you open a file in that directory, it will
use direnv.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Important note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s pretty much it. This all worked on my desktop but it&amp;#39;s giving
me problems on my laptop. It appears that conda mode isn&amp;#39;t working. It
allows me to select the environment but it doesn&amp;#39;t actually activate
it. I think it&amp;#39;s a path issue even though I think both my desktop and
laptop are the same. I&amp;#39;ll update this once I figure out what&amp;#39;s up on
the laptop side.&lt;/p&gt;
&lt;p&gt;
All in all, I&amp;#39;m pretty happy with this. I love that I can
automatically start an environment just by accessing a file in the
directory. Too many times, I forget and mess things up.&lt;/p&gt;
&lt;p&gt;
The video steps through everything and demos both packages:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/UrJoBaJv5kA?si=_W-OU3RG7o3K5LQ4&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 17 - a thesaurus mode</title>
      <link>https://cestlaz.github.io/post/learning-elisp-17/</link>
      <pubDate>Thu, 25 Jan 2024 08:45:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-17/</guid>
      <description>
&lt;p&gt;
When we last left our heroes we had made the API call to
dictionaryapi.com, gotten the response and coverted the json string
into elisp data. Specifically an array that contained a hash table.&lt;/p&gt;
&lt;p&gt;
Today&amp;#39;s video will take us the rest of the way to our thesaurus mode -
run the function and we&amp;#39;ll get a list of synonyms for the word we&amp;#39;re
currently at.&lt;/p&gt;
&lt;p&gt;
First, we had to pull out the synonyms from the response. To do that
we used basic elisp data manipulation. We used &lt;strong&gt;(aref json-resp 0)&lt;/strong&gt; to
pull out the hash table, which was the 0&lt;sup&gt;th&lt;/sup&gt;  element of the array
response, then wrap that in &lt;strong&gt;(gethash &amp;#34;meta&amp;#34;‚Ä¶)&lt;/strong&gt; to pull out the
&amp;#34;meta&amp;#34; hash entry. That&amp;#39;s a hash table in its own right so we then
pull out the &amp;#34;syns&amp;#34; element with another &lt;strong&gt;gethash&lt;/strong&gt; and then finally,
since that&amp;#39;s an array with an array in it, another &lt;strong&gt;aref&lt;/strong&gt;. The
complete code is up at gitlab but it&amp;#39;s essentially:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;gethash&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;syns&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;gethash&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta&amp;#34;&lt;/span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; json-resp &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This gives us an array of synonym strings but we want it to be a list
so we used &lt;strong&gt;mapcar&lt;/strong&gt; to convert.&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;identity&lt;/span&gt; word-list)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
There&amp;#39;s probably a better way to do this but that&amp;#39;s what came to mind.&lt;/p&gt;
&lt;p&gt;
From there, the actual function to replace the word under the cursor
with its synonym is pretty straightforward:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun word-to-syn (n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (interactive &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (let* ( (word (current-word))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (word-list (get-synonyms word))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (new-word (&lt;span style=&#34;color:#a6e22e&#34;&gt;completing-read&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Replacement:&amp;#34;&lt;/span&gt; word-list)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (backward-word)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (kill-word &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; new-word)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The &lt;strong&gt;current-word&lt;/strong&gt; function returns the word at or before the cursor
location. We then use the &lt;strong&gt;get-synonyms&lt;/strong&gt; function that we just
completed and then use &lt;strong&gt;completing-read&lt;/strong&gt; which lets us select a word
from the synonym list.&lt;/p&gt;
&lt;p&gt;
Once we have the replacement word, it&amp;#39;s just buffer manipulations to
delete the old word and insert the new one.&lt;/p&gt;
&lt;p&gt;
The rest of the video shows turning this into a mode and binding the
function to a key.&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s it for the elisp series for now. I&amp;#39;ll do more if I can
think of interesting and fun things to do but no promises.&lt;/p&gt;
&lt;p&gt;
You can get all the code at the repo linked below:&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ZBN4Kphv-ac?si=lMyYassaUwz6ia8g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=ZBN4Kphv-ac&#34;&gt;https://www.youtube.com/watch?v=ZBN4Kphv-ac&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 16 - using a web API</title>
      <link>https://cestlaz.github.io/post/learning-elisp-16/</link>
      <pubDate>Tue, 16 Jan 2024 11:18:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-16/</guid>
      <description>
&lt;p&gt;
Sorry for the long break. Once December started, I spent the first few
weeks spending my coding time on &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt;, then just got
sidetracked but now it&amp;#39;s time to get going again.&lt;/p&gt;
&lt;p&gt;
This is the last elisp topic I specifically wanted to cover so this
and the next video mmight be the end of this series, we&amp;#39;ll see.&lt;/p&gt;
&lt;p&gt;
What are we doing today? Using a web API. Basically, if we want to use
some external data source or facility a typical way to make that
happen is through a web API. We could write our own, but for today
we&amp;#39;re going to use a free to use online thesaurus service. The idea is
that we can send it a word and we&amp;#39;ll get back synonyms. The end result
will be, as we&amp;#39;re writing, we hit the magic key, get a list of
alternative words and then select one, or not.&lt;/p&gt;
&lt;p&gt;
The API we&amp;#39;ll be using is at &lt;a href=&#34;https://dictionaryapi.com/.&#34;&gt;https://dictionaryapi.com/.&lt;/a&gt; It&amp;#39;s part of 
Merriam-Webster&amp;#39;s set of free to use tools. To use it, we have to go
to &lt;a href=&#34;https://dictionaryapi.com/register/index&#34;&gt;this&lt;/a&gt; page and register to get an API key, then to use it to get
synonyms for a word, you go to a url formatted like this:&lt;/p&gt;

https://dictionaryapi.com/api/v3/references/thesaurus/json/&lt;b&gt;word&lt;/b&gt;?key=&lt;b&gt;MYKEY&lt;/b&gt;
&lt;p&gt;
where &lt;strong&gt;word&lt;/strong&gt; is the word you want to lookup and &lt;strong&gt;MYKEY&lt;/strong&gt; is the key you
got when registering.&lt;/p&gt;
&lt;p&gt;
The result will be a string of data representing the &lt;a href=&#34;https://json.org&#34;&gt;JSON&lt;/a&gt; formatted
response.&lt;/p&gt;
&lt;p&gt;
How do we do this?&lt;/p&gt;
&lt;p&gt;
First, to get the data, we can use elisp&amp;#39;s
&lt;code&gt;url-retreive-synchronously&lt;/code&gt;. This takes a string with our url and
returns a buffer with the results. In the video, we first show that we
can use the &lt;code&gt;switch-to-buffer&lt;/code&gt; function to go to the buffer with the
results:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mykey&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar base-url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://dictionaryapi.com/api/v3/references/thesaurus/json/&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (switch-to-buffer (url-retrieve-synchronously (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; base-url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;polite&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?key=&amp;#34;&lt;/span&gt; key)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and then show how we can use &lt;code&gt;with-current-buffer&lt;/code&gt; to take the buffer
with our data and manipulate it before using the &lt;code&gt;buffer-string&lt;/code&gt;
function to return what we want.&lt;/p&gt;
&lt;p&gt;
Finally, we convert the json string into an elisp data structure, an
array of arrays and hash tables using &lt;code&gt;json-parse-string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the complete code:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mykey&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar base-url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://dictionaryapi.com/api/v3/references/thesaurus/json/&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; Example using switch-to-buffer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; (switch-to-buffer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; (url-retrieve-synchronously (concat base-url &amp;#34;umpire&amp;#34; &amp;#34;?key=&amp;#34; key)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defun get-synonyms (word)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (let* ((url (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; base-url word &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?key=&amp;#34;&lt;/span&gt; key))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  	 (resp (with-current-buffer (url-retrieve-synchronously url)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  		 (&lt;span style=&#34;color:#a6e22e&#34;&gt;goto-char&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;point-min&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  		 (&lt;span style=&#34;color:#a6e22e&#34;&gt;re-search-forward&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^$&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  		 (&lt;span style=&#34;color:#a6e22e&#34;&gt;delete-region&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;point&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;point-min&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  		 (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-string&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  	 (json-resp (json-parse-string resp))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  	 )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      json-resp))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (get-synonyms &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;umpire&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video covers all the details. In the next installment, we&amp;#39;ll see
how we can take this json response, pull out the synonyms and easily
replace the current word with one.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/tGZNhJmZ_2M?si=QHZ176EWF8OdodLg&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=tGZNhJmZ_2M&#34;&gt;https://www.youtube.com/watch?v=tGZNhJmZ_2M&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 15 - cleaning up our minor mode</title>
      <link>https://cestlaz.github.io/post/learning-elisp-15/</link>
      <pubDate>Wed, 29 Nov 2023 11:44:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-15/</guid>
      <description>
&lt;p&gt;
Today we&amp;#39;re finishing off our emoji project. This video covers two
quick things.&lt;/p&gt;
&lt;p&gt;
The first is how we can make the mode use either of our replacement
methods - one that actually replaces the text with the emoji and the
other that uses text properties to overlay the emoji without changing
the text.&lt;/p&gt;
&lt;p&gt;
This is done with a variable that we can set telling us which function
to call. We used one named &lt;code&gt;emoji-replace-by-insert&lt;/code&gt;. If it&amp;#39;s &lt;code&gt;t&lt;/code&gt; (true)
we use the replace method, if it&amp;#39;s &lt;code&gt;nil&lt;/code&gt; we use the overlay one.&lt;/p&gt;
&lt;p&gt;
We could just use an if statement in our define minor mode but I
decided to use this as an opportunity to show how we can assign a
function to a variable which might be new to some readers/viewers.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s say we want to create a variable named &lt;code&gt;my_function_variable&lt;/code&gt;
and have it stand in for, let&amp;#39;s say the built in &lt;code&gt;1+&lt;/code&gt; function that
increments a value. We could do a simple assignment:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq my_function_variable &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;1+&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Unfortunately, in Elisp we can&amp;#39;t just call our new variable as a
function straight out but rather must call it using funcall, like
this:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;funcall&lt;/span&gt; my_variable_function &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; this returns 6, just like (1+ 5) would&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In other languages we could just call the function directly. In the
case of defining our mode, we can just throw in the variable once we
assign it. Here&amp;#39;s the code:&lt;/p&gt;
&lt;div class=&#34;src src-eamcs-lisp&#34;&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-eamcs-lisp&#34; data-lang=&#34;eamcs-lisp&#34;&gt;(define-minor-mode emoji-replace-mode
  &amp;#34;fill in the docstring later&amp;#34;
  :lighter &amp;#34; ER&amp;#34;
  (let ((func (if emoji-replace-by-insert
		  #&amp;#39;emoji-replace-insert
		#&amp;#39;emoji-replace-overlay)))
  (if emoji-replace-mode
      (add-hook &amp;#39;after-change-functions func nil t)
    (remove-hook &amp;#39;after-change-functions func))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
We use the &lt;code&gt;let&lt;/code&gt; form to assign our variable &lt;code&gt;func&lt;/code&gt; to the appropriate
function and then just pass along &lt;code&gt;func&lt;/code&gt; when we use &lt;code&gt;add-hook&lt;/code&gt; and
&lt;code&gt;remove-hook&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it.&lt;/p&gt;
&lt;p&gt;
The other thing we cover involves cleaning up our variables. In
earlier videos we used &lt;code&gt;setq&lt;/code&gt; but also showed &lt;code&gt;defvar&lt;/code&gt; with the
practical difference being that &lt;code&gt;defvar&lt;/code&gt; had a docstring.&lt;/p&gt;
&lt;p&gt;
In this video, we look at &lt;code&gt;defcustom&lt;/code&gt; which looks like &lt;code&gt;defvar&lt;/code&gt; but
also lets you change the variable value using emacs&amp;#39;
&lt;code&gt;customize-variable&lt;/code&gt; command and interface. Further, if we do change
the variable this way and save it through the interface, it will save
the change in your &lt;code&gt;init.el&lt;/code&gt; file for future use. It&amp;#39;s a nice touch
when making a complete &amp;#34;package.&amp;#34;&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it for this project. I might do one more on setting things up
for installation using straight or something similar. If not, it&amp;#39;ll be
on to the next project which I think will be a thesaurus moed.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Y9TPHo33Y1Y?si=fG4a5XbFnx6yS11J&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=Y9TPHo33Y1Y&#34;&gt;https://www.youtube.com/watch?v=Y9TPHo33Y1Y&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 14 - defining a minor mode</title>
      <link>https://cestlaz.github.io/post/learning-elisp-14/</link>
      <pubDate>Tue, 21 Nov 2023 14:47:19 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-14/</guid>
      <description>
&lt;p&gt;
Another short one today. We&amp;#39;re taking the code we already wrote and
making a minor mode out of it.&lt;/p&gt;
&lt;p&gt;
In Emacs, a minor mode is a set of functionality that you can turn on
(or off) in a buffer (or globally). For example, the built in
&lt;code&gt;auto-fill-mode&lt;/code&gt; can be turned on in a buffer will automatically add
newlines when your line gets &amp;#34;too long.&amp;#34; You can see the modes that
you currently have on using the &lt;code&gt;describe-mode&lt;/code&gt; function, usually
bound to &lt;code&gt;C-h m&lt;/code&gt;. I also currently have &lt;code&gt;Hungry-Delete&lt;/code&gt; mode as well
as &lt;code&gt;Flyspell&lt;/code&gt; and a few others. Hungry-Delete automatically deletes
multiple whitespace characters all at once so if I have five spaces
between words, I can just delete or kill once and they&amp;#39;ll all go
away. Flyspell adds auto spell checking.&lt;/p&gt;
&lt;p&gt;
Minor modes can be turned on manually using &lt;code&gt;M-x whatever-mode&lt;/code&gt;
command which toggles whatever mode on and off or automatically based
on hooks. For example, when you load a C file, I go into c mode which
is a major mode (more about them some other time) as well as these
minor modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auto-Save&lt;/li&gt;
&lt;li&gt;Corfu&lt;/li&gt;
&lt;li&gt;Eglot‚ÄìManaged&lt;/li&gt;
&lt;li&gt;Eldoc&lt;/li&gt;
&lt;li&gt;Flymake&lt;/li&gt;
&lt;li&gt;Font-Lock&lt;/li&gt;
&lt;li&gt;Hungry-Delete&lt;/li&gt;
&lt;li&gt;Yas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#39;s specific code we go over in the video to turn on and off our new
mode:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(define-minor-mode emoji-replace-mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fill in the docstring later&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :lighter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ER&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (if emoji-replace-mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;after-change-functions&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;emoji-replace-insert &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (remove-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;after-change-functions&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;emoji-replace-insert)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The macro &lt;code&gt;define-minor-mode&lt;/code&gt; does all the magic. The key is that it
defines a &amp;#34;mode variable&amp;#34; - in this case named &lt;code&gt;emoji-replace-mode&lt;/code&gt;
which tells us if we&amp;#39;re turning the mode on or off. Based on that, we
either add or remove our hook. The &lt;strong&gt;:lighter &amp;#34; ER&amp;#34;&lt;/strong&gt; sets what to show
in the mode line.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re just scratching the surface today - just setting up the
basics. Later we&amp;#39;ll see how to clean up the variables we need for the
mode - specifically our list of emojis as well as how we can select
either of our emoji replacement methods - overlay a text property or
replace the text. We&amp;#39;ll also see about setting up key combos for a
mode in our next elisp project.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it for today.&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/YBV9czwq-nw?si=6KV1To4h38Mr977C&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=YBV9czwq-nw&#34;&gt;https://www.youtube.com/watch?v=YBV9czwq-nw&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 13 - Text Properties</title>
      <link>https://cestlaz.github.io/post/learning-elisp-13/</link>
      <pubDate>Wed, 08 Nov 2023 11:09:46 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-13/</guid>
      <description>
&lt;p&gt;
Today&amp;#39;s a short 10 minute video as we continue to work on the emoji
project.&lt;/p&gt;
&lt;p&gt;
In the last episode we replaced text in the form :emoji-name: with the
emoji. This time, we&amp;#39;re doing it a little differently - we&amp;#39;re going to
overlay the text with the emoji. This way we see the emoji but the
underlying text is still present. This is kind of like when
programming in a language that supports &lt;code&gt;lambda&lt;/code&gt;, in many editors you
can type &lt;code&gt;lambda&lt;/code&gt; but it appears as the symbol: Œª (note that the
previous symbol is not an emoji but was entered using the RFC1345
input method).&lt;/p&gt;
&lt;p&gt;
The important difference with this method is that when you save and
later load the file, the original characters are still there the
symbols are only visual sugar.&lt;/p&gt;
&lt;p&gt;
We accomplish this overlaying with text properties. Specifically the
&lt;code&gt;display&lt;/code&gt; property. Here&amp;#39;s a sample call:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;put-text-property&lt;/span&gt; beginning end &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WHAT TO DISPLAY&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The first two parameters - &lt;code&gt;beginning&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; form the region where
you&amp;#39;re setting the property. Recall that the upper left of a buffer is
location 1 and it increments as you move into the document. So, for
example, if your buffer had:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here are a couple of lines of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;text in an emacs buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and we used this call:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;put-text-property&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OVERLAY&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
your buffer would look like this:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here OVERLAY a couple of lines of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;text in an emacs buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If you add text before OVERLAY it shifts over just as the original
text would. If you save the buffer though, the original text (are) is
what&amp;#39;s saved.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s pretty cool.&lt;/p&gt;
&lt;p&gt;
The video shows how we can use this to overlay our emojis.&lt;/p&gt;
&lt;p&gt;
Next time, we&amp;#39;ll turn it into a mode.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/x9eFxYS-hzw?si=BGFC_bmYJlDYqex6&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=x9eFxYS-hzw&#34;&gt;https://www.youtube.com/watch?v=x9eFxYS-hzw&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 12 - Emoji Replace part 2</title>
      <link>https://cestlaz.github.io/post/learning-elisp-12/</link>
      <pubDate>Mon, 30 Oct 2023 13:15:42 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-12/</guid>
      <description>
&lt;p&gt;
Here&amp;#39;s the next part of our emoji project. In this video, we make the
magic automatically happen. That is, when the user types an emoji in
quotes - like üêò, Emacs will automatically replace it with the
emoji, üêò.&lt;/p&gt;
&lt;p&gt;
Now, mind you, the way we&amp;#39;re doing it isn&amp;#39;t the best way. In fact,
after I posted the previous video, Micky Peterson linked to an article
he wrote on using &lt;a href=&#34;https://www.masteringemacs.org/article/inserting-emoji-input-methods&#34;&gt;input methods&lt;/a&gt; to insert emoji. Using input methods
would be much cleaner but this series isn&amp;#39;t necessarily about doing
something the best way but rather exploring and playing with elisp in
a way that hopefully will empower readers and viewers to build
whatever they need.&lt;/p&gt;
&lt;p&gt;
The magic to making our version work is by using Emacs Hooks. You can
think of hooks like events if you&amp;#39;ve done GUI or web programming. In a
web interface you might make a button and set an event so that
whenever the button is pressed some function is called or you make a
text input field and set an event so that whenever the content of that
input field changes, some function is called.&lt;/p&gt;
&lt;p&gt;
Hooks are like that and there are tons fo them.&lt;/p&gt;
&lt;p&gt;
In the video, I use this simple example:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defun redact ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (save-excursion
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (&lt;span style=&#34;color:#a6e22e&#34;&gt;goto-char&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (replace-string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;secret&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;REDACTED&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;before-save-hook&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;redact)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The function simply replaces all occurrences of the string &amp;#34;secret&amp;#34;
and changes it to &amp;#34;REDACTED.&amp;#34; The before-save-hook runs associated
functions before saving a file so in the above code sample, once the
hook is added, whenever you save a file, the redact function will run
and all occurrences of &amp;#34;secret&amp;#34; will be changed.&lt;/p&gt;
&lt;p&gt;
This is a silly example but a more useful one for this hook would be
to run a code autoformatter.&lt;/p&gt;
&lt;p&gt;
To remove the hook we would use:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (remove-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;before-save-function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;redact)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note that the &lt;code&gt;add-hook&lt;/code&gt; function also has options to decide if the
hook is for the buffer or everywhere.&lt;/p&gt;
&lt;p&gt;
For the emoji project, we&amp;#39;ll use the &lt;code&gt;after-change-functions&lt;/code&gt; hook
which lets us call a function whenever the buffer is changed.&lt;/p&gt;
&lt;p&gt;
The video goes into all the details. &lt;/p&gt;
&lt;p&gt;
Next up, we&amp;#39;ll see how we can overlay an emoji over text instead of
replacing.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/6h4KngDdsbo?si=BUqK5052J4GgLWgP&#34;
title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer;
autoplay; clipboard-write; encrypted-media; gyroscope;
picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=6h4KngDdsbo&#34;&gt;https://www.youtube.com/watch?v=6h4KngDdsbo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 11 - Emoji Replace Part 1</title>
      <link>https://cestlaz.github.io/post/learning-elisp-11/</link>
      <pubDate>Wed, 18 Oct 2023 13:57:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-11/</guid>
      <description>
&lt;p&gt;
Back from my trip and ready to continue the elisp series.&lt;/p&gt;
&lt;p&gt;
Today we&amp;#39;re starting our emoji project. When we&amp;#39;re done we&amp;#39;ll have a
minor mode where we can type in something like üêò in a buffer
and Emacs will replace it with the elephant emoji üêò. That&amp;#39;s part
one. We&amp;#39;ll then learn how to overlay the emoji over the text so that
while it will appear as the emoji (üêò) the actual text of üêò
will still be in the buffer and file if you save it. The former,
replacing the text with the emoji is useful if you actually want the
emoji in the file. I&amp;#39;m using it to create emoji based polls that I can
cut and paste into Slack or Zulip. The overlay idea is useful when you
want the emoji to display for visual effect but you don&amp;#39;t want it in
the actual file.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s no new elisp in this first video - we&amp;#39;re going to put together
a function that sees if you type an emoji name before the current
point (cursor) and if so, replaces it with the emoji. The function
pulls together a lot of what was covered in earlier videos.&lt;/p&gt;
&lt;p&gt;
So, no code explanations here. The second video will deal with hooks -
the way we&amp;#39;ll make this all happen &amp;#34;automatically&amp;#34; and then we&amp;#39;ll
cover the overlays and then finally making minor mode and
configuration.&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/DvFjCVHpoyk?si=b7YeY71Lwl1TBBua&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=DvFjCVHpoyk&#34;&gt;https://www.youtube.com/watch?v=DvFjCVHpoyk&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 10 - elisp data structures</title>
      <link>https://cestlaz.github.io/post/learning-elisp-10/</link>
      <pubDate>Mon, 18 Sep 2023 13:57:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-10/</guid>
      <description>
&lt;p&gt;
I&amp;#39;m leaving our next elisp project for when I get back from my
vacation but realized I could make a short video with some
preliminaries - some elisp tools that we&amp;#39;ll need that we can get out
of the way.&lt;/p&gt;
&lt;p&gt;
Specifically, elisp&amp;#39;s built in data structures. &lt;/p&gt;
&lt;p&gt;
We&amp;#39;ve already used the &lt;strong&gt;list&lt;/strong&gt; data structure and in this video we go a
bit more in depth.&lt;/p&gt;
&lt;p&gt;
Lists are great for, well, list processing but they&amp;#39;re not great for
random access. For that we can use vectors. Think of them like arrays
in other languages but with a functional way of accessing:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq v [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;;; define a vector&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; returns the 20, the value in index 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;aset&lt;/span&gt; v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; stores 100 in index i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; the vector will now have [10 100 30 40 50]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;1+&lt;/span&gt; v)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; the above returns a new list with (2 101 31 41 51)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note in that last example above we can use mapcar which we covered in
an earlier video on vectors as well as lists but the return is a new
list, not a vector.&lt;/p&gt;
&lt;p&gt;
We also cover elisp hash tables which are similar to python
dictionaries. With them you can store and retrieve values based on
keys (key value pairs). We&amp;#39;re not actually going to use them in the
next project so you can see the video for details.&lt;/p&gt;
&lt;p&gt;
The data structure we will be using are association lists. You can
think of them as a lightweight hash table. Basically a list of
pairs. A pair is a special form of a list that only has two items
(well, not exactly but see the video for details). We write them by
putting a period between the two elements - &lt;code&gt;(1 . 2)&lt;/code&gt;  - that&amp;#39;s a pair
with 1 as the first part and 2 as the second.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an association list and how we use it:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one value&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two value&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three value&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;assoc&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; a) &lt;span style=&#34;color:#75715e&#34;&gt;;; returns (2 . &amp;#34;two value&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;assoc&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; a)) &lt;span style=&#34;color:#75715e&#34;&gt;;; returns &amp;#34;two value&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (rest (&lt;span style=&#34;color:#a6e22e&#34;&gt;assoc&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; a)) &lt;span style=&#34;color:#75715e&#34;&gt;;; also returns &amp;#34;two value&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In our next project, we&amp;#39;ll use association lists to store the string
names for emojis as the keys and the actual emojis for the values.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it for now. More in a few weeks.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but this episode doesn&amp;#39;t have any specific code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/oszVyBvxmzg?si=TMjUlMSI1TQQYnPT&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://youtu.be/oszVyBvxmzg&#34;&gt;https://youtu.be/oszVyBvxmzg&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 9</title>
      <link>https://cestlaz.github.io/post/learning-elisp-9/</link>
      <pubDate>Tue, 29 Aug 2023 12:41:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-9/</guid>
      <description>
&lt;p&gt;
In this video, we&amp;#39;re finally putting everything together for the
function-header project.&lt;/p&gt;
&lt;p&gt;
for the most part, it&amp;#39;s just putting a function wrapper (defun) around
code we&amp;#39;ve already written but there area a few new things.&lt;/p&gt;
&lt;p&gt;
In order to parse the parameter string we use a few interesting
functions. The parameter string might look something like this &amp;#34;int a,
double d, int something, char c&amp;#34; - type name pairs separate by a comma
and space. To parse this into a list, we can use string-split. We use
~(string-split param-string &amp;#34;, &amp;#34;) which splits around the comma/space
separators. This gives us a list &lt;code&gt;(&amp;#34;int a&amp;#34; &amp;#34;double d&amp;#34; &amp;#34;int something&amp;#34;
&amp;#34;char c&amp;#34;)&lt;/code&gt;  In elisp, stuff in parens is a list. We&amp;#39;ve usually been
interpreting lists as functions where the first item is the name and
the rest the parameters but we can also use them strictly as data.&lt;/p&gt;
&lt;p&gt;
We then revisit the mapcar function that we used in rot13. Mapcar
takes a function and a list and then returns a new list having applied
the function to each element. In our case, we use the &lt;code&gt;format&lt;/code&gt;
function we covered last time to reformat each paramter into a javadoc
string.&lt;/p&gt;
&lt;p&gt;
Finally, we use &lt;code&gt;string-join&lt;/code&gt; to join all the parameter string
elements in our list back into one string.&lt;/p&gt;
&lt;p&gt;
The other new elisp function we look at is &lt;code&gt;save-excursion&lt;/code&gt;. It&amp;#39;s
pretty simple but very useful for editor functions. It basically saves
the location of the point, does everything in its body and then
restores the point to where it was.&lt;/p&gt;
&lt;p&gt;
So, if you had this code block:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (next-line &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;forward-char&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (do some stuff)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Your cursor (point) would have moved down 5 and 3 across and the stuff
would be done. When the block ends, the point would be wherever it was
moved to.&lt;/p&gt;
&lt;p&gt;
If, instead we do this:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (save-excursion
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (next-line &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;forward-char&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (do some stuff))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Then the same thing happens but at the end, the point is restored to
where it was when you started.&lt;/p&gt;
&lt;p&gt;
I also started using &lt;a href=&#34;https://github.com/xiongtx/eros&#34;&gt;eros&lt;/a&gt; mode which temprarily overlays the results of elisp
forms when you execute them. If you use Cider for Clojure development
it looks a lot like that. It&amp;#39;s easy and very useful for interactive
development.&lt;/p&gt;
&lt;p&gt;
Finally, as I mention in the video, I&amp;#39;ll be away for a couple of weeks
at the end of September and into October. Visiting Utrecht, Brussels,
Antwerp, and Amsterdam so if you&amp;#39;ve got any hidden gems for us to
visit please let us know. I really mention this though because it will
likely affect my video making schedule. Our next project - displaying
emojis automatically, is going to be three or four videos. Maybe
more. I don&amp;#39;t know if it makes sense to start 1 and then take the big
break so I might pause this project until I&amp;#39;m back in mid October or
maybe just do a one off before I go away. We&amp;#39;ll seen.&lt;/p&gt;
&lt;p&gt;
In the meantime, enjoy this one.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but this episode doesn&amp;#39;t have any specific code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/DqHuCePi2FA?si=h56rRPT1gK6hvmB0&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=DqHuCePi2FA&#34;&gt;https://www.youtube.com/watch?v=DqHuCePi2FA&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 8</title>
      <link>https://cestlaz.github.io/post/learning-elisp-8/</link>
      <pubDate>Mon, 21 Aug 2023 17:16:45 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-8/</guid>
      <description>
&lt;p&gt;
Today&amp;#39;s video gets us closer to our function header, um, function.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;ll take one more video to get there but today&amp;#39;s video goes over the
programmatic elisp that we&amp;#39;ll need.&lt;/p&gt;
&lt;p&gt;
Before we get to that, a couple of elisp regex niceties. To be honest,
I didn&amp;#39;t know that these existed when I made the last video so thanks
for those of you who made me aware.&lt;/p&gt;
&lt;p&gt;
First is the built in &lt;code&gt;rx&lt;/code&gt; macro. It lets you use a more verbose elisp type
syntax for regular experssions.&lt;/p&gt;
&lt;p&gt;
For example, instead of &amp;#34;Mr|Ms [A-Z][a-z]+ [A-Z][a-z]+&amp;#34; for a simple
Mr John Smith or Ms Sarah Stone or similar names, you could write:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (rx  (seq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mr|Ms &amp;#34;&lt;/span&gt; (any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A-Z&amp;#34;&lt;/span&gt;) (one-or-more (any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a-z&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A-Z&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (one-or-more (any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a-z&amp;#34;&lt;/span&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
which would evaluate to the more terse regular expression string.&lt;/p&gt;
&lt;p&gt;
On the flip side there&amp;#39;s the package &lt;code&gt;xr&lt;/code&gt; ([[&lt;a href=&#34;https://github.com/mattiase/xr&#34;&gt;https://github.com/mattiase/xr&lt;/a&gt;
][link]]) which does the reverse. You
give it the standard regex string and it will produce the more verbose
elisp type syntax.&lt;/p&gt;
&lt;p&gt;
This verbose elisp regex notation reminds me of a couple of clojure
tools I use. One is hiccup. That lets you use clojure structures for
html. For example:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;hiccup/html&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;:span&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:class&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
would yield &amp;#34;&amp;lt;span class=\&amp;#34;foo\&amp;#34;&amp;gt;bar&amp;lt;/span&amp;gt;&amp;#34;&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a similar tool, honeysql that clojurists  can use for sql. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;m a big fan of hiccup and related tools but I probably won&amp;#39;t be
using rx and xr moving forward.&lt;/p&gt;
&lt;p&gt;
Why not?&lt;/p&gt;
&lt;p&gt;
Context switching.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m just or actually more likely to use regular expressions in
languages other than elisp. In fact, I&amp;#39;ll most regularly use them on
the command line with grep type tools. I&amp;#39;ll also use them in other
programming languages. Since the elisp syntax only exists in elisp,
there&amp;#39;s less of a benefit to me. I do suppose that if I was doing a
deep dive into writing elisp for a while, it would be more attractive.&lt;/p&gt;
&lt;p&gt;
The clojure tools show this. When I do webdev, I&amp;#39;m living in one
ecosystem for all the front end work so it makes sense to use a tool
like hiccup. Besides, html is multiline so looks particularly ugly
when embedded in code (jsx notwithstanding). Same for sql.&lt;/p&gt;
&lt;p&gt;
Still rx and xr are well worth knowing and playing with.&lt;/p&gt;
&lt;p&gt;
Now for the star attractions - dealing with our regular expressions in
elisp.&lt;/p&gt;
&lt;p&gt;
The first call is &lt;code&gt;string-match&lt;/code&gt; which does two things.&lt;/p&gt;
&lt;p&gt;
First, it returns the index where the match starts (or nil if it isn&amp;#39;t
present) and it also sets up some internal data structure so that you
can extract the match groups. &lt;/p&gt;
&lt;p&gt;
There&amp;#39;s also an additional optional third parameter, INHIBIT-MODIFY
which if it&amp;#39;s nil or not present the &amp;#34;match data is changed&amp;#34; and we
can use the &lt;code&gt;match-string&lt;/code&gt; function to extract our groups. I think I
garbled that part in the video but this is right from the
documentation.&lt;/p&gt;
&lt;p&gt;
For example, in:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq regex &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\([a-z0-9]+\\) +\\([a-zA-Z0-9_]+\\)(\\([a-zA-Z0-9_ ,]+\\)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq line &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int add_two(int a, int b)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;string-match&lt;/span&gt; regex line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq retval (match-string &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; line))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq func-name (match-string &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; line))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq params (match-string &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; line))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
string-match returns 0 since the match starts at the first character.&lt;/p&gt;
&lt;p&gt;
We then use the match-string function to extract each of the
parenthesized groups.&lt;/p&gt;
&lt;p&gt;
We also have to be careful with the match-string function. It&amp;#39;s a bit
fragile. The documentation says that you should call it &amp;#34;close&amp;#34; to the
call to string-match since the match data might be mutated. That&amp;#39;s
illustrated in the video.&lt;/p&gt;
&lt;p&gt;
Finally, we cover the &lt;code&gt;format&lt;/code&gt; function which is like C&amp;#39;s printf. It
accepts a format string with placeholders and the additional
parameters to fill those placeholders.&lt;/p&gt;
&lt;p&gt;
For example:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq word1 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setq word2 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Replace1: %s Replace2: %s&amp;#34;&lt;/span&gt; word1 word2)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The format returns &amp;#34;Replace1: hello Replace2: world&amp;#34; having replaced
the placeholders with parameters. There are also other placeholders
for different data types.&lt;/p&gt;
&lt;p&gt;
The video covers all of this in detail.&lt;/p&gt;
&lt;p&gt;
Next time, we&amp;#39;ll put it all together into a working elisp function
that we can bind to a key&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but this episode doesn&amp;#39;t have any specific code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2hbX4h4ZdAc&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=2hbX4h4ZdAc&#34;&gt;https://www.youtube.com/watch?v=2hbX4h4ZdAc&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 7</title>
      <link>https://cestlaz.github.io/post/learning-elisp-7/</link>
      <pubDate>Tue, 15 Aug 2023 10:51:37 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-7/</guid>
      <description>
&lt;p&gt;
Our next elisp project us going to write a function that will
automatically generate function headers. This was actually the first
useful elisp I ever wrote around thirty years ago. I forget how I
wrote it then so this is a total rewrite.&lt;/p&gt;
&lt;p&gt;
Nowadays we have &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html&#34;&gt;Javadoc&lt;/a&gt; for java and tools like &lt;a href=&#34;https://www.sphinx-doc.org/en/master/&#34;&gt;Sphinx&lt;/a&gt; for other
languages. If we write specially formatted comments in our code, these
tools will pull out the comments and build a web site or document with
hyperlinked documentation.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an example of javadoc commenting that I found online:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * &amp;lt;p&amp;gt;This is a simple description of the method. . .
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * &amp;lt;a href=&amp;#34;http://www.supermanisthegreatest.com&amp;#34;&amp;gt;Superman!&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param incomingDamage the amount of incoming damage
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @return the amount of health hero has after attack
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @see &amp;lt;a href=&amp;#34;http://www.link_to_jira/HERO-402&amp;#34;&amp;gt;HERO-402&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @since 1.0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;successfullyAttacked&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; incomingDamage&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// do things
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note the extra * on the open comment line. That tells Javadoc to
process the block and turn it into html. You can look at the online
Java documentation to see plenty of examples (like &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html#indexOf-java.lang.Object-&#34;&gt;this&lt;/a&gt; one).&lt;/p&gt;
&lt;p&gt;
Back when I was coding professionally, Java didn&amp;#39;t exist let alone
javadoc but programmers like me wrote our own small tools that worked
similarly. It was just a good idea.&lt;/p&gt;
&lt;p&gt;
For our elisp, we want to be able to take the top line that declares
our function:&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_two&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b){&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And from that isolate the three components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return type (int)&lt;/li&gt;
&lt;li&gt;function name (add_two)&lt;/li&gt;
&lt;li&gt;parameters (int a and int b)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
From there, we can build a comment block like this:&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/*------------------- add_two ------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    Parameters: int a -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                int b -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    Returns: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    Description
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    MZ
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To isolate those components we&amp;#39;re going to use regular expressions.&lt;/p&gt;
&lt;p&gt;
For those that aren&amp;#39;t familiar with them, regular expressions (regex)
form a language to perform text pattern matching. Think &amp;#34;find and
replace on steroids.&amp;#34; Emacs and most other editing tools, including
things like spreadsheets all have support for regular experssions.&lt;/p&gt;
&lt;p&gt;
In this video, we are going to go over the fundamentals in the
editor. We&amp;#39;ll specifically use &lt;code&gt;replace-regexp&lt;/code&gt; and
&lt;code&gt;rexep-builder&lt;/code&gt;. In the next video, we&amp;#39;ll learn how to do this in
elisp and then write our function header creator.&lt;/p&gt;
&lt;p&gt;
Here are some basics:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;regex&lt;/th&gt;
&lt;th&gt;will match&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;the letter a&lt;/td&gt;
&lt;td&gt;the a in &lt;strong&gt;ball&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aa&lt;/td&gt;
&lt;td&gt;two in a row&lt;/td&gt;
&lt;td&gt;the aa at the start of &lt;strong&gt;aardvark&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-c]&lt;/td&gt;
&lt;td&gt;a b or c&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;any single character&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a.&lt;/td&gt;
&lt;td&gt;the letter a followed by any character&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
And there are tons more urles.&lt;/p&gt;
&lt;p&gt;
The video goes through a bunch of examples including how to use a
regex to transform all the money values in your text to $XXX.XX or how
to convert all the dates in the form month/day/year into
day-month-year.&lt;/p&gt;
&lt;p&gt;
You can also dig more deeply by looking at any of these online
tutorials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://regexone.com/&#34;&gt;https://regexone.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ziishaned/learn-regex/blob/master/README.md&#34;&gt;https://github.com/ziishaned/learn-regex/blob/master/README.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.javatpoint.com/regex&#34;&gt;https://www.javatpoint.com/regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://regexlearn.com/&#34;&gt;https://regexlearn.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or searching for videos online.&lt;/p&gt;
&lt;p&gt;
By the end of our video, we have our regex to identify three
components in a function header but note that I only wrote it for
lower case letters - we&amp;#39;ll fix that when we write the actual
function next time.&lt;/p&gt;
&lt;p&gt;
For now, enjoy this one covering the basics:&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The code for the series is still up here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but this episode doesn&amp;#39;t have any specific code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-kyJLcsiH_4&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=-kyJLcsiH_4&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-kyJLcsiH_4&#34;&gt;https://www.youtube.com/watch?v=-kyJLcsiH_4&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp - Rot13 conclusion</title>
      <link>https://cestlaz.github.io/post/learning-elisp-6/</link>
      <pubDate>Mon, 07 Aug 2023 11:59:44 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-6/</guid>
      <description>
&lt;p&gt;
Two more videos to finish up the rot13 project.&lt;/p&gt;
&lt;p&gt;
The first video covers about &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Prefix-Command-Arguments.html&#34;&gt;prefix arguments&lt;/a&gt;. The idea is when
calling an Emacs function interactively, you can specify a numeric
argument either by typing &lt;code&gt;C-u #&lt;/code&gt; where &lt;code&gt;#&lt;/code&gt; is a single digit or &lt;code&gt;M-x
##&lt;/code&gt; where &lt;code&gt;##&lt;/code&gt; is an integer which can be positive, negative, single
or multiple digits. You then type the key for your command or invoke
it with its full name &lt;code&gt;M-x&lt;/code&gt;. This passes the numeric parameter to the
function.&lt;/p&gt;
&lt;p&gt;
In the function, we add a parameter to the &lt;code&gt;(interactive)&lt;/code&gt; form -
specifically &lt;code&gt;(interactive &amp;#34;P&amp;#34;)&lt;/code&gt; which says that the parameter to our
function will be that number we passed as a prefix argument or nil if
there was no prefix argument.&lt;/p&gt;
&lt;p&gt;
We use the prefix argument to determine how much to rotate our
text. If we don&amp;#39;t pass a parameter, we just do a rot13 but if we do,
we rotate that amount.&lt;/p&gt;
&lt;p&gt;
The second video shows how we can use see if there&amp;#39;s an active region
and if so, run our rotate function on the text in that region. If not,
rotate the previous word.&lt;/p&gt;
&lt;p&gt;
Here are the key Emacs features we instroduce.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mark-active&lt;/td&gt;
&lt;td&gt;a built in variable which is true if you&amp;#39;ve set the mark&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(mark)&lt;/td&gt;
&lt;td&gt;returns an integer representation of where the mark is set&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(point)&lt;/td&gt;
&lt;td&gt;returns an integer representation of where the cursor is&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(buffer-substring-no-properties)&lt;/td&gt;
&lt;td&gt;returns text from the buffer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Notes from previous videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
A viewer pointed out that the Emacs if statement can actually have
multiple forms to its false part.&lt;/p&gt;
&lt;p&gt;
For example:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (if true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Goodbye&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
will print &amp;#34;Hello&amp;#34; if &lt;code&gt;condition&lt;/code&gt; is true and &amp;#34;Goodbye&amp;#34; if it&amp;#39;s fales.&lt;/p&gt;
&lt;p&gt;
Now, if we have multiple forms int he false part:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (if conditiotrue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Goodbye&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
then while it will still print &amp;#34;Hello&amp;#34; if &lt;code&gt;condition&lt;/code&gt; is true, it will
print both &amp;#34;Goodbye&amp;#34; and &amp;#34;World&amp;#34; if it is false.&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t know that and appreciated the comment so that I could learn
something new.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code and video links. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Code:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Once again, the code is up online:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rot13 code will be in the file rot13.el.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
The videos:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Prefix Arguments:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5oHpxh0JsBE&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=5oHpxh0JsBE&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5oHpxh0JsBE&#34;&gt;https://www.youtube.com/watch?v=5oHpxh0JsBE&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Rotating a region:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/YzQ8iG3nZQ8&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=YzQ8iG3nZQ8&#34;&gt;https://www.youtube.com/watch?v=YzQ8iG3nZQ8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 5 - Rot13 parts 2 and 3</title>
      <link>https://cestlaz.github.io/post/learning-elisp-5/</link>
      <pubDate>Tue, 01 Aug 2023 10:00:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-5/</guid>
      <description>
&lt;p&gt;
Rather than one long boring video, I thought it would be better to
split up the remainder of the Rot13 project into 4 shorter boring ones
:-).&lt;/p&gt;
&lt;p&gt;
Here are the first two.&lt;/p&gt;
&lt;p&gt;
Before we can really do anything interesting, we need to be able write
programs that make decisions. For that we need conditionals or &lt;code&gt;if&lt;/code&gt;
statements. That&amp;#39;s covered in the first video.&lt;/p&gt;
&lt;p&gt;
Like other languages, elisp has an &lt;code&gt;if&lt;/code&gt; statement but it&amp;#39;s more of an
&lt;code&gt;if&lt;/code&gt; function. Here&amp;#39;s the outline:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (if boolean
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      evaluate_to_this_if_boolean_is_true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      evaluate_to_this_if_boolean_is_false)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In this basic form, it essentially has both the if and the else parts
from languages like Python:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; boolean:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      evaluate_to_this_if_boolean_is_true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      evaluate_to_this_if_boolean_is_false)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If you need more than one thing in either the true or false part you
need another form which we&amp;#39;ll cover later.&lt;/p&gt;
&lt;p&gt;
You can also leave out the false part but again, we&amp;#39;ll deal with that
when it comes up. For now, it&amp;#39;s simpler for our application to have
both.&lt;/p&gt;
&lt;p&gt;
The basic if will cover you in a lot of cases but if you&amp;#39;ve got more
then a true/false decision the code can get ugly:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (if boolean1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      true-part-1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (if boolean2 &lt;span style=&#34;color:#75715e&#34;&gt;;; this is the false for boolean1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          true part-2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (if boolean3 &lt;span style=&#34;color:#75715e&#34;&gt;;; this is the false for boolean 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              true-part
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            false-part)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Instead, elisp and many other lisps give us the &lt;code&gt;cond&lt;/code&gt; or
conditional. The most similar construct in languages like Java or C++
would be the switch statement but the &lt;code&gt;cond&lt;/code&gt; is much more general and
much more powerful.&lt;/p&gt;
&lt;p&gt;
In a switch statement, you list multiple discrete values for a given
variable and run some code based on that:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;is&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;is&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;is&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       etc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In a cond, you have multiple clauses with arbitrary conditions and
what to do for each condition.&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(let ( (grade &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(cond ( (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; grade &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ( (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; grade &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ( (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; grade &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ( (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; grade &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ( &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;) ))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In the above example, there are four independent boolean expressions
and then the final clause, which will always execute if the code gets
there because t is always true.&lt;/p&gt;
&lt;p&gt;
For the cond, once it evaluates a boolean to true, it evaluates to the
other part of its clause and returns so in the example above, &amp;#34;D&amp;#34;
would be returned.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the cond from the rot13 code:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (cond ((and (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;=&lt;/span&gt; c &lt;span style=&#34;color:#e6db74&#34;&gt;?a&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;=&lt;/span&gt; c &lt;span style=&#34;color:#e6db74&#34;&gt;?z&lt;/span&gt;)) (rotate c offset &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	 ((and (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;=&lt;/span&gt; c &lt;span style=&#34;color:#e6db74&#34;&gt;?A&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;=&lt;/span&gt; c &lt;span style=&#34;color:#e6db74&#34;&gt;?Z&lt;/span&gt;)) (rotate c offset &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	 (&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; c))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The top clause tests for a lowercase letter, the next for upper case
and the default &lt;code&gt;t&lt;/code&gt; clause if it&amp;#39;s neither - maybe a space or
punctuation.&lt;/p&gt;
&lt;p&gt;
The second video posted here goes over making an interactive rot13
function using elisp&amp;#39;s &lt;code&gt;(interactive)&lt;/code&gt;. If a function uses
&lt;code&gt;(interactive)&lt;/code&gt; it can then be called as a command using the M-x
prefix. It can also be bound to a key combination.&lt;/p&gt;
&lt;p&gt;
In the next videos we&amp;#39;ll see how to modify the &lt;code&gt;(interactive)&lt;/code&gt; form so
that we can pass what are known as prefix arguments and in the final
installment of the rot13 project we&amp;#39;ll see how we can rot13 a region.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Code
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I finally got around to making a repo. All the code for this series
will be made available here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/zamansky/learning-elisp-code&#34;&gt;https://gitlab.com/zamansky/learning-elisp-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rot13 code will be in the file rot13.el.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The videos
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Conditionals:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/gT8RBdtZtfk&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=gT8RBdtZtfk&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gT8RBdtZtfk&#34;&gt;https://www.youtube.com/watch?v=gT8RBdtZtfk&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Interactive:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/WvPXnsNC8JU&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=WvPXnsNC8JU&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WvPXnsNC8JU&#34;&gt;https://www.youtube.com/watch?v=WvPXnsNC8JU&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 4 - Rot13 part 1</title>
      <link>https://cestlaz.github.io/post/learning-elisp-4/</link>
      <pubDate>Tue, 25 Jul 2023 15:21:56 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-4/</guid>
      <description>
&lt;p&gt;
It&amp;#39;s been a couple of weeks since my last post. Sorry - been
repainting the apartment so I was limited to my laptop for a while.&lt;/p&gt;
&lt;p&gt;
Now that we&amp;#39;ve gone over a few basics we can explore new elisp
features while building &amp;#34;useful&amp;#34; things. This video has us building
code to implement &lt;a href=&#34;https://en.wikipedia.org/wiki/ROT13&#34;&gt;ROT13&lt;/a&gt;. ROT13 is a particular instance of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Caesar_cipher&#34;&gt;Caesar or
rotational cipher&lt;/a&gt;. In a Caesar Cipher, you take each letter and
&amp;#34;rotate&amp;#34; it by a certain number of places. For example, if you are
rotating by 2, the string &amp;#34;abcz&amp;#34; would become &amp;#34;cdeb&amp;#34; with each letter
moving two over. Note that the &amp;#34;z&amp;#34; has to rotate back to the beginning
of the alphabet and become a &amp;#34;b.&amp;#34;&lt;/p&gt;
&lt;p&gt;
I also put &amp;#34;useful,&amp;#34; above in quotes. This is because, while I think
ROT13 is interesting and will allow us to explore a number of elisp
concepts, it&amp;#39;s actually already built in to Emacs.&lt;/p&gt;
&lt;p&gt;
In the video, I go on for a while about ROT13 and some internet
history but if you aren&amp;#39;t interested in that, I put a chapter link in
the video description to skip that part.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Notes on some of the elisp concepts covered:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Lists
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
In elisp, things in parentheses are lists so (+ 2 3) is a list. If you
have this in a program, however, Emacs will try to evaluate the
function + on the parameters 2 and 3. In this case, that is what we
want.&lt;/p&gt;
&lt;p&gt;
Other times, we want to use a list as pure date, for example the list
(1 2 3 4 5). To prevent Emacs from evaluating this list we start it
with a single quote: &amp;#39;(1 2 3 4 5)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Strings and Characters
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
In Elisp, things in double quotes are strings so &amp;#34;abc&amp;#34; is a string
with the three characters a, b, and c. Characters can be written
individually by preceding them with a question mark - ?a for the
character a.&lt;/p&gt;
&lt;p&gt;
In the video, we&amp;#39;ll go into details and also see how Emacs will
interpret a string as a list of characters and how we can then go back
from a list of characters to a string.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Mapping functions
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
In lisp type languages, we use a lot of what are known as mapping
functions. The function &lt;code&gt;mapcar&lt;/code&gt; in elisp, takes a function and
applies it to each element of a list. For example, given this code:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defun square (x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; x x))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;square &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
That mapcar function will return the list &amp;#39;(1 4 9 16 25), the list you
get by applying the square function we wrote to each element of the
list. The video goes into more details. Note that we have to precede 
the function square with #&amp;#39; in the mapcar call&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Lambda
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
We also cover anonymous functions in the video - it lets you create a
&amp;#34;throwaway&amp;#34; function.&lt;/p&gt;
&lt;p&gt;
For example, &lt;code&gt;(lambda (x) (* x x))&lt;/code&gt; returns a function that squares
its parameter. We can use it to square the number 3 like this: &lt;code&gt;(
(lambda (x) (* x x)) 3)&lt;/code&gt;. In the video we&amp;#39;ll show why this is useful
when combined with functions like mapcar.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Misc stuff
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
For some reason, the video is showing for me at low resolution. If
this happens to you, click on the options wheel and select a higher
res.&lt;/p&gt;
&lt;p&gt;
Also, I mentioned rec.humor.spc in the video. I found some old Stupid
People&amp;#39;s Court posts &lt;a href=&#34;https://www.panix.com/~pschleck/spc/&#34;&gt;here&lt;/a&gt;. I thought some of you would enjoy them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
The video
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/_3OvTrkSqEE&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video link: &lt;a href=&#34;https://www.youtube.com/watch?v=_3OvTrkSqEE&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_3OvTrkSqEE&#34;&gt;https://www.youtube.com/watch?v=_3OvTrkSqEE&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 3 - functions</title>
      <link>https://cestlaz.github.io/post/learning-elisp-3/</link>
      <pubDate>Thu, 13 Jul 2023 15:17:48 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-3/</guid>
      <description>&lt;p&gt;
Here&amp;#39;s another short video - this one on declaring functions in elisp.&lt;/p&gt;
&lt;p&gt;
Not much to say about it. It&amp;#39;s similar to other languages.&lt;/p&gt;
&lt;p&gt;
In Python or C++ you might have:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  # Python 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  def add2(a, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return a+b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  // C++
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  int add2(int a, int b){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return a+b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Elisp is similar:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defun add2 (a b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; a b))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
But it&amp;#39;s a little more &amp;#34;mathy.&amp;#34; You&amp;#39;ve got the special form &lt;strong&gt;defun&lt;/strong&gt;,
then the name of the function, parameters in parens and then the
body - all wrapped in parentheses. Note that you don&amp;#39;t explicitly
write return. It&amp;#39;s mroe like a mathematical expression where it
returns what the function evaluates to.&lt;/p&gt;
&lt;p&gt;
The video also describes the &lt;code&gt;(interactive)&lt;/code&gt; form. By using it, we can
call our function as a command and bind a key combination to call it.&lt;/p&gt;
&lt;p&gt;
I do want to share one quick note on the content though - in the video
I write &lt;code&gt;(dotimes (i 5) (next-line))&lt;/code&gt; to move down 5 lines. Instead of
using &lt;code&gt;dotimes&lt;/code&gt; I could have just given a parameter to &lt;code&gt;next-line&lt;/code&gt; -
that is, wrote &lt;code&gt;(next-line 5)&lt;/code&gt;. I chose to use dotimes in order to
introduce some control code. I wanted newbies to see it here before we
revisit control structuers more in depth in later videos.&lt;/p&gt;
&lt;p&gt;
Speaking of later videos, here&amp;#39;s whats to come, maybe in a different
order.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A video, probably with some internet lore and history on writing
arot13 function which is a special case of a Caesar cipher.&lt;/li&gt;
&lt;li&gt;One on creating a function to make a consistent function header&lt;/li&gt;
&lt;li&gt;How to create a mode so that when you type an emoji in :&amp;#39;s you get
the emoji. So, by typing üêò you&amp;#39;d see this: üêò.&lt;/li&gt;
&lt;li&gt;A function to use an API to replace a word with a synonym.&lt;/li&gt;
&lt;li&gt;And maybe a few more along the way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now, enjoy this short intro to writing functions:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/v3wdkJa87No&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video Link:  &lt;a href=&#34;https://www.youtube.com/watch?v=v3wdkJa87No&#34;&gt;https://www.youtube.com/watch?v=v3wdkJa87No&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 2 - variables</title>
      <link>https://cestlaz.github.io/post/learning-elisp-2/</link>
      <pubDate>Thu, 13 Jul 2023 07:46:04 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-2/</guid>
      <description>&lt;p&gt;
I was planning on writing this yesterday but caught up in watching
&amp;#34;Paths of Glory.&amp;#34;&lt;/p&gt;
&lt;p&gt;
The plan was to have each topic revolve around a &amp;#34;real&amp;#34; project but I
realized that first we have to cover some basics. Specifically,
variables and functions. I was going to cover them together but the
video was getting a little long so we&amp;#39;re doing variables here and
writing functions next time.&lt;/p&gt;
&lt;p&gt;
Like other languages, Emacs uses variables to store values. Also, like
other, or at least some other languages, there are a number of
subtleties and variations.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re keeping things simple for now and will dive deeper as needed in
the future.&lt;/p&gt;
&lt;p&gt;
To create a variable in Emacs we use the special form &lt;code&gt;defvar&lt;/code&gt;. The
&lt;code&gt;defvar&lt;/code&gt; form defines a symbol as a variable - &lt;code&gt;(defvar name)&lt;/code&gt; or,
with an initial value &lt;code&gt;(defvar name &amp;#34;Tom&amp;#34;)&lt;/code&gt;. It turns out, that you
can keep using &lt;code&gt;defvar&lt;/code&gt; to change values in a variable:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tim&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I&amp;#39;m unsure of the internal ramifications of this but that&amp;#39;s not how
we&amp;#39;re supposed to do things. To change (or set) variables, we&amp;#39;re
supposed to use &lt;code&gt;setq&lt;/code&gt; - &lt;code&gt;(setq name &amp;#34;Tammy&amp;#34;)&lt;/code&gt; for instance. Of
course, to make things less simple, we can use &lt;code&gt;setq&lt;/code&gt; without first
using &lt;code&gt;defvar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
Now, &lt;code&gt;defvar&lt;/code&gt; in our case, creates global variables but sometimes we
want something more locally scoped. For that we use the &lt;code&gt;let&lt;/code&gt; form. In
the following example, we create a &amp;#34;global&amp;#34; variable &lt;strong&gt;name&lt;/strong&gt; with
&lt;code&gt;defvar&lt;/code&gt; and then a local one with &lt;code&gt;let&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defvar name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Global Gabe&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; name) &lt;span style=&#34;color:#75715e&#34;&gt;;; prints Global Gabe &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (let ( (name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Local Larry&amp;#34;&lt;/span&gt;) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; name) &lt;span style=&#34;color:#75715e&#34;&gt;;; prints Local Larry&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (setq name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Local Lisa&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; name) &lt;span style=&#34;color:#75715e&#34;&gt;;; prints Local Lisa - we changed the local one &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; name) &lt;span style=&#34;color:#75715e&#34;&gt;;; but Global Gabe was unchanged&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video goes over the details and a few more nuances.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/eQNqIsyw1mo&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Video Link: &lt;a href=&#34;https://www.youtube.com/watch?v=eQNqIsyw1mo&#34;&gt;https://www.youtube.com/watch?v=eQNqIsyw1mo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Elisp 1</title>
      <link>https://cestlaz.github.io/post/learning-elisp-1/</link>
      <pubDate>Thu, 06 Jul 2023 10:16:49 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learning-elisp-1/</guid>
      <description>&lt;p&gt;
Here&amp;#39;s the first video in my learning elisp series.&lt;/p&gt;
&lt;p&gt;
Elisp is a lisp variant embedded within the Emacs editor. You could
actually describe Emacs as an &amp;#34;elisp machine&amp;#34; in the same sense of the
old &lt;a href=&#34;https://en.wikipedia.org/wiki/Lisp_machine&#34;&gt;lisp machines&lt;/a&gt;. It&amp;#39;s not quite the same as the way most other
editors have extension or plugin languages. Other than the core of
Emacs, which is written in C, everything is elisp. Even when you type
in a key. For example, when I type in an &amp;#39;x&amp;#39; on the keyboard, emacs
actually runs the self-insert-command function. When you open a new
file, which you might do in another editor using the File menu, you
actually are running the find-file function in elisp. So instead of
using the menu or the keybinding to open a new file you can write, in
emacs (find-file &amp;#34;some-file&amp;#34;) and run that function and the file will
be opened.&lt;/p&gt;
&lt;p&gt;
In the video, I talk a bit about elisp in general, show how to call
some built in functions, use the help a bit and then set the stage for
the rest of the series.&lt;/p&gt;
&lt;p&gt;
Important functions and keybindings from the video:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C-h i&lt;/td&gt;
&lt;td&gt;info&lt;/td&gt;
&lt;td&gt;bring up the info (help) system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-h k&lt;/td&gt;
&lt;td&gt;describe-key&lt;/td&gt;
&lt;td&gt;bring up info for the next keystroke&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-h f&lt;/td&gt;
&lt;td&gt;describe-function&lt;/td&gt;
&lt;td&gt;bring up help for a function&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C-x C-e&lt;/td&gt;
&lt;td&gt;eval-last-sexp&lt;/td&gt;
&lt;td&gt;evaluates the previous elisp form&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;eval-print-last-sexp&lt;/td&gt;
&lt;td&gt;like above but also print the result&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
In the next video, we&amp;#39;ll learn how to create our own functions,
explore some fundamental elisp structures and functions, and try to
write something useful.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video, enjoy:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/x9Qws7ZOksc&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 81 Elfeed Webkit</title>
      <link>https://cestlaz.github.io/post/using-emacs-81-elfeed-webkit/</link>
      <pubDate>Mon, 26 Jun 2023 15:27:54 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-81-elfeed-webkit/</guid>
      <description>
&lt;p&gt;
Before I get to my elisp series, I thought I&amp;#39;d do a short video on
&lt;a href=&#34;https://github.com/fritzgrabo/elfeed-webkit&#34;&gt;elfeed-webkit&lt;/a&gt;. This was suggested to me by &lt;a href=&#34;https://irreal.org/blog/&#34;&gt;jcs&lt;/a&gt;. Even though I think
elfed-webkit is great - a mini-gamechanger for me, I thought that
there wasn&amp;#39;t enough for a video. Then I realized that in order to run
elfeed-webkit you need to have xwidgets enabled in your Emacs build. I
thought I&amp;#39;d make a video on how I build Emacs and enable features like
xwidgets and then I quickly set up elfeed-webkit.&lt;/p&gt;
&lt;p&gt;
If you use Emacs and reed rss/atom feeds, you really should check out
elfeed and if you use elfeed, then elfeed-webkit. It basically allows
elfeed to render feeds as the appear in a browser right from within Emacs.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the writeup with the video at the bottom.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Building Emacs
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I run Linuxmint which is an Ubuntu Linux derivative. To build Emacs
here, you have to first set up your machine with all the right
developer tools.&lt;/p&gt;
&lt;p&gt;
First, you have to go to your software manager and enable software
sources - I show how to do that in the video.&lt;/p&gt;
&lt;p&gt;
Then you have to install the build tools. I typed the follownig
commands.&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sudo apt update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sudo apt install build-essential
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sudo apt build-dep emacs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The first line updates your package repo lists to reflect that you
turned on the source code repos and the next two install what you
need.&lt;/p&gt;
&lt;p&gt;
Next, you have to grab the Emacs source code. I show you how in the
video using git. Grab it from
&lt;a href=&#34;https://savannah.gnu.org/git/?group=emacs.&#34;&gt;https://savannah.gnu.org/git/?group=emacs.&lt;/a&gt; You can also download the
files old school from the same site.&lt;/p&gt;
&lt;p&gt;
In the video, I walk through the compile but the basics are:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sh autogen.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ./configure --without-compress-install --with-native-compilation --with-json --with-mailutils --with-tree-sitter --with-xwidgets CC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gcc-10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  make
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sudo make install&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If the ./configure line gives errors you might need some extra
libraries - I talk about that in the videos.&lt;/p&gt;
&lt;p&gt;
Also note that the ./configure line I used above includes extra
options that I use for tree-sitter - not needed for elfeed-webkit but
It&amp;#39;s another rabbit hole I went down as a result of reading Mickey
Peterson&amp;#39;s &lt;a href=&#34;https://www.masteringemacs.org/article/how-to-get-started-tree-sitter&#34;&gt;article&lt;/a&gt; on it.&lt;/p&gt;
&lt;p&gt;
Once we&amp;#39;ve got Emacs with the required features we can move to elfeed
webkit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Elfeed and Elfeed Webkit
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I already wrote a series of posts with videos on elfeed. If you&amp;#39;ve
never used it, check it out - here are links to the older posts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-29-elfeed/&#34;&gt;https://cestlaz.github.io/posts/using-emacs-29-elfeed/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-30-elfeed-2/&#34;&gt;https://cestlaz.github.io/posts/using-emacs-30-elfeed-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-31-elfeed-3/&#34;&gt;https://cestlaz.github.io/posts/using-emacs-31-elfeed-3/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/&#34;&gt;https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The video shows how I set it up and also its use. Basically I just
copied the config right over from the elfeed-webkit repo but here it
is for convenience:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (straight-use-package &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elfeed-webkit&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; use straight to install&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; and old-school use-package to configure&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (use-package elfeed-webkit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        :straight
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        :demand &lt;span style=&#34;color:#75715e&#34;&gt;;; !&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        :init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (setq elfeed-webkit-auto-tags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(webkit comics))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        :config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (elfeed-webkit-auto-enable-by-tag)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        :bind (:map elfeed-show-mode-map
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-webkit-toggle)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
So, all of this is in the video. Enjoy:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GGypKmrOf2I&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Working on a new short Emacs series</title>
      <link>https://cestlaz.github.io/post/elisp-series/</link>
      <pubDate>Sat, 17 Jun 2023 19:45:19 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/elisp-series/</guid>
      <description>&lt;p&gt;
It&amp;#39;s been quite some time since my last Emacs video. The lack of
content has been for two reasons. One was my overall feeling of
burnout and the other was that most of my videos involved looking at
new packages and I really wasn&amp;#39;t playing with anything new.&lt;/p&gt;
&lt;p&gt;
Now that I&amp;#39;ve started my retirement the burnout is gone and I&amp;#39;m
starting to think about what my next adventures will be. As I start
figuring out the big picture I thought I&amp;#39;d get back to some Emacs
content.&lt;/p&gt;
&lt;p&gt;
What&amp;#39;s on tap?&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m thinking about a short series on elisp. Now, I&amp;#39;m no elisp master -
I&amp;#39;ve only done enough to get by but I think that could make for some
nice beginner content and I&amp;#39;m sure I can count on the Emacs community
to (in a nice way) tweak my content towards best practices.&lt;/p&gt;
&lt;p&gt;
The plan is to start from the basics and ultimately write a few
interesting functions. Maybe a minor mode or two. Probably nothing
hugely useful but something that will illustrate the concepts. That
said, I want the examples to be at least a little useful and not
totally contrived.&lt;/p&gt;
&lt;p&gt;
I also figure that I probably won&amp;#39;t be doing laundry lists of
functions or going over all the different ways of doing things but
hopefully I can provide pointers and process so other elisp beginners
can find their way to the info they&amp;#39;ll need for their specific
projects.&lt;/p&gt;
&lt;p&gt;
So, stay tuned and look for more Emacs content to come.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 80 Vertico, Marginalia, Consult, and Embark</title>
      <link>https://cestlaz.github.io/post/using-emacs-80-vertico/</link>
      <pubDate>Mon, 25 Oct 2021 16:38:20 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-80-vertico/</guid>
      <description>&lt;p&gt;
In today&amp;#39;s video, we&amp;#39;ll take a look at a few new completion frameworks
for Emacs. For years I&amp;#39;ve been using &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Ivy&lt;/a&gt; and have been very happy with
it but since I decided to rebuild my Emacs config from scratch I
thought I&amp;#39;d try the new kids on the block, &lt;a href=&#34;https://github.com/raxod502/selectrum&#34;&gt;Selectrum&lt;/a&gt; and &lt;a href=&#34;https://github.com/minad/vertico&#34;&gt;Vertico&lt;/a&gt; along
with some support packages.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve liked Ivy from day one and still do. To be honest, from a day to day point of
view, I didn&amp;#39;t notice much difference between Ivy and the newcomers
but I do like their philosophies - they&amp;#39;re supposed to be simple and
minimalist and focus on the Emacs completion API without extending
it. You can read about their respective philosophies on their GitHub
pages. Conveniently, both have sections comparing themselves with the
other frameworks.&lt;/p&gt;
&lt;p&gt;
For configurations, I just cut and pasted the suggested configs.&lt;/p&gt;
&lt;p&gt;
Ultimately I settled on Vertico but both are worth a look.&lt;/p&gt;
&lt;p&gt;
The video shows off Vertico but arguably more importantly, it covers
some of the ancillary packages. First, although I don&amp;#39;t show much
about them are Prescient and Orderless - they let you control how your
selections pop up. I&amp;#39;m using Orderless which lets me search for
components by typing partial completions and using spaces to separate
but it lets you do it in any order. What I mean is that if I&amp;#39;m looking
for the command &amp;#34;vertico-mode&amp;#34; I can search by typing something like
&amp;#34;vert mode&amp;#34; which is what I&amp;#39;ve always done, but I can also do the
search for &amp;#34;mo vert&amp;#34; - typing the second part first. That&amp;#39;s pretty
slick.&lt;/p&gt;
&lt;p&gt;
Next is Marginalia which brings up extra context information when you
search for things. Things like command descriptions or file modes.&lt;/p&gt;
&lt;p&gt;
The third one we look at is Consult which is basically a collection of
useful commands using completions. Basically an answer to Ivy&amp;#39;s
Counsel commands.&lt;/p&gt;
&lt;p&gt;
Finally, and this is the show stopper, the video shows Embark. &lt;/p&gt;
&lt;p&gt;
Links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-6-swiper/&#34;&gt;My post/video on Ivy/Swiper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/raxod502/prescient.el&#34;&gt;Prescient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oantolin/orderless&#34;&gt;Orderless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/raxod502/selectrum&#34;&gt;Selectrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minad/vertico&#34;&gt;Vertico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minad/marginalia/&#34;&gt;Marginalia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minad/consult&#34;&gt;Consult&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oantolin/embark/&#34;&gt;Embark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and of course, the video:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5ffb2at2d7w&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 79 Project</title>
      <link>https://cestlaz.github.io/post/using-emacs-79-project/</link>
      <pubDate>Mon, 11 Oct 2021 11:24:36 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-79-project/</guid>
      <description>&lt;p&gt;
One of the comments on my last video talked about the new project
management support Emacs includes in it&amp;#39;s latest version -
project.el. I remembered reading about it when it rolled around but
then forgot and never checked it out.&lt;/p&gt;
&lt;p&gt;
Up until recently when working in projects I used &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;Projectile&lt;/a&gt;, a great
package by &lt;a href=&#34;https://twitter.com/bbatsov&#34;&gt;Bozhidar Batsov&lt;/a&gt;, also known as Bug. I only used it when
doing development work - that&amp;#39;s when I find myself jumping around
within a group of related files. At other times, I&amp;#39;m pretty much in
one file, do my thing, then move on.&lt;/p&gt;
&lt;p&gt;
I wrote a post and did a video on Projectile a while ago - you can
check it out [[&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/&#34;&gt;https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/&lt;/a&gt;
][here]].&lt;/p&gt;
&lt;p&gt;
As I mentioned in the last video, I decided to rebuild my Emacs config
from scratch and I&amp;#39;m trying to be a bit more minimalist so with that
reminder I got, I figure it&amp;#39;s time to check out the now built in
project.el. If it&amp;#39;s as good as projectile, or even, good enough, it
could be a nice alternative.&lt;/p&gt;
&lt;p&gt;
At it&amp;#39;s core, project.el works similarly to projectile. There&amp;#39;s a
prefix key an then an action which is restricted to your project. For
projectile, it was &lt;code&gt;C-c p&lt;/code&gt; and the default for project.el is &lt;code&gt;C-x
p&lt;/code&gt;. No big difference there. Projectile seems to have many many more
options but in general, I find that all I need is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Switch to a project - &lt;code&gt;C-x p p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Find or open a file in a project - &lt;code&gt;C-x p f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Switch buffers in a project - &lt;code&gt;C-x p b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Delete all the project buffers - &lt;code&gt;C-x p k&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List the project buffers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Project.el has all except listing all the buffers. It also supports a
few other features that I think I&amp;#39;ll find useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;project dired - &lt;code&gt;C-x p d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;project shell (or eshell) &lt;code&gt;C-x p s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;project regex search and variants &lt;code&gt;C-x p g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#39;m not sure if projectile has these. It probably does and I could see
them being useful. I probable won&amp;#39;t use the regex searches much
because I&amp;#39;ll likely use other tools for those like consult-ripgrep.&lt;/p&gt;
&lt;p&gt;
So, it certainly seems like project.el has enough coverage for my
purposes. Another difference between the two projects is that
project.el only supports a couple of project definitions - things that
are supported by Emacs&amp;#39; VC system ad things supported by Emacs EDE
thing (which I&amp;#39;ve never really played with). I seem to recall
Projectile being more flexible.&lt;/p&gt;
&lt;p&gt;
In any event, project.el looks like it&amp;#39;s a nice simple alternative at
least for me. Check out the video for the runthrough:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/UagDCTjcifY&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>My project grading workflow</title>
      <link>https://cestlaz.github.io/post/using-emacs-78-grading/</link>
      <pubDate>Sun, 10 Oct 2021 10:44:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-78-grading/</guid>
      <description>&lt;p&gt;
Grading sucks. Even for a well crafted assignment it takes time and
rarely does it give you the same insights into your students as you
can get from just observing them and working with them, at least when
the environment supports you doing so. &lt;/p&gt;
&lt;p&gt;
This leads lots of teachers to go to auto graders. I can&amp;#39;t bring
myself going along with that. While assignments are imperfect and
tedious to grade, they do provide some insight to your students and
that&amp;#39;s an important part about being a teacher.&lt;/p&gt;
&lt;p&gt;
So, I always keep my eye out for ways to improve my project gradiing
workflow.&lt;/p&gt;
&lt;p&gt;
In the video below, I step through my process. It&amp;#39;s mostly Emacs but I
also use GitHub classroom and the terminal along the way.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re here as for the Emacs, I&amp;#39;d any thoughts on alternatives or
improvements.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re here as a teacher, I&amp;#39;d love to hear what your flow is like
and what tools you use.&lt;/p&gt;
&lt;p&gt;
Enjoy&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/7HLVcQi8GGk&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 76 Bookmarks and Burly</title>
      <link>https://cestlaz.github.io/post/using-emacs-76-bookmarks-burly/</link>
      <pubDate>Fri, 23 Oct 2020 13:41:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-76-bookmarks-burly/</guid>
      <description>&lt;p&gt;
I read a post on &lt;a href=&#34;https://www.reddit.com/r/emacs/&#34;&gt;/r/emacs&lt;/a&gt; the other day asking if people used Emacs
bookmarks among other things. I thought about it for a bit and
wondered why I didn&amp;#39;t use Bookmarks? I did set a few bindings to load
frequently used files and those are like bookmarks but I have to set
those up in my configuration. It turns out that Emacs bookmarks are
pretty easy and effective and work right out of the box. I cover the
basics in the video and you can also check the documentation &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
In the video I mention that the bookmark bindings are part of the
bindings used for registers which also include rectangles. If you&amp;#39;re
interested in those aspects you can find out all about registers by
viewing &lt;a href=&#34;https://www.youtube.com/watch?v=u1YoF4ycLTY&#34;&gt;this nice video&lt;/a&gt; by Prot and I cover rectangle editing &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-28-rectangles/&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
I also noticed another post on /r/emacs about &lt;a href=&#34;https://github.com/alphapapa/burly.el&#34;&gt;burly&lt;/a&gt; - a package for
managing windows and their associated buffers. It&amp;#39;s pretty cool. In
the video I confused myself and thought it might be mapping the
buffers to windows wrong but that was just me confusing myself. &lt;/p&gt;
&lt;p&gt;
Burly uses bookmarks to store the configurations which is cool and it
was much easier for me to get my head around it than other
solutions. Burly&amp;#39;s install instructions use &lt;a href=&#34;https://github.com/quelpa/quelpa&#34;&gt;quelpa&lt;/a&gt; and
&lt;a href=&#34;https://github.com/quelpa/quelpa-use-package&#34;&gt;quelpa-use-package&lt;/a&gt; so now it looks like I&amp;#39;ll have to figure those out
as well :-).&lt;/p&gt;
&lt;p&gt;
The run through is all in the video.&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/JVFnaQVNEE0&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 75 - Bufler</title>
      <link>https://cestlaz.github.io/post/using-emacs-75-bufler/</link>
      <pubDate>Tue, 22 Sep 2020 13:17:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-75-bufler/</guid>
      <description>&lt;p&gt;
Quick Emacs hit today.&lt;/p&gt;
&lt;p&gt;
After my last video, I received a comment noting that I was using
ibuffer and that there was another package I might want to consider -
&lt;a href=&#34;https://github.com/alphapapa/bufler.el&#34;&gt;bufler&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
I started with basic ibuffer and then started to &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/&#34;&gt;customize it&lt;/a&gt; to group
buffers but that was always somewhat finicky. More often than not I
couldn&amp;#39;t tune it the way I wanted. Most recently, I started using
&lt;a href=&#34;https://github.com/purcell/ibuffer-projectile&#34;&gt;ibuffer-projectile&lt;/a&gt; which group projects for me but lost the other
customizations. In any event, I was more or less happy with things.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/alphapapa/bufler.el&#34;&gt;Bufler&lt;/a&gt; though looks to be a nice alternative. Out of the box it looks
like it groups things pretty well and has a nice Emacs &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;hydra&lt;/a&gt; that you
can bring up with &lt;code&gt;?&lt;/code&gt; to remind you how to do things like kill one or
more buffers.  &lt;/p&gt;
&lt;p&gt;
Right now, I&amp;#39;m using it as an ibuffer replacement but it also has its
own version of switch buffer that I plan to play with as well. &lt;/p&gt;
&lt;p&gt;
The only knit I&amp;#39;ve found thus far is that when you run bufler, it
splits the window and lists the buffers in the new space. If I&amp;#39;m using
ibuffer I want it to use the whole Emacs frame. Otherwise I just use
ivy-switch-buffer (or now bufler-switch-buffer). I couldn&amp;#39;t figure out
a way built in so ended up writing a small function: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun mz/bufler-one-window (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; force-refresh)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (interactive &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (bufler-list)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (delete-other-windows)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x C-b&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mz/bufler-one-window&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Check out the video for more details.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/KqvjeRf84do&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 74 Eglot</title>
      <link>https://cestlaz.github.io/post/using-emacs-74-eglot/</link>
      <pubDate>Mon, 31 Aug 2020 13:03:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-74-eglot/</guid>
      <description>&lt;p&gt;
I primarily program in four languages these days -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clojure &lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And most of the time, my Emacs configuration has handled each one
differently. Cider for Clojure, Irony for C++, Elpy and Jedi for
Python and Java I could never figure out. This is of course on top of
tools that work across languages like company for completions, or
flycheck for general language syntax checking. &lt;/p&gt;
&lt;p&gt;
A while ago I heard about lsp-mode - Language Server Protocol
mode. Basically, you set up the mode and it connects to back end
language servers. The idea is to keep configuration down and provide a
consistent interface across langauges while leveraging the types of
support these back ends can provide. I wrote a bit about lsp-mode and
made a video and you can find it &lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-58-lsp-mode/&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
When I first tried LSP it just didn&amp;#39;t work. I tried it again later and
it basically worked but was finicky. Configuration took more work than
I wanted, particularly for customizing per language and even when
working it didn&amp;#39;t work as expected. &lt;/p&gt;
&lt;p&gt;
This past summer, I had to teach using Java so I tried lsp-mode
again. Setup wasn&amp;#39;t too bad and most of the issues were more related
to Java than to lsp-mode but I didn&amp;#39;t like the results. While it might
be great for the professional developer there were too many popups and
made the screen way too busy for teaching. &lt;/p&gt;
&lt;p&gt;
Still, the idea of a single simple configuration was enticing.&lt;/p&gt;
&lt;p&gt;
So, when I decided to get my configuration together for the Fall
semester I decided to try yet again and discovered &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt; for
Emacs. Eglot turned out to be easier to install and gave me more of
the experience I was looking for.&lt;/p&gt;
&lt;p&gt;
To start, I set it up for C++ using&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package eglot :ensure t)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-to-list &amp;#39;eglot-server-programs &amp;#39;((c++-mode c-mode) &amp;#34;clangd-10&amp;#34;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &amp;#39;c-mode-hook &amp;#39;eglot-ensure)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &amp;#39;c++-mode-hook &amp;#39;eglot-ensure)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Eglot defaults to &lt;a href=&#34;https://github.com/MaskRay/ccls&#34;&gt;ccls&lt;/a&gt; as a C++ language server. I didn&amp;#39;t want to have
to build it but was able to &lt;code&gt;apt-get install clangd-10&lt;/code&gt; and use that
instead by adding clangd-10 to the eglot-server-programs in the second
configuration line.&lt;/p&gt;
&lt;p&gt;
For python I had to install &lt;a href=&#34;https://github.com/palantir/python-language-server&#34;&gt;pyls&lt;/a&gt;, the Python Language Server but that
was easy to do and then I just had to add &lt;code&gt;(add-hook &amp;#39;python-mode-hook
&amp;#39;eglot-ensure)&lt;/code&gt; to my config.&lt;/p&gt;
&lt;p&gt;
Finally, Java was more of an issue I had to get &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt; on my
system. It turns out that lsp-mode installed it for me already so I
just had to point to it:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defconst my-eclipse-jdt-home &amp;#34;/home/zamansky/.emacs.d/.cache/lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.5.800.v20200727-1323.jar&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun my-eglot-eclipse-jdt-contact (interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;Contact with the jdt server input INTERACTIVE.&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (let ((cp (getenv &amp;#34;CLASSPATH&amp;#34;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (setenv &amp;#34;CLASSPATH&amp;#34; (concat cp &amp;#34;:&amp;#34; my-eclipse-jdt-home))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (unwind-protect (eglot--eclipse-jdt-contact nil)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (setenv &amp;#34;CLASSPATH&amp;#34; cp))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setcdr (assq &amp;#39;java-mode eglot-server-programs) #&amp;#39;my-eglot-eclipse-jdt-contact)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &amp;#39;java-mode-hook &amp;#39;eglot-ensure)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
So far, I&amp;#39;m liking eglot very much. I&amp;#39;ll probably check lsp-mode out
again somewhere down the line but as of now it&amp;#39;s Cider for Clojure and
Eglot for everything else.&lt;/p&gt;
&lt;p&gt;
The video has a run through and demo. Check it out.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ROnceqt3kpE&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 73 - Ripgrep and updating the blog</title>
      <link>https://cestlaz.github.io/post/using-emacs-72-rg/</link>
      <pubDate>Sun, 14 Jun 2020 11:58:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-72-rg/</guid>
      <description>&lt;p&gt;
As I said in my &lt;a href=&#34;As I mentioned in my &#34;&gt;last post&lt;/a&gt;, I&amp;#39;m moving to a new Hugo theme. I decided
on &lt;a href=&#34;https://github.com/mitrichius/hugo-theme-anubis&#34;&gt;Anubis&lt;/a&gt;. It&amp;#39;s simple and clean. Unfortunately, in this change over,
many things broke. Specifically, all my embedded html. Using earlier
version of Hugo I could directly embed HTML and it would render. Now I
have to bracket the HTML with special org markup - &lt;strong&gt;#+begin_export html&lt;/strong&gt; and &lt;strong&gt;#+end_export html&lt;/strong&gt;. &lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
#+begin_export html
&amp;lt;h1&amp;gt;html stuff to render goes in here &amp;lt;/h1&amp;gt;
#+end_export
&lt;/pre&gt;
&lt;p&gt;
Minimally I had to find all my embedded videos and all my embedded
Tweets. There&amp;#39;s probably a lot more. Fortunately with Emacs this is
pretty easy. I used &lt;a href=&#34;https://github.com/dajva/rg.el&#34;&gt;rg.el&lt;/a&gt; which is an Emacs front end to &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;. If
you don&amp;#39;t know ripgrep, it&amp;#39;s kind of like a super fast, super enhanced grep on
steroids. &lt;/p&gt;
&lt;p&gt;
In Emacs, I was able to do a ripgrep search which created a buffer
containing all the embedded html fragments from all my blog posts
across all the directories. I then used Emacs&amp;#39; &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt; feature which
allowed me to edit that combined buffer and save all the results back
to the original files. &lt;/p&gt;
&lt;p&gt;
All in all it just took a few minutes. There are still some things I
have to clean up from older posts but at least the site is workable now.&lt;/p&gt;
&lt;p&gt;
Check out the video for a walkthrough:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/OcR-Ke2CiPo&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 72 - Customizing Elfeed</title>
      <link>https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/</link>
      <pubDate>Thu, 21 May 2020 14:47:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/</guid>
      <description>&lt;p&gt;
I made this video write after I made the &lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-71-openwith/&#34;&gt;openwith&lt;/a&gt; one so even though
I don&amp;#39;t mention anything in this video, I wanted to share some updates
on dired and openwith.&lt;/p&gt;
&lt;p&gt;
I got a lot of suggestions on alternate ways to achieve the workflow I
was seeking - being able to open a file using an external viewer. One
person noted that under newer versions of Emacs, the &lt;code&gt;W&lt;/code&gt; key is bound
to the command &lt;code&gt;(browse-url-of-dired-file)&lt;/code&gt; which does exactly what I
wanted. Problem solved with no customizing or extra packages. &lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a good thing I got a solution when I did - I needed it. I&amp;#39;ve been
reviewing applications for my new Teacher Certification program. It&amp;#39;s
a 21 credit graduate program that results in participants receiving a
brand spanking new New York State Computer Science teaching
license. The applications consist of a bunch of files incuding PDFs,
images (photos), doc and text files and source code samples. I&amp;#39;ve got
all the applications in a Google drive which I&amp;#39;ve downloaded and now I
can just drop into dired and go through each directory, hit &lt;code&gt;enter&lt;/code&gt; for
source code and it&amp;#39;s loaded in an Emacs buffer and &lt;code&gt;W&lt;/code&gt; for everything
else.&lt;/p&gt;
&lt;p&gt;
Now for today&amp;#39;s video. It&amp;#39;s about a small customization I made to the
elfeed RSS reader. It&amp;#39;s also about the advantages and limitations of
Emacs built in documentation. I&amp;#39;m not particularly strong in elisp -
I&amp;#39;m a dabbler at best but even so, using Emac&amp;#39;s built in help I was
able to get to elisp code that was very close to what I wanted to do
and then customize it. It also looks at the limitations - there still
some code that I looked at that I have no clue as to what it does.&lt;/p&gt;
&lt;p&gt;
Specifically, elfeed lets you open a link in an external brower by
hitting &lt;code&gt;b&lt;/code&gt;. That&amp;#39;s how I like reading most of my feeds. I&amp;#39;ll scroll
up and down and hit &lt;code&gt;b&lt;/code&gt; for what I want to read. The trouble is that
when you hit &lt;code&gt;b&lt;/code&gt; focus goes to the browser and at the same time,
elfeed marks the entry as read and advances. I want it not to mark as
read. After I made the video, I decided I also didn&amp;#39;t want elfeed to
advance to the next story. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what I did.&lt;/p&gt;
&lt;p&gt;
I went in to elfeed and instead of typing &lt;code&gt;b&lt;/code&gt; on an entry, I ran
&lt;code&gt;(describe-key&lt;/code&gt;)~ which is bound to &lt;code&gt;C-h k&lt;/code&gt;. I then typed &lt;code&gt;b&lt;/code&gt; which
revealed that it ran &lt;code&gt;elfeed-search-browse-url&lt;/code&gt;. I followed the
hyperlinks in the help to open &lt;code&gt;elfeed-search.el&lt;/code&gt; and found the
function. From there I just copied it over to my Emacs config, tweaked
it and voila, problem solved.&lt;/p&gt;
&lt;p&gt;
The video has all the details. Enjoy.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/G1NGNR40lB4&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 71 Openwith</title>
      <link>https://cestlaz.github.io/post/using-emacs-71-openwith/</link>
      <pubDate>Wed, 13 May 2020 11:45:39 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-71-openwith/</guid>
      <description>&lt;p&gt;
I spend most of my time in Emacs but still use the shell and browser
for some things. One of the things I use my shell for is to launch
libreoffice to view and edit docx files and spreadsheets, evince for
pdf files and imagemagick for image files. Yes, I know I can view all
of these in Emacs but there are a few limitations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Emacs chokes on large files&lt;/li&gt;
&lt;li&gt;I can&amp;#39;t edit the docx file or the image&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, I hop to the shell and launch the program I need on the files in
question. It&amp;#39;s fine but it does mean I end up with two windows for
each operation - the terminal from which I run, say, libreoffice and
libreoffice itself. I will also have my browser and one ore more Emacs
windows open so things can get a bit cluttered.&lt;/p&gt;
&lt;p&gt;
Now, on the Emacs side, one tool that I still haven&amp;#39;t gotten myself to
regularly use is dired. I figured dired could be made to do what I
want - quickly and easily launch programs to view and edit my files.&lt;/p&gt;
&lt;p&gt;
By default, dired opens files in a new Emacs buffer. That&amp;#39;s fine for
text files but not the behavior I want for docx and other files. It
turns out there are a number of good solutions. The one that I&amp;#39;ll
likely stick with is &lt;a href=&#34;https://github.com/jpkotta/openwith/tree/1dc89670822966fab6e656f6519fdd7f01e8301a&#34;&gt;openwith&lt;/a&gt; but there are other options as
well. Check out the video for more:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/_qjJ5UzInRI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 70 Org Protocol</title>
      <link>https://cestlaz.github.io/post/using-emacs-70-org-protocol/</link>
      <pubDate>Fri, 27 Mar 2020 15:15:28 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-70-org-protocol/</guid>
      <description>&lt;p&gt;
I spent part of today cleaning up my Emacs workflow. Specifically, how
I capture emails and links into org-mode&lt;/p&gt;
&lt;p&gt;
I already wrote about how I used org-capture (&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-23-capture-1/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-24-capture-2/&#34;&gt;here&lt;/a&gt;). It&amp;#39;s
pretty clean and easy but there was one thing that always nagged at
me. When I capture from mu4e within Emacs by hitting &lt;code&gt;C-c m&lt;/code&gt; it&amp;#39;s set
up to automatically populate the capture template with a link to the
email labelled with the email&amp;#39;s subject. When I do it from Gmail or
to store a web link as a bookmark, I have to copy and paste the link
in manually.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s where &lt;a href=&#34;https://orgmode.org/worg/org-contrib/org-protocol.html&#34;&gt;org-protocol&lt;/a&gt; comes in. We can use org-protocol to link
between a browser and Emacs. &lt;/p&gt;
&lt;p&gt;
First you have to run Emacs as a server. You can start the Emacs
server using &lt;code&gt;(server-start)&lt;/code&gt; but I always run emacs using a shortcut
key bound to &lt;code&gt;emacsclient -c -a &amp;#34;&amp;#34;&lt;/code&gt;. This runs emacsclient and
connects to my running Emacs server but if the server isn&amp;#39;t running it
starts it. That meant that I only had to add &lt;code&gt;(require &amp;#39;org-protocol)&lt;/code&gt;
to my Emacs config file.&lt;/p&gt;
&lt;p&gt;
I followed the instructions in the documentation by typing in these
lines:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gconftool-2 -s /desktop/gnome/url-handlers/org-protocol/command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/local/bin/emacsclient %s&amp;#39;&lt;/span&gt; --type String
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gconftool-2 -s /desktop/gnome/url-handlers/org-protocol/enabled --type Boolean true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
but that didn&amp;#39;t seem to work.&lt;/p&gt;
&lt;p&gt;
I ended up following the instructions I found in &lt;a href=&#34;https://stackoverflow.com/questions/7464951/how-to-make-org-protocol-work&#34;&gt;this post&lt;/a&gt; creating a
file named &lt;code&gt;org-protocol.desktop&lt;/code&gt; in the folder
 &lt;code&gt;~/.local/share/applications&lt;/code&gt; containing:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Desktop Entry&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;org-protocol
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Exec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;emacsclient %u
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Application
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Terminal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Categories&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;System;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MimeType&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x-scheme-handler/org-protocol;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
and then running &lt;code&gt;update-desktop-database
~/.local/share/applications/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
This seemed to do the trick. &lt;/p&gt;
&lt;p&gt;
I also modified my link capture template: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Link&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Sync/orgfiles/links.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Links&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %a %^g\n %?\n %T\n %i&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Finally, to get things basically to work, I installed &lt;a href=&#34;https://github.com/sprig/org-capture-extension&#34;&gt;this&lt;/a&gt;
extension. I configured it to use my &amp;#34;l&amp;#34; or link capture
template. Once everything was installed I went to a web site and
clicked the plugin. I was popped into Emacs with the capture template
up and filled in. I did it again, this time marking text and hitting
the button and again everything worked.&lt;/p&gt;
&lt;p&gt;
Looking at the template, the &lt;code&gt;%a&lt;/code&gt; is replaced by the web page link,
the &lt;code&gt;%i&lt;/code&gt; with the marked text, the &lt;code&gt;%T&lt;/code&gt; with the timestamp and the
cursor is left at the &lt;code&gt;%?&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
I wanted to make one more change. I wanted to also use this for
storing Gmail links. The problem was that I wanted my links to be
sored in a file named &lt;code&gt;links.org&lt;/code&gt; while I wanted my Gmails stored
under my main org file &lt;code&gt;i.org&lt;/code&gt;. By reading the org-protocol page I
found that I could just create a bookmark.&lt;/p&gt;
&lt;p&gt;
Copied mostly from the docs, I made a bookmark with this as the link
(all in one line):&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;javascript&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-protocol://capture://m/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      encodeURIComponent(&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      encodeURIComponent(document.&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      encodeURIComponent(window.&lt;span style=&#34;color:#a6e22e&#34;&gt;getSelection&lt;/span&gt;())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
It worked perfectly. &lt;/p&gt;
&lt;p&gt;
This time I used this as the template:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mail To Do&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Sync/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do and Notes&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* TODO %a\n %?&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:prepend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it. Now I can store emails in Emacs or Gmail as well as
bookmarks without any cut and paste. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a video with the walkthrough:&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/FYKcVKg0OCU&#34;&gt;https://www.youtube.com/embed/FYKcVKg0OCU&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 69 Floobits</title>
      <link>https://cestlaz.github.io/post/using-emacs-69-floobits/</link>
      <pubDate>Sat, 21 Mar 2020 10:52:37 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-69-floobits/</guid>
      <description>&lt;p&gt;
Hunter, like most other schools has gone remote. I taught my first two
&lt;a href=&#34;https://cestlaz.github.io/post/teaching-online-day-01/&#34;&gt;online classes&lt;/a&gt; on Thursday. Currently, I&amp;#39;m using Zoom for synchronous
stuff and a mailing list and slack for async. &lt;/p&gt;
&lt;p&gt;
There are still some missing pieces. When we&amp;#39;re all together, it&amp;#39;s
easy to look at a student&amp;#39;s work and talk them through issues. It&amp;#39;s
also easy to get students to work together, at least to a point. With
everyone locked up in their own homes, real time collaboration is
harder. Sure, we can use tools like GitHub issues and pull requests
for async code commentary but what about live help and pairing? If
we want to use an online environment, &lt;a href=&#34;https://repl.it&#34;&gt;repl.it&lt;/a&gt;  - a platform I very
much like fits the bill. On the other hand, what do you use if you
want to work collaboratively in real time using a local editor. &lt;/p&gt;
&lt;p&gt;
That&amp;#39;s where &lt;a href=&#34;https://floobits.com&#34;&gt;Floobits&lt;/a&gt; comes in. Floobits is a platform that provides
for collaborative live editing. It works with Emacs, Neovim, Sublime
Text, Atom, and IntelliJ (and maybe all the Jetbrains IDEs). They
support a free tier which only has public workspaces but that&amp;#39;s fine,
as far as I&amp;#39;m concerned, for educational purposes. &lt;/p&gt;
&lt;p&gt;
Check out the video to see how I set it up:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/-0x4PV1EB5w&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 68 - Tramp and org-publish</title>
      <link>https://cestlaz.github.io/post/using-emacs-68-tramp-org-publish/</link>
      <pubDate>Sat, 14 Mar 2020 20:57:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-68-tramp-org-publish/</guid>
      <description>&lt;p&gt;
I maintain a couple of small simple web sites. One provides
information about my undergraduate &lt;a href=&#34;http://info.huntercs.org/scholars/&#34;&gt;honors CS program&lt;/a&gt; and another that
isn&amp;#39;t live yet is a FAQ for my &lt;a href=&#34;http://info.huntercs.org/teacher_ed/faq.html&#34;&gt;CS teacher certification program&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Traditionally I would use ssh to connect to the host machine, fire up
Emacs and edit the html files to update the sites. I always forget
that with Emacs we can do better.&lt;/p&gt;
&lt;p&gt;
One way is with &lt;a href=&#34;https://www.emacswiki.org/emacs/TrampMode&#34;&gt;Tramp Mode&lt;/a&gt;. I was reminded of this by JCS&amp;#39;s recent
&lt;a href=&#34;https://irreal.org/blog/?p=8705&#34;&gt;post&lt;/a&gt;. With Tramp, you can open a file on a remote host and edit it in
place. This means I get my full Emacs config but am editing the file
over there!!! It&amp;#39;s very slick but I always forget about it even though
I had already made &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-25-tramp/&#34;&gt;a video on it&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Tramp is cool but I was still editing the html directly. I figured it
would be easier to just use org-mode but that required figuring out
how to make the html produced by org-mode look nice. Fortunately, it&amp;#39;s
not hard.&lt;/p&gt;
&lt;p&gt;
We can turn off the default CSS used by org-mode
using:&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+OPTIONS&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: html-style:nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Or if we want add custom CSS using one or more of these:&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+HTML_HEAD&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;style1.css&amp;#34; /&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+HTML_HEAD_EXTRA&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: &amp;lt;link rel=&amp;#34;alternate stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;style2.css&amp;#34; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We can also embed html and custom CSS in our org-files.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://orgmode.org/manual/CSS-support.html&#34;&gt;This page&lt;/a&gt; from the org-mode documentation also lists many of the html
components that are styled by default. &lt;/p&gt;
&lt;p&gt;
Armed with custom CSS we can use the org-mode exporting facilities to
convert the file to a web page but the final step is to use
&lt;a href=&#34;https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html&#34;&gt;org-publish&lt;/a&gt;. This lets us export one or more org-mode files and save
the result in some specified directory. You can also publish static
files like CSS files and images to go with the org to html
files. Finally by using the tramp syntax we can publish to a remote
host. &lt;/p&gt;
&lt;p&gt;
The goes through all of this. &lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/tlCOsigPjk8&#34;&gt;https://www.youtube.com/embed/tlCOsigPjk8&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 67 - Emacs vs Vi a rant with some historical perspective</title>
      <link>https://cestlaz.github.io/post/using-emacs-67-emacs-rant/</link>
      <pubDate>Sun, 23 Feb 2020 07:57:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-67-emacs-rant/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been meaning to do my version of the Emacs VI rant for a while. A
few years ago I staged out a video showing what it would be like for a
beginner to start with Emacs, Vim, Atom, and Sublime Text but decided
it would be long, unwieldy and clunky to present - particularly when
it came to customization. &lt;/p&gt;
&lt;p&gt;
I tabled it for a while but recently have been seeing a bunch of
threads, videos and posts talking about Emacs and Vim. Some are really
well done, balanced and sensible like Derek Taylor&amp;#39;s over on
&lt;a href=&#34;https://www.youtube.com/watch?v=VaBdlcYaZLQ&#34;&gt;DistroTube&lt;/a&gt;. On the other hand, I saw plenty of what makes me
nuts. People claiming things like style is objectively better than
the other or was created with speed or ergonomics in mind so is
superior and the like.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my take. I think it&amp;#39;s a little different than some of the other
rants because I look a bit at history and evolution and also at the
day to day reality of editing. Hope you enjoy it.&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/0M6erlK57go&#34;&gt;https://www.youtube.com/embed/0M6erlK57go&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 66 - an eshell switcher in elisp</title>
      <link>https://cestlaz.github.io/post/using-emacs-66-eshell-elisp/</link>
      <pubDate>Sat, 08 Feb 2020 08:12:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-66-eshell-elisp/</guid>
      <description>&lt;p&gt;
I thought it was time to give &lt;a href=&#34;https://masteringemacs.org/article/complete-guide-mastering-eshell&#34;&gt;eshell&lt;/a&gt; in Emacs another try. It has some
pretty cool features but for whatever reason, I&amp;#39;ve never really been
able to adopt Emacs as my go to shell.&lt;/p&gt;
&lt;p&gt;
Eshell out of the box is pretty cool but could use some
enhancements. When launching at login it doesn&amp;#39;t know about the path
you set in your .bashrc or .zshrc in my case files. It just seemed to
have problems with paths in general but that was fixed with the
exce-path-from-shell package. The prompt also needed some fixing up
along with some other tweaks. &lt;/p&gt;
&lt;p&gt;
I found &lt;a href=&#34;https://github.com/manateelazycat/aweshell&#34;&gt;aweshell&lt;/a&gt; which looked promising but it wasn&amp;#39;t on melpa so I
had to clone it separately. I also noticed that it basically tied
together some packages I could download myself and added a shell
switcher but didn&amp;#39;t bind the keys.&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d dive into elisp -something I haven&amp;#39;t done in a while to
write my own.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my current complete eshell config:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package exec-path-from-shell
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (exec-path-from-shell-initialize))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (use-package fish-completion
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    :config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (global-fish-completion-mode))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; (use-package eshell-prompt-extras &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; :ensure t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; :config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; (setq epe-show-python-info nil)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; )&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (use-package eshell-git-prompt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (eshell-git-prompt-use-theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git-radar&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
And here&amp;#39;s the code I ended up with for my shell switcher:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;+BEGIN_SRC emacs-lisp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cl-lib&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defun select-or-create (arg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Commentary ARG.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (if (string= arg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New eshell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (eshell &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (switch-to-buffer arg)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (defun eshell-switcher (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; arg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Commentary ARG.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (let* (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (buffers (cl-remove-if-not (lambda (n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-local-value&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;major-mode&lt;/span&gt; n) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eshell-mode&lt;/span&gt;)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-list&lt;/span&gt;)) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (names (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; (lambda (n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-name&lt;/span&gt; n)) buffers))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (num-buffers (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; buffers) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (in-eshellp (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; major-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eshell-mode&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (cond ((&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; num-buffers &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (eshell (or arg &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ((not in-eshellp) (switch-to-buffer (&lt;span style=&#34;color:#a6e22e&#34;&gt;car&lt;/span&gt; buffers)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (select-or-create (&lt;span style=&#34;color:#a6e22e&#34;&gt;completing-read&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Select Shell:&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New eshell&amp;#34;&lt;/span&gt; names)))))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
I currently bound eshell-switcher to &lt;code&gt;CTRL-z e&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;
The video goes through the whole process:&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/-dIjFZBDt64&#34;&gt;https://www.youtube.com/embed/-dIjFZBDt64&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 65 - Live Python</title>
      <link>https://cestlaz.github.io/post/using-emacs-65-live-python/</link>
      <pubDate>Sun, 02 Feb 2020 13:13:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-65-live-python/</guid>
      <description>&lt;p&gt;
The other day I stumbled upon Emacs&amp;#39;s &lt;a href=&#34;https://github.com/donkirkby/live-py-plugin&#34;&gt;Live Coding&lt;/a&gt; plugin. It takes
interactive coding up to the next level. &lt;/p&gt;
&lt;p&gt;
Normally, when you code Python, if you&amp;#39;re working in a REPL, every
time you hit &amp;lt;Enter&amp;gt; the line you just typed is evaluated. When you&amp;#39;re
working ina source file, you&amp;#39;re just editing until you send the file
into a Python interpreter.&lt;/p&gt;
&lt;p&gt;
With this module, your file is continually evaluated as you type and
it shows you the results in a side window. &lt;/p&gt;
&lt;p&gt;
If you type in:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(c&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;c)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
The live python window will display something like:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
If you change one of the variables, everything updates.&lt;/p&gt;
&lt;p&gt;
It gets even cooler when you add loops, functions, and even recursion.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s also support for unit testing.&lt;/p&gt;
&lt;p&gt;
It works, to varying degrees with Emacs, PyCharmm, Sublime Text and
there&amp;#39;s even a browser version. Emacs handles the basics and it seems
that the Sublime Text version adds support for some graphing. PyCharm
has that plus turtle graphics.&lt;/p&gt;
&lt;p&gt;
While this is &lt;strong&gt;very&lt;/strong&gt; cool, to be honest, I don&amp;#39;t know how useful this
is going to be but I&amp;#39;m very excited to play with it in the Fall when
I&amp;#39;ll be teaching Python again.&lt;/p&gt;
&lt;p&gt;
Check out this short video to see it in action:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/bYy90EUAh98&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 64 - Notmuch</title>
      <link>https://cestlaz.github.io/post/using-emacs-64-notmuch/</link>
      <pubDate>Sat, 18 Jan 2020 08:52:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-64-notmuch/</guid>
      <description>
&lt;p&gt;
I&amp;#39;ve been using the gmail web interface for a long time. My first
email or at least the oldest one still in the system dates back to Oct
18, 2004 7:29am. It was a letter to a buddy about an indoor turkey
fryer and if he needed a lift to Fairway the following morning to
shop.&lt;/p&gt;
&lt;p&gt;
Before that, I used my &lt;a href=&#34;http://panix.com&#34;&gt;Panix&lt;/a&gt; shell account - probably with &lt;a href=&#34;https://en.wikipedia.org/wiki/Pine_%2528email_client%2529&#34;&gt;PINE&lt;/a&gt;. Work
email was using my own servers at Stuy along with either PINE or Emacs
using VM mode which has long been deprecated.&lt;/p&gt;
&lt;p&gt;
I haven&amp;#39;t bitten the bullet and left gmail yet but I thought it was
time to move my personal email over to an Emacs client. I currently
use &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/&#34;&gt;MU4E&lt;/a&gt; and am pretty happy with it but figured I&amp;#39;d give another
contender a try - &lt;a href=&#34;https://notmuchmail.org/&#34;&gt;Notmuch&lt;/a&gt;. Both rely on some other backend to pull
email form an imap server. I&amp;#39;m currently using mbsync. I&amp;#39;m not
thrilled with it but then, I&amp;#39;m not thrilled with offlineimap which is,
as best I can figure the only other alternative.&lt;/p&gt;
&lt;p&gt;
In the video I&amp;#39;ll show a bit about notmuch and how it comapres to
mu4e. Both are nice packages and I&amp;#39;d love one email client that
combined the best of both and maybe added a bit more shine.&lt;/p&gt;
&lt;p&gt;
At their cores, both mu4e and notmuch are built on top of &lt;a href=&#34;https://xapian.org/&#34;&gt;xapain&lt;/a&gt; and
leverage search to manage your emails. Here are a few of the key
differences:&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Mu4e
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Folder based&lt;/li&gt;
&lt;li&gt;Easier to handle separate email accounts (and keep them separate)&lt;/li&gt;
&lt;li&gt;Better org-mode integration&lt;/li&gt;
&lt;li&gt;Automatically calls your IMAP sync program&lt;/li&gt;
&lt;li&gt;Changes things on the server (moves, deletes etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Notmuch
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Tags based&lt;/li&gt;
&lt;li&gt;Doesn&amp;#39;t touch or change anything on the serer (doesn&amp;#39;t delete or
move things there, just tags locally)&lt;/li&gt;
&lt;li&gt;Combines multiple accounts to appear as one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Both have a nice search based interface.&lt;/p&gt;
&lt;p&gt;
Right now, the fact that notmuch doesn&amp;#39;t seamlessly delete emails
from the server might be a deal breaker for me. I have a limited quota
at Hunter so I really do have to watch the overall amount of storage I
use.&lt;/p&gt;
&lt;p&gt;
For now, I&amp;#39;m going to start pulling down my email and seeing how I
like mu4e for all my email needs. I&amp;#39;ll probably play a bit more with
notmuch as well and who knows‚Ä¶.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my post and video on setting up and using mu4e:&lt;/p&gt;
&lt;p&gt;
https://cestlaz.github.io/posts/using-emacs-39-mu4e/&lt;/p&gt;
&lt;p&gt;
And here&amp;#39;s the current one on notmuch:&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/GlrsoIwJ-UM&#34;&gt;https://www.youtube.com/embed/GlrsoIwJ-UM&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 63 ClojureScript</title>
      <link>https://cestlaz.github.io/post/using-emacs-63-clojurescript/</link>
      <pubDate>Thu, 09 Jan 2020 08:11:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-63-clojurescript/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been playing with ClojureScipt for my web projects recently and
really like it. Much more fun than any of the JavaScript frameworks
I&amp;#39;ve used. &lt;/p&gt;
&lt;p&gt;
Still, getting started was somewhat difficult due to the number of
options in tooling and uneven documentation and learning resources.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a video that shows how I use Emacs for ClojureScript
development but the focus of the video is on how to get started with
ClojureScript and Emacs takes a back seat other than an example of my
workflow.&lt;/p&gt;
&lt;p&gt;
On the Clojurscript side I&amp;#39;m using &lt;a href=&#34;https://shadow-cljs.org/&#34;&gt;shadow-cljs&lt;/a&gt; which I like very much
along with &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;tailwindcss&lt;/a&gt; for styling. I also mention &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;NVM&lt;/a&gt; for managing
node/npm etc. which you&amp;#39;ll also need. &lt;/p&gt;
&lt;p&gt;
On the Emacs side you&amp;#39;ll see a bit of &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;cider&lt;/a&gt; along with &lt;a href=&#34;https://github.com/Fuco1/smartparens&#34;&gt;smartparens&lt;/a&gt; and
you can find my full config at &lt;a href=&#34;https://github.com/zamansky/dot-emacs.&#34;&gt;https://github.com/zamansky/dot-emacs.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
I was thinking about also making the following ClojureScript videos if
the communities find value in them and I have time:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to create reusable components like an input field with label.&lt;/li&gt;
&lt;li&gt;Creating a simple Electron app using shadow-cljs.&lt;/li&gt;
&lt;li&gt;Creating something with both  server side and client side.&lt;/li&gt;
&lt;li&gt;Also open to suggestions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don&amp;#39;t pretend to be a cljs or webdev master so please let me know if
I&amp;#39;m doing anything horribly wrong and let me know if you want more.&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/BZNJi5pP8fU&#34;&gt;https://www.youtube.com/embed/BZNJi5pP8fU&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 62 Magit Forge</title>
      <link>https://cestlaz.github.io/post/using-emacs-62-magit-forge/</link>
      <pubDate>Tue, 19 Nov 2019 12:25:58 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-62-magit-forge/</guid>
      <description>&lt;p&gt;
Ever since I started looking at Magit as a &amp;#34;git dashboard&amp;#34; instead of
as a &amp;#34;git interface&amp;#34; it&amp;#39;s been yet another Emacs killer app to me. I
just recently started playing with &lt;a href=&#34;https://github.com/magit/forge&#34;&gt;forge&lt;/a&gt; which allows &lt;a href=&#34;https://github.com/magit/magit&#34;&gt;Magit&lt;/a&gt; to
interface and interact with git &amp;#34;forges&amp;#34; like GitHub. This allows you
to work on issues and pull requests without ever leaving Emacs.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a video on how easy it is. The video doesn&amp;#39;t show this but the
first time you fire forge up it will prompt you for credentials. &lt;/p&gt;
&lt;p&gt;
Also, if you aren&amp;#39;t familiar with GitHub issues, check out the
post/video I made a few days ago (&lt;a href=&#34;https://cestlaz.github.io/post/git-issues/&#34;&gt;link&lt;/a&gt;) and you can check out my
earlier post/video on Magit as well (&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-47-magit/&#34;&gt;link&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/wgI8r3Nx_BI&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 61 - org-msg</title>
      <link>https://cestlaz.github.io/post/using-emacs-61-org-msg/</link>
      <pubDate>Sat, 16 Nov 2019 05:00:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-61-org-msg/</guid>
      <description>&lt;p&gt;
By living in Emacs I get a consistent interface across all sorts of
tasks - programming, lesson planning, making presentations, preparing
documents, and yes, even email. I&amp;#39;ve been using &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-39-mu4e/&#34;&gt;mu4e&lt;/a&gt; as my Emacs email
client for a while now. Currently, I&amp;#39;m using Emacs for my work email
and Gmail for personal. I&amp;#39;ve been thinking of going whole hog to mu4e
and possibly migrating from Gmail to a new email provider for the
personal stuff but there are still a few pain points with Emacs email:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rich text emails (embedded links, images, etc)&lt;/li&gt;
&lt;li&gt;calendar integration&lt;/li&gt;
&lt;li&gt;contacts &lt;/li&gt;
&lt;li&gt;periodic Maildir sync problems with mbsync&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Calendar integration isn&amp;#39;t a make or break issue and contacts with
mu4e is good enough so that leaves two pain points. Formatted emails
which I think is now pretty much solved (see below) and the Maildir
stuff.&lt;/p&gt;
&lt;p&gt;
On the Maildir side, I&amp;#39;m trying deal with my email across four
machines - work laptop, work desktop, home laptop, home desktop. I
originally synced each one separately and that worked but I was having
archive problems - it seems that I was only archiving on the local
machine so if I archived an email at work and I needed to get to it at
home, I was out of luck. &lt;/p&gt;
&lt;p&gt;
Then, I moved to sharing my Maildir using Syncthing - an opensource
Dropbox-alike. That mostly worked but if I wasn&amp;#39;t careful I&amp;#39;d get
syncing errors where I have to go into my Maildir directory and
manually rename or remove messages - a real pain.&lt;/p&gt;
&lt;p&gt;
If anyone out there has a solution (and &lt;a href=&#34;http://pragmaticemacs.com/emacs/fixing-duplicate-uid-errors-when-using-mbsync-and-mu4e/&#34;&gt;this&lt;/a&gt; fix doesn&amp;#39;t fully work
for me), I&amp;#39;d love to hear about it.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s get back to the formatted email. I was already to create an
email in org mode using &lt;code&gt;org-mu4e-compose-org-mode&lt;/code&gt; which I think is
built in to either org-mode or mu4e but it&amp;#39;s limited. It formats
tables, outlines, and source blocks but I can&amp;#39;t easily make a source
block for something like &lt;strong&gt;dot&lt;/strong&gt; or &lt;strong&gt;ditaa&lt;/strong&gt; and embed the result. I
found a solution recently. It&amp;#39;s &lt;a href=&#34;https://github.com/jeremy-compostella/org-msg&#34;&gt;org-msg&lt;/a&gt; - a terrific package that lets
you compose an email in org-mode. It seems to have better support than
org-mu4e-compose-org-mode. It does the basic formatting, tables, etc
and also executes source blocks. The only thing that was missing for
me was LaTeX formatting but I use that so rarely I don&amp;#39;t really care.&lt;/p&gt;
&lt;p&gt;
The package author, Jeremy Compostella, is also very responsive. When
I first installed org-msg it wasn&amp;#39;t integrating seamlessly with
mu4e. It was still workable but I had to manually insert some
configuration at the top of all my emails. I opened an issue on this
and within a day it was fixed.&lt;/p&gt;
&lt;p&gt;
It also has a very cool preview mode so you can see what you&amp;#39;re
sending. On that, though, I did have an issue but I&amp;#39;m pretty sure it&amp;#39;s
an Emacs / org-mode issue and not an org-msg issue. On my desktop,
when I run the preview, it opens my browser with the email formatted
correctly. When I do the same on my laptop, it runs GitHub Classroom
Assistant - an application I installed and use for other
purposes. I&amp;#39;ve had this happen before with other emacs xdg things. If
anyone else has seen this and better has a solution, I&amp;#39;d love to hear
about that as well.&lt;/p&gt;
&lt;p&gt;
Anyway, here&amp;#39;s a video that shows org-msg in action:&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/cPZe0AGOUJU&#34;&gt;https://www.youtube.com/embed/cPZe0AGOUJU&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>