<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacs on C&#39;est la Z</title>
    <link>https://newblog/categories/emacs/</link>
    <description>Recent content in emacs on C&#39;est la Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Oct 2021 16:38:20 -0400</lastBuildDate><atom:link href="https://newblog/categories/emacs/rss.xml" rel="self" type="application/rss" />
    <item>
      <title>Using Emacs Episode 80 Vertico, Marginalia, Consult, and Embark</title>
      <link>https://newblog/post/using-emacs-80-vertico/</link>
      <pubDate>Mon, 25 Oct 2021 16:38:20 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-80-vertico/</guid>
      <description>In today&amp;#39;s video, we&amp;#39;ll take a look at a few new completion frameworks for Emacs. For years I&amp;#39;ve been using Ivy and have been very happy with it but since I decided to rebuild my Emacs config from scratch I thought I&amp;#39;d try the new kids on the block, Selectrum and Vertico along with some support packages.
I&amp;#39;ve liked Ivy from day one and still do. To be honest, from a day to day point of view, I didn&amp;#39;t notice much difference between Ivy and the newcomers but I do like their philosophies - they&amp;#39;re supposed to be simple and minimalist and focus on the Emacs completion API without extending it.</description>
    </item>
    
    <item>
      <title>Using Emacs 79 Project</title>
      <link>https://newblog/post/using-emacs-79-project/</link>
      <pubDate>Mon, 11 Oct 2021 11:24:36 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-79-project/</guid>
      <description>One of the comments on my last video talked about the new project management support Emacs includes in it&amp;#39;s latest version - project.el. I remembered reading about it when it rolled around but then forgot and never checked it out.
Up until recently when working in projects I used Projectile, a great package by Bozhidar Batsov, also known as Bug. I only used it when doing development work - that&amp;#39;s when I find myself jumping around within a group of related files.</description>
    </item>
    
    <item>
      <title>My project grading workflow</title>
      <link>https://newblog/post/using-emacs-78-grading/</link>
      <pubDate>Sun, 10 Oct 2021 10:44:41 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-78-grading/</guid>
      <description>Grading sucks. Even for a well crafted assignment it takes time and rarely does it give you the same insights into your students as you can get from just observing them and working with them, at least when the environment supports you doing so. This leads lots of teachers to go to auto graders. I can&amp;#39;t bring myself going along with that. While assignments are imperfect and tedious to grade, they do provide some insight to your students and that&amp;#39;s an important part about being a teacher.</description>
    </item>
    
    <item>
      <title>Using Emacs 75 - Bufler</title>
      <link>https://newblog/post/using-emacs-75-bufler/</link>
      <pubDate>Tue, 22 Sep 2020 13:17:41 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-75-bufler/</guid>
      <description>Quick Emacs hit today.
After my last video, I received a comment noting that I was using ibuffer and that there was another package I might want to consider - bufler. I started with basic ibuffer and then started to customize it to group buffers but that was always somewhat finicky. More often than not I couldn&amp;#39;t tune it the way I wanted. Most recently, I started using ibuffer-projectile which group projects for me but lost the other customizations.</description>
    </item>
    
    <item>
      <title>Using Emacs 74 Eglot</title>
      <link>https://newblog/post/using-emacs-74-eglot/</link>
      <pubDate>Mon, 31 Aug 2020 13:03:14 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-74-eglot/</guid>
      <description>I primarily program in four languages these days -
Clojure C++ Python Java And most of the time, my Emacs configuration has handled each one differently. Cider for Clojure, Irony for C++, Elpy and Jedi for Python and Java I could never figure out. This is of course on top of tools that work across languages like company for completions, or flycheck for general language syntax checking. A while ago I heard about lsp-mode - Language Server Protocol mode.</description>
    </item>
    
    <item>
      <title>Using Emacs 73 - Ripgrep and updating the blog</title>
      <link>https://newblog/post/using-emacs-72-rg/</link>
      <pubDate>Sun, 14 Jun 2020 11:58:11 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-72-rg/</guid>
      <description>As I said in my last post, I&amp;#39;m moving to a new Hugo theme. I decided on Anubis. It&amp;#39;s simple and clean. Unfortunately, in this change over, many things broke. Specifically, all my embedded html. Using earlier version of Hugo I could directly embed HTML and it would render. Now I have to bracket the HTML with special org markup - #+begin_export html and #+end_export html. #+begin_export html &amp;lt;h1&amp;gt;html stuff to render goes in here &amp;lt;/h1&amp;gt; #+end_export Minimally I had to find all my embedded videos and all my embedded Tweets.</description>
    </item>
    
    <item>
      <title>Using Emacs 72 - Customizing Elfeed</title>
      <link>https://newblog/post/using-emacs-72-customizing-elfeed/</link>
      <pubDate>Thu, 21 May 2020 14:47:59 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-72-customizing-elfeed/</guid>
      <description>I made this video write after I made the openwith one so even though I don&amp;#39;t mention anything in this video, I wanted to share some updates on dired and openwith.
I got a lot of suggestions on alternate ways to achieve the workflow I was seeking - being able to open a file using an external viewer. One person noted that under newer versions of Emacs, the W key is bound to the command (browse-url-of-dired-file) which does exactly what I wanted.</description>
    </item>
    
    <item>
      <title>Using Emacs 71 Openwith</title>
      <link>https://newblog/post/using-emacs-71-openwith/</link>
      <pubDate>Wed, 13 May 2020 11:45:39 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-71-openwith/</guid>
      <description>I spend most of my time in Emacs but still use the shell and browser for some things. One of the things I use my shell for is to launch libreoffice to view and edit docx files and spreadsheets, evince for pdf files and imagemagick for image files. Yes, I know I can view all of these in Emacs but there are a few limitations:
Emacs chokes on large files I can&amp;#39;t edit the docx file or the image So, I hop to the shell and launch the program I need on the files in question.</description>
    </item>
    
    <item>
      <title>Using Emacs 70 Org Protocol</title>
      <link>https://newblog/post/using-emacs-70-org-protocol/</link>
      <pubDate>Fri, 27 Mar 2020 15:15:28 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-70-org-protocol/</guid>
      <description>I spent part of today cleaning up my Emacs workflow. Specifically, how I capture emails and links into org-mode
I already wrote about how I used org-capture (here and here). It&amp;#39;s pretty clean and easy but there was one thing that always nagged at me. When I capture from mu4e within Emacs by hitting C-c m it&amp;#39;s set up to automatically populate the capture template with a link to the email labelled with the email&amp;#39;s subject.</description>
    </item>
    
    <item>
      <title>Using Emacs 69 Floobits</title>
      <link>https://newblog/post/using-emacs-69-floobits/</link>
      <pubDate>Sat, 21 Mar 2020 10:52:37 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-69-floobits/</guid>
      <description>Hunter, like most other schools has gone remote. I taught my first two online classes on Thursday. Currently, I&amp;#39;m using Zoom for synchronous stuff and a mailing list and slack for async. There are still some missing pieces. When we&amp;#39;re all together, it&amp;#39;s easy to look at a student&amp;#39;s work and talk them through issues. It&amp;#39;s also easy to get students to work together, at least to a point. With everyone locked up in their own homes, real time collaboration is harder.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 68 - Tramp and org-publish</title>
      <link>https://newblog/post/using-emacs-68-tramp-org-publish/</link>
      <pubDate>Sat, 14 Mar 2020 20:57:08 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-68-tramp-org-publish/</guid>
      <description>I maintain a couple of small simple web sites. One provides information about my undergraduate honors CS program and another that isn&amp;#39;t live yet is a FAQ for my CS teacher certification program. Traditionally I would use ssh to connect to the host machine, fire up Emacs and edit the html files to update the sites. I always forget that with Emacs we can do better.
One way is with Tramp Mode.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 67 - Emacs vs Vi a rant with some historical perspective</title>
      <link>https://newblog/post/using-emacs-67-emacs-rant/</link>
      <pubDate>Sun, 23 Feb 2020 07:57:08 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-67-emacs-rant/</guid>
      <description>I&amp;#39;ve been meaning to do my version of the Emacs VI rant for a while. A few years ago I staged out a video showing what it would be like for a beginner to start with Emacs, Vim, Atom, and Sublime Text but decided it would be long, unwieldy and clunky to present - particularly when it came to customization. I tabled it for a while but recently have been seeing a bunch of threads, videos and posts talking about Emacs and Vim.</description>
    </item>
    
    <item>
      <title>Using Emacs 66 - an eshell switcher in elisp</title>
      <link>https://newblog/post/using-emacs-66-eshell-elisp/</link>
      <pubDate>Sat, 08 Feb 2020 08:12:22 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-66-eshell-elisp/</guid>
      <description>I thought it was time to give eshell in Emacs another try. It has some pretty cool features but for whatever reason, I&amp;#39;ve never really been able to adopt Emacs as my go to shell.
Eshell out of the box is pretty cool but could use some enhancements. When launching at login it doesn&amp;#39;t know about the path you set in your .bashrc or .zshrc in my case files. It just seemed to have problems with paths in general but that was fixed with the exce-path-from-shell package.</description>
    </item>
    
    <item>
      <title>Using Emacs 65 - Live Python</title>
      <link>https://newblog/post/using-emacs-65-live-python/</link>
      <pubDate>Sun, 02 Feb 2020 13:13:09 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-65-live-python/</guid>
      <description>The other day I stumbled upon Emacs&amp;#39;s Live Coding plugin. It takes interactive coding up to the next level. Normally, when you code Python, if you&amp;#39;re working in a REPL, every time you hit &amp;lt;Enter&amp;gt; the line you just typed is evaluated. When you&amp;#39;re working ina source file, you&amp;#39;re just editing until you send the file into a Python interpreter.
With this module, your file is continually evaluated as you type and it shows you the results in a side window.</description>
    </item>
    
    <item>
      <title>Using Emacs 64 - Notmuch</title>
      <link>https://newblog/post/using-emacs-64-notmuch/</link>
      <pubDate>Sat, 18 Jan 2020 08:52:01 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-64-notmuch/</guid>
      <description>I&amp;#39;ve been using the gmail web interface for a long time. My first email or at least the oldest one still in the system dates back to Oct 18, 2004 7:29am. It was a letter to a buddy about an indoor turkey fryer and if he needed a lift to Fairway the following morning to shop.
Before that, I used my Panix shell account - probably with PINE. Work email was using my own servers at Stuy along with either PINE or Emacs using VM mode which has long been deprecated.</description>
    </item>
    
    <item>
      <title>Using Emacs 63 ClojureScript</title>
      <link>https://newblog/post/using-emacs-63-clojurescript/</link>
      <pubDate>Thu, 09 Jan 2020 08:11:52 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-63-clojurescript/</guid>
      <description>I&amp;#39;ve been playing with ClojureScipt for my web projects recently and really like it. Much more fun than any of the JavaScript frameworks I&amp;#39;ve used. Still, getting started was somewhat difficult due to the number of options in tooling and uneven documentation and learning resources.
Here&amp;#39;s a video that shows how I use Emacs for ClojureScript development but the focus of the video is on how to get started with ClojureScript and Emacs takes a back seat other than an example of my workflow.</description>
    </item>
    
    <item>
      <title>Using Emacs 62 Magit Forge</title>
      <link>https://newblog/post/using-emacs-62-magit-forge/</link>
      <pubDate>Tue, 19 Nov 2019 12:25:58 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-62-magit-forge/</guid>
      <description>Ever since I started looking at Magit as a &amp;#34;git dashboard&amp;#34; instead of as a &amp;#34;git interface&amp;#34; it&amp;#39;s been yet another Emacs killer app to me. I just recently started playing with forge which allows Magit to interface and interact with git &amp;#34;forges&amp;#34; like GitHub. This allows you to work on issues and pull requests without ever leaving Emacs.
Here&amp;#39;s a video on how easy it is. The video doesn&amp;#39;t show this but the first time you fire forge up it will prompt you for credentials.</description>
    </item>
    
    <item>
      <title>Using Emacs 61 - org-msg</title>
      <link>https://newblog/post/using-emacs-61-org-msg/</link>
      <pubDate>Sat, 16 Nov 2019 05:00:57 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-61-org-msg/</guid>
      <description>By living in Emacs I get a consistent interface across all sorts of tasks - programming, lesson planning, making presentations, preparing documents, and yes, even email. I&amp;#39;ve been using mu4e as my Emacs email client for a while now. Currently, I&amp;#39;m using Emacs for my work email and Gmail for personal. I&amp;#39;ve been thinking of going whole hog to mu4e and possibly migrating from Gmail to a new email provider for the personal stuff but there are still a few pain points with Emacs email:</description>
    </item>
    
    <item>
      <title>Using Emacs 60 - Restclient</title>
      <link>https://newblog/post/using-emacs-60-restclient/</link>
      <pubDate>Fri, 25 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-60-restclient/</guid>
      <description>I started to work on a web application the other day. It&amp;#39;s nothing special but if I ever finish it, it will be a pretty complete project. The backend will be a REST API and I&amp;#39;m planning on writing the frontend in Clojurescript. The problem with developing a web application like this is that you can&amp;#39;t really write the front end until you have enough of the backend to provide data.</description>
    </item>
    
    <item>
      <title>Using Emacs 59 - markdown</title>
      <link>https://newblog/post/using-emacs-59-markdown/</link>
      <pubDate>Fri, 18 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-59-markdown/</guid>
      <description>Org-mode is my markup of choice. I spend the vast majority of my time working on text files working in org-mode. Since GitHUb started rendering org-mode files in their site I&amp;#39;ve also used org-mode for things like Readme files in my projects. I even force it on my students at times. When I make an assignment, I seed it with an org-mode file that they have to modify - that is - fill in things like their names, group members etc.</description>
    </item>
    
    <item>
      <title>Using Emacs 58 - lsp-mode</title>
      <link>https://newblog/post/using-emacs-58-lsp-mode/</link>
      <pubDate>Mon, 07 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-58-lsp-mode/</guid>
      <description>I&amp;#39;ve been wanting to check out lsp-mode under Emacs for a while now. LSP stands for Language Protocol Service. The idea is that you have a standard interface between your editor and some language server. If you program in multiple languages and each has an LSP server you end up, in theory, with a simpler configuration and a consistent interface.
This certainly sounds more appealing than how we did it in the old days where you have some ad hoc configuraiton for each language you work in.</description>
    </item>
    
    <item>
      <title>Using Emacs 57 Dired Narrow</title>
      <link>https://newblog/post/using-emacs-57-dired-narrow/</link>
      <pubDate>Sun, 07 Apr 2019 11:57:57 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-57-dired-narrow/</guid>
      <description>One of Emacs power features that I&amp;#39;ve never quite gotten into is dired, the Directory Editor. I&amp;#39;ve already done a video on the package. It&amp;#39;s really cool and I do use it at times but I still haven&amp;#39;t started using it for my day to day.
Well, I just started using a couple of packages that might change this. They&amp;#39;re part of a set of dired addons that you can check out at the dired hacks page.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 56 - Dictionaries</title>
      <link>https://newblog/post/using-emacs-56-dictionaries/</link>
      <pubDate>Mon, 28 Jan 2019 16:58:11 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-56-dictionaries/</guid>
      <description>One of the great things about Emacs is that it&amp;#39;s not just for writing programs. Sure, you can set it up as an IDE for just about every programming language under the sun but that&amp;#39;s just the tip of the iceberg. I use Emacs for just about all my text processing. This includes writing blog posts, reading and writing emails, creating lesson plans and pretty much anything and everything having to do with text.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 55 - Irony Completions</title>
      <link>https://newblog/post/using-emacs-55-irony-completions/</link>
      <pubDate>Mon, 21 Jan 2019 08:27:41 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-55-irony-completions/</guid>
      <description>Last year I put together a post and video on some basics of Emacs for C++ development. In the video I didn&amp;#39;t quite get completions fully working. I also used ggtags in that video but find myself using dumb-jump more frequently.
Here&amp;#39;s a quick video showing how to set up irony-mode which uses libclang for completions. It&amp;#39;s pretty slick. Now the only thing I think I&amp;#39;m missing is header file completions.</description>
    </item>
    
    <item>
      <title>Using Emacs 54 Org Tables</title>
      <link>https://newblog/post/using-emacs-54-org-tables/</link>
      <pubDate>Mon, 14 Jan 2019 11:34:13 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-54-org-tables/</guid>
      <description>As you know I use Emacs for all sorts of things. In addition to coding, I use it for email, my schedule, note taking, and much much more. As part of my job at Hunter, I read and evaluate some of the Macaulay Honors College applications. I also have to evaluate all the applicants to my CS honors program. I described how I use Org-mode and Emacs to help with that here.</description>
    </item>
    
    <item>
      <title>Using Emacs 53 Emailing Org Agenda</title>
      <link>https://newblog/post/using-emacs-53-emailing-org-agenda/</link>
      <pubDate>Sat, 03 Nov 2018 08:55:23 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-53-emailing-org-agenda/</guid>
      <description>I use both org-mode and Google Calendar for scheduling. I like Google Calendar because:
It&amp;#39;s pretty universal so I can issue and accept calendar invites. It works well with my phone and other mobile devices. The rest of my family doesn&amp;#39;t live in Emacs :-(. I prefer using org-mode beacuse:
Emacs I prefer, for the most part, to control my data. I partially sync the two platforms. I&amp;#39;ve already talked about syncing Google Calendar and org-mode.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 52 - Eyebrowse</title>
      <link>https://newblog/post/using-emacs-52-eyebrowse/</link>
      <pubDate>Tue, 30 Oct 2018 14:35:15 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-52-eyebrowse/</guid>
      <description>I was originally going to do a video on how I set things up so that I get an email every morning with my org-mode agenda but that&amp;#39;s going to be something of an ordeal. I have to create a droploet on Digital Ocean, set up SyncThing and a mail server and lots of other things.
I&amp;#39;ll get to that video at some point but in the meantime I saw this thread on the Emacs subreddit.</description>
    </item>
    
    <item>
      <title>Using Emacs 51 - Day to day work with org-mode</title>
      <link>https://newblog/post/using-emacs-51-dtd-org/</link>
      <pubDate>Wed, 24 Oct 2018 17:30:45 -0400</pubDate>
      
      <guid>https://newblog/post/using-emacs-51-dtd-org/</guid>
      <description>I can&amp;#39;t believe that I haven&amp;#39;t made a video since the beginning of summer!!!
Part of the reason is that I haven&amp;#39;t had any video ideas that have motivated me and the other reason is that the Fall is my busiest season.
In any event, here&amp;#39;s the latest installment.
Take a look at how I use Emacs and more specifically org-mode for my day to day work. Sometimes I use the fancy power tools but to be honest, most of the time, I stick to the basics.</description>
    </item>
    
    <item>
      <title>Using Emacs Series</title>
      <link>https://newblog/stories/emacs/</link>
      <pubDate>Wed, 19 Sep 2018 19:02:09 -0400</pubDate>
      
      <guid>https://newblog/stories/emacs/</guid>
      <description> Link to current configuration: https://github.com/zamansky/dot-emacs Introduction Video 1 - Setting up the package manager Video 2 - Intro to Org Mode Video 3 - How to think about Emacs Video 4 - Buffers Video 5 - Windows Video 6 - Search / Swiper Video 7 - Navigation / avy Video 8 - Autocomplete Video 9 - Themes Video 10 - Org init files Video 11 - org-reveal / reveal.js Video 12 - Python, Flycheck, Jedi Video 13 - Python, Yasnippet Video 14 - Thoughts on Using Emacs Video 15 - Macros Video 16 - Undo Tree Video 17 - Small packages Video 18 - narrowing and iedit Video 19 - moving to a live config Video 20 - Yanking Video 21-web-mode Video 22-emacsclient Video 23 - capture 1 Video 24 - capture 2 Video 25 - Tramp Video 26 - Google Calendar and Org Agenda Video 27 - Shell and eshell Video 28 - Rectangles Video 29 - elfeed 1 Video 30 - elfeed 2 - Hydras Video 31 - elfeed 3 - macros Video 32 - C++ Video 33 - Projectile Dumb-jump Video 34 - ibuffer and emmet Video 35 - blogging Video 36 - A Touch of Elisp Video 37 - Treemacs file browser Video 38 - dired Video 39 - mu4e Video 40 - Atomic chrome Video 41 - Pandoc Video 42 - Git Gutter and Timemachine Video 43 - Music Video 44 - pdf Video 45 - Company or Autocomplete Video 46 - auto yasnippets Video 47 - Magit Video 48 - silversearcher Video 49 - mu4e conversation Video 50 - presentations Video 51 - Day to day with org-mode Video 52 - eyebrowse Video 53 - Emailing org-agenda Video 54 - Org Tables Video 55 - Irony Completions Video 56 - Dictionaries Video 57 - Dired Narrow Video 58 - lsp-mode Video 59 - markdown Video 60 - restclient Video 61 - org-msg Video 62 - Magit Forge Video 63 - ClojureScript Video 64 - Notmuch Video 65 - Live Python Video 66 - Eshell - Elisp Video 67 - Emacs vs Vi(m) Video 68 - Tramp and org-publish Video 69 - Floobits Video 70 - org-protocol Video 71 - openwith Video 72 - customizing elfeed Video 73 - RipGrep Video 74 - Eglot Video 75 - bufler Video 76 - Bookmarks and Burly Video 77 - Advent of Code 2020 day 3 Video 78 - Grading workflow Video 79 - Project </description>
    </item>
    
    <item>
      <title>Using Emacs 76 Bookmarks and Burly</title>
      <link>https://newblog/post/using-emacs-76-bookmarks-burly/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://newblog/post/using-emacs-76-bookmarks-burly/</guid>
      <description>I read a post on /r/emacs the other day asking if people used Emacs bookmarks among other things. I thought about it for a bit and wondered why I didn&amp;#39;t use Bookmarks? I did set a few bindings to load frequently used files and those are like bookmarks but I have to set those up in my configuration. It turns out that Emacs bookmarks are pretty easy and effective and work right out of the box.</description>
    </item>
    
  </channel>
</rss>
