<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/post/</link>
    <description>C&#39;est la Z (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Mar 2023 07:44:47 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/post/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>SIGCSE 2023 Microteaching</title>
      <link>https://cestlaz.github.io/post/sigcse-2023-microteaching/</link>
      <pubDate>Mon, 27 Mar 2023 07:44:47 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2023-microteaching/</guid>
      <description>&lt;p&gt;
Okay, back to SIGCSE.&lt;/p&gt;
&lt;p&gt;
Next up, a session titled Microteaching run by Colleen Lewis. Here&amp;#39;s
the paper: &lt;a href=&#34;https://dl.acm.org/doi/10.1145/3545947.3569593&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Unfortunately, the paper doesn&amp;#39;t do the session justice as the paper
briefly describes a small amount of CS subject matter that each
session presenter was going to &amp;#34;teach.&amp;#34; By &amp;#34;teach,&amp;#34; I mean, do a 7
minute mock version of the lesson for the attendees.  That&amp;#39;s all fine
and good but the thrust wasn&amp;#39;t really the actual CS content but how it
was delivered.&lt;/p&gt;
&lt;p&gt;
Each presenter would deliver their mini lesson and then Colleen would
highlight solid pedagogical practices.&lt;/p&gt;
&lt;p&gt;
This type of session is much needed and as far as I can tell, has been
missing from SIGCSE.&lt;/p&gt;
&lt;p&gt;
Let me repeat: This type of session is much needed and as far as I can tell, has been
missing from SIGCSE.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll talk more about my feelings of where this type of session should
belong along with &lt;a href=&#34;https://cestlaz.github.io/post/sigcse-2023-it-seemed-good-idea/&#34;&gt;It seemed like a good idea at the time&lt;/a&gt; and Nifty
Assignments in my final SIGCSE post but here I&amp;#39;ll stick to this
session.&lt;/p&gt;
&lt;p&gt;
As I said, after each mini lesson, Colleen shared what she saw as good
practices.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using manipulatives&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;give students time to process questions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;give explicit goals&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;read what&amp;#39;s on the board aloud&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use activities that involve the students&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create interesting motivations that lead to the topic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and more&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All were good, except I have a minor quibble with one that
I&amp;#39;ll get to below. Overall this made me happy. I had never seen a
SIGCSE session that highlighted basic pedagogical techniques. On the
other hand, I was a bit sad. Why? Because all the techniques listed
were super basic - like day 0.5 of basic pedagogy techniques.&lt;/p&gt;
&lt;p&gt;
Was it really necessary to focus on such basic introductory techniques
as opposed to, say, questioning techniques - something that has a lot
more depth than a lot of people realize?&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m guessing it was. Colleen has spent a lot of time working with
college faculty members and a good deal of time thinking about these
things so I&amp;#39;m guessing that if she highlighted something as a best
practice, she felt it needed to be highlighted.&lt;/p&gt;
&lt;p&gt;
So, even if the pedagogical level was rather rudimentary, I&amp;#39;d say that
it&amp;#39;s probably needed and that makes it even more important to have
sessions like this at SIGCSE.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll circle back to this and teaching sessions in general in my last
SIGCSE post - I still have one more to go on Nifty Assignments before
that one but to close out, I&amp;#39;ll talk about my quibble.&lt;/p&gt;
&lt;p&gt;
It was with the &amp;#34;best practice&amp;#34; of giving explicit goals. This could
be like a high school teacher to have an explicit &lt;strong&gt;aim&lt;/strong&gt; on the board
prior to the lesson start or it could be on the side of the board
&amp;#34;students will learn….&amp;#34;&lt;/p&gt;
&lt;p&gt;
This is frequently taught as a best practice but it isn&amp;#39;t. It&amp;#39;s often
a good practice but it&amp;#39;s not a universal best one. In fact nothing
is. The trouble is, it&amp;#39;s often taught as a &lt;strong&gt;must follow&lt;/strong&gt; practice with
no exceptions and unfortunately educators buy in. It&amp;#39;s frequently
taught as a must follow because it&amp;#39;s least common denominator  - you
can always do it and it frequently conveys info to the students (and
your supervisor observing :-) ). It&amp;#39;s easy to do and easy to
&amp;#34;measure.&amp;#34;&lt;/p&gt;
&lt;p&gt;
The problem is, it&amp;#39;s not a universal best practice. There are plenty
of times when you don&amp;#39;t want to give away the punchline or you want to
set up a head fake. &lt;/p&gt;
&lt;p&gt;
My linked list motivation which I described &lt;a href=&#34;https://cestlaz.github.io/post/sigcse-2023-theater/&#34;&gt;here&lt;/a&gt; is one such case. I
don&amp;#39;t want to write my objective ahead of time because it would take
away from the activity which would then remove it&amp;#39;s value to make
linked lists clearer and easier.&lt;/p&gt;
&lt;p&gt;
Incidentally, the one student to drop out of my Advanced Certificate
teacher program in a huff got all bent out of shape because I woulnd&amp;#39;t
provide every detail of every lesson in advance because to them that
was the way to do it. Everyone else got it.&lt;/p&gt;
&lt;p&gt;
As they say, you&amp;#39;ve got to know when to hold them, know when to fold
them….&lt;/p&gt;
&lt;p&gt;
Other times when not giving the objective right up front might be when
teaching merge or quick sorts, depending on your motivation. In math
class, I&amp;#39;d say teaching the quadratic formula is better served by
working the derivation by completing the square prior to revealing why
you were doing it.&lt;/p&gt;
&lt;p&gt;
In any event, it was a minor quibble and it wasn&amp;#39;t necessarily stated
as being a best practice but a good practice for the specific mini
lesson. &lt;/p&gt;
&lt;p&gt;
Bottom line this session or a session like this is a great addition to
SIGCSE and hats off to Colleen and all the presenters.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The joys and sorrows of teaching</title>
      <link>https://cestlaz.github.io/post/joys-and-sorrows/</link>
      <pubDate>Sun, 26 Mar 2023 18:59:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/joys-and-sorrows/</guid>
      <description>&lt;p&gt;
Yesterday I was at a former student&amp;#39;s wedding. It was a beautiful
affair. For me, to be invited to attend was one of the greatest gifts
I have received as a teacher. Seriously. One of the greatest
opportunities of teaching is the chance to be a force for good in a
student&amp;#39;s life and one of the greatest gifts we can receive is when a
student lets you know you&amp;#39;ve made a difference. When over time they
decide to share life events. Wow.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve probably been to more than my fair share of former student events and
I&amp;#39;m always greatly touched.&lt;/p&gt;
&lt;p&gt;
I guess I&amp;#39;ve also been thinking about things like this recently with
my pending retirement and also since I&amp;#39;ve been interviewing potential
students for my teacher education masters program. I got to enjoy one
particular interview when I asked the candidate where they were
currently working as a SWE. After they answered, I was able to reel
off the names of four of my former students who are also working
there.&lt;/p&gt;
&lt;p&gt;
That particular interview was really energizing. The others I did were
as well. You have to get excited by the energy of these young CS
people - most who spent a short time in industry but some applying
right from college who are now anxious to enter the teaching workforce
to make a difference in young people&amp;#39;s lives.&lt;/p&gt;
&lt;p&gt;
Energizing to the point that I&amp;#39;ll miss teaching them next year but not
enough to make me forget that I &lt;strong&gt;really&lt;/strong&gt; need to step back. Besides, I
can probably teach them as an adjunct in their second year in the
program :-).&lt;/p&gt;
&lt;p&gt;
So all this has me looking back and when I was talking to each program
candidate, I make sure to talk to them about both the good and the
bad of the profession. The good are in the relationships we build and
how we can change, and literally save lives and often we do it by
being ourselves and just by being decent human beings. Years ago, I
was  purchasing some hardware. I needed a Milwaukee hammer drill among
other things. A former student&amp;#39;s father was an executive at that
company. He took my order and payment info. The tools arrived shortly
later but no charge. I called him up and protested (I mean, I would
have liked a small discount, but this was the whole deal). He said,
&amp;#34;you don&amp;#39;t pay for tools, you saved my kid&amp;#39;s life.&amp;#34; I was, and am very
fond of this former student but I really didn&amp;#39;t think I did anything
special.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m hoping that current teachers reading this give themselves the time
and space to appreciate their accomplishments even as the system we
all work in has become more and more difficult to navigate and survive
in.&lt;/p&gt;
&lt;p&gt;
That brings us to the other side - the cons and the bigger picture of
the cons. That&amp;#39;s something that I wish more teachers were more in tune
with and more vocal about.&lt;/p&gt;
&lt;p&gt;
Yes, teaching can be extremely awarding if you can make it work
financially but make no mistake, public education is under attack and
not just by republicans. We see daily the news out of Florida but
there are more subtle things going on.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been calling out the college board for ages - treating districts
as cash cows, peddling in valueless high stakes tests and on and
on. Too few teachers call them out and take a stand. When they did
dirty with the AP African American Studies and Florida there were a
few complaints but now we&amp;#39;re back to business as usual.&lt;/p&gt;
&lt;p&gt;
Another big one are charters. Again, I&amp;#39;ve been stating my opinion for
decades but too few take the time to look behind the hype. The blindly
accept their published graduation rates and never question simple
factual data like how Success Academy boasted a near perfect
graduation and college acceptance rate with their first cohort but
never mention that they started with nearly 100 students but only
graduated 17.&lt;/p&gt;
&lt;p&gt;
Now, they&amp;#39;re not even trying to hide. In NY because our leaders are
beholden to the right, charters, most notably the money chains like
Success Academy got legislation passed so that the public school
system would have to either provide space for charters in their
already overcrowded buildings or pay the rent for the charters. Just
last week it was announced that Success Academy created a shell entity
that purchased properties. You can be sure that those properties will be
charging the city exorbitant amounts to pay for their charter schools
that while being the darling of people like Mike Bloomberg only
graduate 17% of their students.&lt;/p&gt;
&lt;p&gt;
These and many more big picture issues are changing the landscape of
public education and not for the better. Republican states have
skipped passed the charter movement and gone straight to vouchers - a
way to directly funnel money from the public to the wealthy but blue
states are still destroying public education behind a screen.&lt;/p&gt;
&lt;p&gt;
So that&amp;#39;s the good and that&amp;#39;s the bad. I&amp;#39;m excited for the new
youngsters who want to enter our field but I&amp;#39;m appealing to us elders
to take a stand and be more vocal to make sure they have a field to
teach in,&lt;/p&gt;
&lt;p&gt;
Thanks for reading. Hope the first part was inspirational and
sorry for the rant but I wish more teachers and more people in general
would really take a stand.&lt;/p&gt;
&lt;p&gt;
Next time back to more direct CS Ed stuff.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sigcse 2023 Pedagogical Innovations</title>
      <link>https://cestlaz.github.io/post/sigcse-2023-ped-innovations/</link>
      <pubDate>Wed, 22 Mar 2023 19:00:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2023-ped-innovations/</guid>
      <description>&lt;p&gt;
Next up was a session called Pedagogical Innovations. Good stuff but
not really pedagogy. Maybe curricular innovations would have been
a better title.&lt;/p&gt;
&lt;p&gt;
The third session was about virtual summer camps - I had to skip out
for that but here&amp;#39;s what went on in the first two sessions.&lt;/p&gt;
&lt;p&gt;
The first session involved professors from Oregon State working with
middle school teachers teaching CS through the use of classic physical
games. Specifically tic tac toe (paper &lt;a href=&#34;https://dl.acm.org/doi/10.1145/3545945.3569883&#34;&gt;here&lt;/a&gt;). I&amp;#39;ve used games like tic
tac toe and connect 4 in high school classes but never younger. You
can read the paper for details but there were some ups and
downs. Students made progress but had trouble with the algorithm and
conditionals. I wonder if it was too much too soon. I&amp;#39;m always
skeptical when I hear classes of really young kids doing work that my
Stuy HS kids had trouble with. Sometimes it&amp;#39;s too young or too much
and there&amp;#39;s nothing wrong with that. In fact, we&amp;#39;d be better off if
more people recognized that.&lt;/p&gt;
&lt;p&gt;
It was nice to see that acknowledgment here.&lt;/p&gt;
&lt;p&gt;
One other point of note, and one I&amp;#39;m super glad they brought up was
the acknowledgment that even with training and extreme support,
teachers that didn&amp;#39;t come in with a strong programming background had
a very hard time.&lt;/p&gt;
&lt;p&gt;
So nice for people other than me to say that publicly. &lt;/p&gt;
&lt;p&gt;
We&amp;#39;ve been hearing CS is so easy - anyone can do it, anyone can teach
it but it&amp;#39;s just not so. It takes time and effort just like anything
else and every time code.org or some other flavour of the month says
you can teach CS without really learning CS devalues the subject and
the teaching profession.&lt;/p&gt;
&lt;p&gt;
So, that was presentation one and I encourage you to read the paper
linked above.&lt;/p&gt;
&lt;p&gt;
The second presentation was by Dan Garcia and the BJC crew on a new
class - &lt;a href=&#34;https://bjc.berkeley.edu/sparks/&#34;&gt;BJC Sparks&lt;/a&gt;. Again, not pedagogy but curriculum. The idea was
middle school functional first programming course in Scratch.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m a big functional programming guy so I love this.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve frequently come out against drag and drop languages but that&amp;#39;s in
later grades and this is middle school so I&amp;#39;m fine with it here. I do
have some questions relating to drag and drop in general:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;how do you deal with large programs on small screens?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Is there a difference in learning by dragging blocks vs say typing
words, vs even writing words?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jigsaw puzzle programming&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but those are questions for another time.&lt;/p&gt;
&lt;p&gt;
Here the BJC crew start with a functional approach to programming but
then add imperative constructs. I was curious about two things. One
was when was the optimal time to do that switch - they weren&amp;#39;t sure. I
think that&amp;#39;s a worthwhile question to explore.&lt;/p&gt;
&lt;p&gt;
The other question was how to keep students from using the imperative
blocks until they&amp;#39;re introduced and this is the cool part - they can
disable those blocks from the language until needed. Something like
the different levels of language with Dr.Racket but apparently with
finer grain control.&lt;/p&gt;
&lt;p&gt;
This course looks pretty exciting and if I do stay in the game and
want to look more at the middle school level, I&amp;#39;ll be sure to look at
it more carefully.&lt;/p&gt;
&lt;p&gt;
So that&amp;#39;s it for today.&lt;/p&gt;
&lt;p&gt;
Still to come?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Microteaching&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nifty Assignments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And also some closing thoughts&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Sigcse 2023 Theatrics in CS</title>
      <link>https://cestlaz.github.io/post/sigcse-2023-theater/</link>
      <pubDate>Wed, 22 Mar 2023 06:43:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2023-theater/</guid>
      <description>&lt;p&gt;
I&amp;#39;ll recount what I said a couple of posts earlier - I was speaking to
a HS teacher who I&amp;#39;ve known for a long time but was meeting in person
for the first time. It was his first SIGCSE. I asked how he was liking
it. His response was &amp;#34;well, there are a whole lot of professors who
really could use a class or two in pedagogy.&amp;#34;&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll go further to say that we always give extra value and credence
to those that come from elite institutions. It&amp;#39;s just a reflection on
society - famous people are considered authorities and frequently
assert themselves as such. What does Bill Gates know about education?
Nothing, yet he&amp;#39;s done more to drive education policies in America
than any ten teachers. David Coleman controls education through the
college board and &amp;#34;gifted&amp;#34; us with common core and how many years did
he teach? What about Wendy Kopp of Teach For America.&lt;/p&gt;
&lt;p&gt;
But I digress.&lt;/p&gt;
&lt;p&gt;
If something comes out of an elite institution it&amp;#39;s good. Otherwise,
people are  skeptical. I can&amp;#39;t tell you how many times I&amp;#39;ve heard a student
complain about something at Hunter, another CUNY, or a similar
institution but when I&amp;#39;ve heard students talk of similar or worse from
places like Stanford, Harvard, or CMU, it&amp;#39;s always oh, those
institutions know how to do things.&lt;/p&gt;
&lt;p&gt;
All this leads up to more commentary on Harvard&amp;#39;s CS50. In this
session David Malan, the course&amp;#39;s creator and instructor was talking
about innovative ways of engagement that he used during Covid. Being
at Harvard, he had access to the American Repertory Theater to film as
well as a professional level props department.&lt;/p&gt;
&lt;p&gt;
It must be nice to have almost limitless resources.&lt;/p&gt;
&lt;p&gt;
Malan talked about ripping a phone book to demonstrate binary search,
using blocks and string for linked lists, swapping variables by
modeling with two cups filled with colored liquids then three. Linear
search with &amp;#34;let&amp;#39;s make a deal&amp;#34; style doors and more.&lt;/p&gt;
&lt;p&gt;
All of these came with the expected level of glitz and showmanship.&lt;/p&gt;
&lt;p&gt;
Now, to be fair, most of the ideas presented were good ones, although
I&amp;#39;ll suggest one I find better for linked list down below. No problem
with the presentation - I liked it - all good stuff. The thing that
made me sad is at the college level this is considered innovative. I
know teachers who were ripping phone books in the 80s. They were
teaching binary search for the first time but they knew how to use
manipulatives from day 1 as teachers. Same for most of the other
practices.&lt;/p&gt;
&lt;p&gt;
Malan did bring up the important question as to how much time one
should spend on these types of demos vs class materials and where&amp;#39;s
the line but I think a richer presentation would have included an
instructor from a less well funded institution (or a HS teacher since
these ideas are old hat to them) providing the dollar store value version of
the Harvard production and they could have discussed if they were
equally effective or not.&lt;/p&gt;
&lt;p&gt;
So, while I have my curmudgeonly take that for a K12 teacher not much
here is new it is really good stuff. The paper is worth looking over
and at least for now, it&amp;#39;s freely available &lt;a href=&#34;https://dl.acm.org/doi/10.1145/3545945.3569859&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
To close things off, I wanted to talk about the linked list demo. It&amp;#39;s
a nice but medium to high effort demo. Malan made physical blocks to
represent nodes and connected them with string. This could of course
be done more cheaply with, let&amp;#39;s say cardboard bankers boxes but I
have another suggestion that worked better for me, although both are
good ideas.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s actually the way I introduced linked lists prior to Covid when we
were in person.&lt;/p&gt;
&lt;p&gt;
Prior to class, I tell a subset of my  students a secret - who&amp;#39;s after
them. In person, I&amp;#39;d pull them aside on entry, on Zoom I&amp;#39;d dm them.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d say:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;John, don&amp;#39;t tell anyone but Beth is after you&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sarah, don&amp;#39;t tell anyone but Jean is after you&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beth, don&amp;#39;t tell anyone but Sarah is after you&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jean, don&amp;#39;t tell anyone but Harry is after you&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Etc.&lt;/p&gt;
&lt;p&gt;
Now, sometime, students get worried and interpret &amp;#34;so and so is after
you&amp;#34; to mean that person is out to get them. An unintended
consequence, but it&amp;#39;s always turned out to be an opportunity to have
some class fun.&lt;/p&gt;
&lt;p&gt;
Anyway, this is a linked list:&lt;/p&gt;
&lt;p&gt;
John-&amp;gt;Beth-&amp;gt;Sarah-&amp;gt;Jean-&amp;gt;Harry&lt;/p&gt;
&lt;p&gt;
I make it clear that each person can only know and remember two
things - who they are and who&amp;#39;s next.&lt;/p&gt;
&lt;p&gt;
We can see that the list is distributed all over the class (or city on
Zoom) and we can perform operations on the list. We try an insert and
more often than not the person doing the insert does it in the wrong
order - hilarity ensues.&lt;/p&gt;
&lt;p&gt;
An instructor can go in all sorts of directions with this. It&amp;#39;s fun
and actively involves the students. The demo is nice but I much prefer
this.&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s it for today some good practices, possibly innovative at
the college level but not at the HS one. Fun presentation and a paper
worth reading over.&lt;/p&gt;
&lt;p&gt;
Next I&amp;#39;ll be writing up a session called Pedagogical Innovations. It
really had nothing to do with pedagogy, more about curriculum but it
too was a really good session.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2023 Writing in CS Classes</title>
      <link>https://cestlaz.github.io/post/sigcse-2023-writing/</link>
      <pubDate>Tue, 21 Mar 2023 10:54:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2023-writing/</guid>
      <description>&lt;p&gt;
On to Friday&amp;#39;s &amp;#34;Computing and Liberal Arts&amp;#34; session.&lt;/p&gt;
&lt;p&gt;
A couple to write about here. One will bring us back to Harvard&amp;#39;s
CS50 - I&amp;#39;ll save that for tomorrow. Today I&amp;#39;ll share what Lisa Zhang
and her team at the University of Toronto at Mississauga are doing to
bring writing into their CS classes.&lt;/p&gt;
&lt;p&gt;
Most people I speak to agree that in America we don&amp;#39;t do a good
job teaching writing. It looks like Canada might not be doing much
better. Communication is so fundamental that it&amp;#39;s great to see a full
CS program embracing the importance of writing and doing it without
compromising their own content.&lt;/p&gt;
&lt;p&gt;
Unfortunately, and I say this tongue in cheek, they seem to be doing
it the right way so those of us who would have to run stealth can&amp;#39;t
really steal their program and process.&lt;/p&gt;
&lt;p&gt;
To start they have a bunch of instructors bought in and they&amp;#39;re
integrating writing in five core classes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CS 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data Structures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computer Architecture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Theory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Systems&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Right off the bat I love this - 5 classes over two, maybe three years
with different instructors all in agreement that their students have
to be better at writing and communicating.&lt;/p&gt;
&lt;p&gt;
Next, they made the writing topical to each class. They might write a
man page, that is program documentation in a course where they write
an application. A proof in the theory course, an email to a potential
interviewer, etc.. Not only does this ensure that the assignments flow
naturally in the class but it also develops the kinds of writing
skills they&amp;#39;ll need in the future.&lt;/p&gt;
&lt;p&gt;
Now, how do they do this without overloading the current teaching
staff and what makes a bunch of CS professors and TAs qualified to
assess and improve writing? That&amp;#39;s always been a big question with
writing across the curriculum efforts.&lt;/p&gt;
&lt;p&gt;
They&amp;#39;re doing it by hiring a writing specialist who&amp;#39;s in charge of
the writing aspects of the classes. They also hired specific writing
TAs who would support the writing aspect to go along with the
traditional CS subject TAs who would continue to support the regularly
scheduled class content.&lt;/p&gt;
&lt;p&gt;
How did they assess the writing TAs? They gave them a writing sample
to critique. Not perfect but I guess no worse than a TA in any writing
heavy class.&lt;/p&gt;
&lt;p&gt;
Overall, I love this approach. At Hunter, we have a writing center but
if the writing isn&amp;#39;t Incorporated into the class and the supports
aren&amp;#39;t right there, you&amp;#39;re not going to get the same benefit.&lt;/p&gt;
&lt;p&gt;
One other aspect of their writing program that I love is that it&amp;#39;s
pragmatic and focused on the bottom line - communication. They decided
&lt;strong&gt;not&lt;/strong&gt; to focus on grammar and grammar errors so long as the issue
didn&amp;#39;t impair understanding and communication. This is great overall
and particularly is important if your classes have English language
learners. &lt;/p&gt;
&lt;p&gt;
So no teacher analysis or alternate views today. Just wanted to share
some really cool stuff being done at UofT Mississauga.&lt;/p&gt;
&lt;p&gt;
You can find the paper &lt;a href=&#34;https://dl.acm.org/doi/10.1145/3545945.3569729&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2023 - when the solution solves the wrong problem</title>
      <link>https://cestlaz.github.io/post/sigcse-2023-wrong-problem/</link>
      <pubDate>Mon, 20 Mar 2023 17:50:16 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2023-wrong-problem/</guid>
      <description>&lt;p&gt;
The next good idea was from David Malan of Harvard&amp;#39;s CS50 class. For
full disclosure, I have to say that I&amp;#39;ve been skeptical of CS50 ever
since I started hearing from my former students. I&amp;#39;ve had a lot of
them either take CS50 at Harvard, TA the class, or TA the course that
follows CS50 and their assessment is, let&amp;#39;s say somewhat different
than the usual Ted Talk miracle course hype that normally surrounds
it.&lt;/p&gt;
&lt;p&gt;
What was the problem? Office hours. Malan described how offices hours
started in a dark dank computer lab but as they realized that most if
not all students had laptops they moved them to dining halls across
classrooms complete with snacks. This should have been great but he
shared a graph showing the typical cyclic behavior of office hours
visits - peaking right before each project was due. He also shared
that the wait for a TA would reach two hours at those peak times.&lt;/p&gt;
&lt;p&gt;
The solution involved reworking office hours to group office hours -
adding another small recitation to the class if you would and also one
single big office hours block with all 80 teaching assistants.&lt;/p&gt;
&lt;p&gt;
The problem - too many students waiting too long for help over and
over again is a real problem. My issue is that the solution doesn&amp;#39;t
address the real problem.&lt;/p&gt;
&lt;p&gt;
As an experienced teacher I had one immediate thought.&lt;/p&gt;
&lt;p&gt;
Over the day I ended up speaking to 3 other experienced HS teachers. I
told each the problem - even with Harvard&amp;#39;s resources, overloaded
office hours - too many students, too long a wait. I told the solution
as well - small group office hours + 1 big office hour block.&lt;/p&gt;
&lt;p&gt;
Each independently and immediately had the same reaction I did.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;ve got large numbers of students coming out to office hours
over and over again the problem probably isn&amp;#39;t with the TAs. The
problem is probably in the course.&lt;/p&gt;
&lt;p&gt;
Same thing when half the class fails a test or can&amp;#39;t complete a
project. That&amp;#39;s the time that as teachers we have to look at
ourselves. Maybe we&amp;#39;re not teaching something well or maybe it&amp;#39;s too
much in too short a time. Maybe an assignment is just unrealistic. &lt;/p&gt;
&lt;p&gt;
In any event, indications based on the presentation is that the issue
is most likely in the course, its delivery, or its instruction, not
the office hours arrangements.&lt;/p&gt;
&lt;p&gt;
Besides, looking at the small group TA solution, what you&amp;#39;re really
doing is adding an additional recitation to the class without awarding
any additional credits to the students.&lt;/p&gt;
&lt;p&gt;
I could be all wrong on this but I don&amp;#39;t think I am. It&amp;#39;s not uncommon
for an instructor not to look inward when class issues arise.&lt;/p&gt;
&lt;p&gt;
So, this might not be popular but that was my take.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it for my posts on &amp;#34;It seemed like a good idea at the time.&amp;#34;
Next we&amp;#39;ll move to thoughts on some other sessions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2023 - Deadlines and Commitments</title>
      <link>https://cestlaz.github.io/post/sigcse-2023-late-assignments/</link>
      <pubDate>Mon, 20 Mar 2023 12:41:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2023-late-assignments/</guid>
      <description>&lt;p&gt;
The first &amp;#34;good idea at the time&amp;#34; dealt with deadline extensions. &lt;/p&gt;
&lt;p&gt;
The scenario in question was presented by my long time friend Lauren
Bricker of the University of Washington although a very similar
situation was also presented by of Kristin Stephens-Martinez of
Duke. Lauren was one of the few High School teachers with a strong
background in CS so she&amp;#39;s really a unicorn and it made sense for UW
to come calling and snatch her up.&lt;/p&gt;
&lt;p&gt;
The issue was students turning in projects late. This is a tale as old
as time. Deadlines are a hot button issue in education. Some think
that we need hard ones and others think you should be able to turn
anything in at any time. I fall somewhere in between.&lt;/p&gt;
&lt;p&gt;
In Lauren&amp;#39;s case far too many students were asking for
extensions. This was a problem. The first solution was to allow any
student to request a 2 week extension on any in term project. You
couldn&amp;#39;t ask for an extension on the final project. With the
extension, a student could resubmit one time.&lt;/p&gt;
&lt;p&gt;
This worked well with some students - students who had something going
on during the project run or otherwise had legitimate issues that made
the original project window unrealistic.&lt;/p&gt;
&lt;p&gt;
The problem was that too many students would use the policy to
basically not do anything until the last minute - essentially treat
the project as a project with a deadline two weeks further out.&lt;/p&gt;
&lt;p&gt;
So, this policy worked for the student who tried to do things the
right way but would end up with others getting jammed up and falling
further and further behind as the class moved on.&lt;/p&gt;
&lt;p&gt;
One suggested solution would be to require specific milestones be
submitted but this would likely be a hardship on the students who
legitimately needed the extra time.&lt;/p&gt;
&lt;p&gt;
My suggestion was as follows.&lt;/p&gt;
&lt;p&gt;
I noticed that  Lauren uses git with her classes. Git has a wonderful
feature - extensive logs. As long as a student commits and pushes
their work to whatever central repository system they use - GitLab,
GitHub or other, the instructor can easily see what was done when.&lt;/p&gt;
&lt;p&gt;
My policy has always been that as long as you&amp;#39;ve been doing some level
of legitimate work on a project I&amp;#39;ll give an extension. When I do
grant an extension I always start by asking the student - when do you
think is a reasonable due date and I also ask about any resources they
need. As long as the their suggestion is reasonable I go with it. If
it isn&amp;#39;t, we discuss why it isn&amp;#39;t and come up with something together.&lt;/p&gt;
&lt;p&gt;
What do I mean by legitimate work? Well, that depends but at a very
basic level, I look to see if there was some development of the
project, some code, working or failed or even documentation in the
readme about a student&amp;#39;s issues (we set that policy of using the
readme as such early in the semester).&lt;/p&gt;
&lt;p&gt;
If a student asks for an extension but didn&amp;#39;t commit/push anything, we
have a discussion. I may or may not grant the extension but you can
bet the next time they do it right.&lt;/p&gt;
&lt;p&gt;
The nice thing about this solution is that aspects can also be
automated. It&amp;#39;s easy enough to write a script to determine how many,
if any commits a student has pushed in a given time frame. It would be
equaly easy to write a script to email students or instructors if a
student wasn&amp;#39;t submitting anything within a certain time frame.&lt;/p&gt;
&lt;p&gt;
For my policy, beyond this, I just request that the student asks for
the extension prior to right before an assignment is due. Some
teachers disagree and feel that requiring a student ask is more than
what should be expected but I do think that there is a point where a
student has to advocate for themselves and I&amp;#39;ll usually accept the
first last minute request but then not future ones.&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s how I&amp;#39;ve been dealing with late projects and it&amp;#39;s worked
well for me and my classes. I hope it can be helpful to some of you
out there but if you&amp;#39;ve got another policy or method of trying to get
students to work on  their projects in a timely manner please share.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2023 - It seemed like a good idea</title>
      <link>https://cestlaz.github.io/post/sigcse-2023-it-seemed-good-idea/</link>
      <pubDate>Sun, 19 Mar 2023 11:31:25 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2023-it-seemed-good-idea/</guid>
      <description>&lt;p&gt;
My new favorite session at SIGSCE is &amp;#34;It seemed like a good idea at
the time.&amp;#34; Panelists share something they tried in or with their
classes that they thought would be awesome. It wasn&amp;#39;t. then they
shared either how they tried to fix it or left it open ended. It&amp;#39;s a
lot of fun and for the two years I&amp;#39;ve attended the most interesting
and valuable session.&lt;/p&gt;
&lt;p&gt;
I wish though, that there was a presenter that shared something about
a specific lesson and how that failed - most if not all of the talks
I&amp;#39;ve been to in this session were always a little tangential to the
actual class content. I do understand this - it&amp;#39;s hard to get up in
front of a room of people and say &amp;#34;I failed&amp;#34; though I&amp;#39;m going to try
to find something, the bigger the better that I can share at a future
SIGCSE, I mean, I&amp;#39;ve been doing this for 33+ years so I&amp;#39;ve got to have
tons of failures to draw from.&lt;/p&gt;
&lt;p&gt;
Dan Garcia - one of the session organizers said that he hoped, and I&amp;#39;m
paraphrasing, that this session would dive deeper into what we
actually do - teach - and he&amp;#39;s right. That the session always had good
discussion, good material, and some laughts. Dan posed the question of
who actually gets to laugh when developing curriculum. He was right
about the session but I&amp;#39;ll dispute his final point. When I&amp;#39;m working
with my team on curriculum, lessons, and in fact anything education
there are lots of laughs. Our problem is we descend into &amp;#34;the stupid&amp;#34;
and things take us eight times as long as it should.&lt;/p&gt;
&lt;p&gt;
The only other thing was that last year, the organizers asked for
questions or suggested solutions at the end, this time only
questions. I think it&amp;#39;s important to explicitly call to the audience
for both.&lt;/p&gt;
&lt;p&gt;
There were five &amp;#34;failures&amp;#34; but my next two posts will focus on two of
them. First up will be Lauren Bricker from the University of
Washington. Her topic involved deadline extensions on student
projects. Kristin Stephens-Martinez of Duke also talked about
deadlines. That&amp;#39;s my next  post.&lt;/p&gt;
&lt;p&gt;
After that, I&amp;#39;ll look at David Malan of Harvard and CS50 fame and
his &amp;#34;failure.&amp;#34; The other speakers were also great but I didn&amp;#39;t come
away with any interesting extras to write about.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE  2023 An Overview</title>
      <link>https://cestlaz.github.io/post/sigcse-2023-overview/</link>
      <pubDate>Sat, 18 Mar 2023 19:40:54 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2023-overview/</guid>
      <description>
&lt;p&gt;
On top of what I posted yesterday, it looks like I&amp;#39;ll add something
on Nifty Assignments but as I&amp;#39;m winding down in my Toronto Hotel
waiting for tomorrow morning&amp;#39;s flight home, I thought I&amp;#39;d share some
general thoughts on the conference.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Numbers and perceptions.
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;The announced attendance was around 1500 but that was both in person
and remote. It would be interesting to know what the in person numbers
were but I&amp;#39;d estimate it was under 1000. There were a good number of
people there but it didn&amp;#39;t feel overwhelming. Continuing a terrific
change from last year, coffee and tea were available before the first
session each day and overall, at least from my perspective the
organizing team did a great job.&lt;/p&gt;
&lt;p&gt;
SIGCSE has always been a college level thing. Over the years, more and
more K12 educators have been attending and the scope has been widening
but this year, the K12 numbers seemed lower. There also seemed to
be a larger than usual amount of first timers. Of course, I could be
all wrong about this since this was just based on my observations and
I couldn&amp;#39;t really take in the entirety of the conference all at once
and have no access to the actual data.&lt;/p&gt;
&lt;p&gt;
I really enjoyed this edition of SIGCSE and I&amp;#39;ll share specifics in
future posts but for now I&amp;#39;ll say it was 100% a worthwhile and valuable
experience. That said, I saw too many instances of college faculty
talking authoratively about instruction in ways that would get them
laughed out of any strong collection of K12 teachers. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not the only one who experienced this.&lt;/p&gt;
&lt;p&gt;
This morning, during the Nifty Assignments session, I was speaking to
a HS teacher who I&amp;#39;ve known for a long time but was meeting in person
for the first time. It was his  first SIGCSE. I asked how he was
liking it. His response was &amp;#34;well, there are a whole lot of professors
who really could use a class or two in pedagogy.&amp;#34;&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;m probably being a bit hyperbolic but I do believe that many
college educators could learn a lot about teaching from K12 teachers -
particularly inner city K12 teachers, and for some there&amp;#39;s a level of
arrogance that won&amp;#39;t let them do so.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Location
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
It was my first time in Toronto and I really enjoyed the city or at
least the parts I was able to see.&lt;/p&gt;
&lt;p&gt;
Between Wednesday and Saturday, I walked about 20 miles of Toronto
streets. Hit the waterfront, the Fort York historic site, the Shoe
Museum (who would have thought there would be a museum dedicated to
Shoes), Kensington, UofT and more.&lt;/p&gt;
&lt;p&gt;
We had fun meals at Sneaky Pete&amp;#39;s and the Loose Moose and really good
modern Indian at Kettle. Side snacks at Wanda&amp;#39;s Pies and from the
tourist and foodie point of view the trip was a great success but
still leaves much to do on return trips.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Favourite parts
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
My favourite thing about this trip was that my daughter Batya came
along. She&amp;#39;s a software engineer at Meta but is spending the semester teaching at
Georgia State so Meta sent her along. Of course now, she&amp;#39;s considering
this ed thing as a possible career path (particularly if she&amp;#39;s hit in
the next round of layoffs). Devorah also came along but only to play
tourist. Just like it was a treat for me to have Batya in my class
back at Stuy, it&amp;#39;s also such a treat to be able to share professional
experiences be they strict tech or even better education. &lt;/p&gt;
&lt;p&gt;
Also, of course, was the hallway track. I was able to at least say hi
to almost everyone I wanted to who I knew was there. Though in one case
it was on the escalator out of the center for the final time and I was
so conferenced out by then I was barely coherent but still, so great
to see old friends.&lt;/p&gt;
&lt;p&gt;
Session wise, I loved the &amp;#34;It seemed like a good idea,&amp;#34;
&amp;#34;Microteaching,&amp;#34; and &amp;#34;Nifty Assignments&amp;#34; trifecta. Each of those
tackled a different aspect of actual teaching so together they made
for an interesting set. I&amp;#39;ll write more about each later.&lt;/p&gt;
&lt;p&gt;
As a final plus, I&amp;#39;ll say that the coffee break snacks were top notch. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Least favorite parts
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
There were a few sessions that unfortunately did dissapoint. One was a
session on liberal arts schools and the forthcoming ACM 2023
curriculum. The presenters talked about liberal arts colleges being
different but I was really hoping for a how and/or why. I left having
learned very little. I was hoping for maybe an example of a liberal
arts college and why its curriculum differed from a school
implementing the traditional ACM 2013 curriculum or a specific example
of how two liberal arts colleges differed from each other.&lt;/p&gt;
&lt;p&gt;
There were a few sessions like this where I was hoping for more than a
reading of the paper or report. The paper provided the bones but I
wanted the talk to be the meat on the bones. I&amp;#39;d say about two thirds
of the sessions I went to had the meat but a few were lacking.&lt;/p&gt;
&lt;p&gt;
My other downside, and I don&amp;#39;t know how to avoid this was that this
year I had the bad luck more than in the past of having more time
slots that had multiple sessions I really wanted to see at the same
time along with other slots with nothing that talked to me.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
What&amp;#39;s next
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
So that&amp;#39;s a quick hit on some overall thoughts, some good, and some
bad. I&amp;#39;ll start writing posts soon on individual sessions and  in some
cases individual presentations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sigcse 2023 Posts to come</title>
      <link>https://cestlaz.github.io/post/sigcse-2023-to-come/</link>
      <pubDate>Fri, 17 Mar 2023 20:10:42 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2023-to-come/</guid>
      <description>&lt;p&gt;
Long day two at SIGCSE lots of interesting stuff. Don&amp;#39;t have the time
or energy to write anything up so I thought I&amp;#39;d share a list of
topics that I plan to write up in the next few days or weeks.&lt;/p&gt;
&lt;p&gt;
After day 1&amp;#39;s keynote and the session on the ACM&amp;#39;s 2023 curriculum I
went to &amp;#34;It Seemed Like a Good Idea at the Time&amp;#34; which is my new
favorite session replacing &amp;#34;Nifty Assignments.&amp;#34; I plan to write up
that session over a couple of posts. I also went to the session on CS1
Pedagogical innovations and will write up some of what went on their.&lt;/p&gt;
&lt;p&gt;
Today&amp;#39;s keynote was enjoyable but not too much to write about so I&amp;#39;ll
skip that but there are a few things I want to talk about from the
&amp;#34;computing and liberal arts&amp;#34; session as well as from the
&amp;#34;microteaching&amp;#34; session. I also sat in on a session about student
success in CS2 but I might skip writing that up.&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s whats to come on this blog plus whatever&amp;#39;s interestding
tomorrow.&lt;/p&gt;
&lt;p&gt;
So, stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sigsce 2023 Opening morning</title>
      <link>https://cestlaz.github.io/post/sigsce-2023-opening/</link>
      <pubDate>Thu, 16 Mar 2023 10:59:58 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigsce-2023-opening/</guid>
      <description>&lt;p&gt;
Arrived in Toronto yesterday for SIGCSE 2023 along with Devorah and
 Batya. Devorah to play tourist and Batya as conference attendee. As usual, I arrived
early the day before to get my bearings. Since we weren&amp;#39;t partaking in
 any of the preconference activities we had an afternoon to explore
 the city. Ten miles walking from the hotel near the CN Tower, through
 and all around Kensington, looping through the University of Toronto
 campus and back. We hit local arts, games, yarn and fabric  shops as well as
 other local establishments.&lt;/p&gt;
&lt;p&gt;
 This morning, I have to say that the intro announcements was for the
 birds, or more specifically, the bird as there was a pigeon soaring
 up and all around the plenary hall.&lt;/p&gt;
&lt;p&gt;
 More seriously we had the usual warm welcome and I have to
 acknowledge that I really appreacited that like last year, coffee was
 available before the first session, Interesting that they
 announced around 1500 total participants which included both in
 person and remote. This is still down from in person attendance prior
 to Covid. Interpret that as you will.&lt;/p&gt;
&lt;p&gt;
 After the usual announcements - logistics, policies, top papers etc,
 we were off to the first keynote - astronaut Robert Thirsk. I really
 enjoyed his talk but it was an interesting choice as he&amp;#39;s neither an
 educator or commputer scientists.&lt;/p&gt;
&lt;p&gt;
 Thirsk was a mission engineer on the space shuttle and he walked us
 through a mission. He artistically painted a picture of the
 environment, launch and all that it entailed. As the mission
 proceeded, he recounted how they dealt with systems failure after
 failure. Some legit, some sensor issues, some major, some minor. In
 the end they had to abort and make a danger fraught landing. From
 Florida to Spain in 40 minutes.&lt;/p&gt;
&lt;p&gt;
 Then the reveal - it was all a dream. Or rather a simulation.&lt;/p&gt;
&lt;p&gt;
 Then Thirsk proceeded with his takeawys and how he felt they related
 to education.&lt;/p&gt;
&lt;p&gt;
 First, a couple of things I noted about this mission:&lt;/p&gt;
&lt;p&gt;
 One, and this was something repeatedly emphasized by Thirst was that
 in order for the space shuttle to work over a million components have
 to work, interact, and work together both the first time and
 everytime and there has to be extreme redundency.&lt;/p&gt;
&lt;p&gt;
 Another was that the crew used notepads for their checklists and for
 important information. Here they are in one of the worlds most
 advanced technological creations. Surrounded by monitors, switches,
 indicators and the best technology can provide and they were using
 old school, hand held, hand written notebooks. Cool.&lt;/p&gt;
&lt;p&gt;
 After the mission, Thirsk talked about his takeaways. His big one was
 simulation modelling and experiential learning and doing  it so much
 that not only will you get it right but you can&amp;#39;t get it wrong.&lt;/p&gt;
&lt;p&gt;
 Thirsk felt that we need much more of this and if our populations
 were trained this way maybe we woould have had better responses in
 times of crisis like when Covid hit or the supply chains failed.&lt;/p&gt;
&lt;p&gt;
 We already see a push for experiential learning in CS so I think most
 of us would agree but while his pleas were probably preaching to the
 choir this morning, it will probably fall on the deaf ears of those
 who actually make decisions and set policy.&lt;/p&gt;
&lt;p&gt;
 First off, simulation modelling and experiential learning takes
 longer and, like most teaching, works better in small classes. You
 know, like in those schools that rich folk send their kids to. Not so
 much in the public schools. It&amp;#39;s also much easier to test
 memorization with standardized tests so I wouldn&amp;#39;t hold my breath.&lt;/p&gt;
&lt;p&gt;
 Also, our entire system isn&amp;#39;t based on the common good. It&amp;#39;s based on
 money and keeping those in power in that money. We could maintain our
 infrastructure, simulate possible dangerous scenarios and how to deal
 wtih them and build in failsafes and redundencies but why do
 that. All it will do is maybe save lives or make sure people have
 clean water to drink and air to breath but it&amp;#39;s cheaper and more
 profitable to behave irresponsibly.&lt;/p&gt;
&lt;p&gt;
 Sorry, that&amp;#39;s not particularly uplifting but that is America.&lt;/p&gt;
&lt;p&gt;
 Another big takeaway Thirsk talks of the importance of &amp;#34;non technical
 competencies&amp;#34; which is a &lt;strong&gt;much&lt;/strong&gt; better term for soft skills and that
 there are all sorts of important things to learn during the college
 experience beyond the classroom. No argument there.&lt;/p&gt;
&lt;p&gt;
 Finally, Thirsk talked about the influence of educators. Something
 I&amp;#39;ve &lt;a href=&#34;https://cestlaz.github.io/post/forgot/&#34;&gt;written about&lt;/a&gt; before. He told of how Mrs. Shirly Cole, his third
 grade teacher took time out from class to play a radio broadcast on
 John Glenn&amp;#39;s launch into space. Mrs. Cole didn&amp;#39;t remember this years
 later but it had a huge impact. Thirsk went on to talk of other
 educators and how they had impacts.&lt;/p&gt;
&lt;p&gt;
 This is something worth remembering. Sure, we teach CS - loops,
 conditionals and the like but sometimes it can be a little something
 else that has greatest impact.&lt;/p&gt;
&lt;p&gt;
 As I said, it was an interesting choice to select a non educator no
 CS person but it was a strong keynote and I enjoyed it immensley.&lt;/p&gt;
&lt;p&gt;
 At the coffe break I barely got to any vendors as I ran in to some
 friends. I&amp;#39;m writing this while listening to a session on the ACM
 2023 CS Curriculumm (Beta). I&amp;#39;m not getting a whole lot out of this
 session, hence writing the post. I&amp;#39;ll probably talk a bit about this
 session though in a later post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hosted websites, Continuous Integration GitHub and GitLab</title>
      <link>https://cestlaz.github.io/post/git-ci/</link>
      <pubDate>Sun, 12 Mar 2023 12:08:29 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/git-ci/</guid>
      <description>&lt;p&gt;
Back when  I started hosting this blog on GitHub you had two
choices. Either you used Jekyll and GitHub would do it&amp;#39;s behind the
scene magic to convert your markdown files into your site or you did
it all on your own machine and you pushed up the finished site  to be
served under GitHub pages.&lt;/p&gt;
&lt;p&gt;
I started with the former but moved to the later using Hugo as my site
generator soon after. This has worked for years but it&amp;#39;s gotten a
little messy. I&amp;#39;ve needed two GitHub  repos - one for the source for
my blog and the other for the rendered web site and also I&amp;#39;ve had to
use Git submodules - something I never fully understood. This has
caused me troubles at times when trying to write posts from multiple
machines.&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d look this weekend to see if things have gotten  better.&lt;/p&gt;
&lt;p&gt;
It turns out, it has. Now, you can just serve your repo as a web page
just like  before but you can also set up your site using GitHub
actions.&lt;/p&gt;
&lt;p&gt;
GitHub actions is their facility to run some job when something
occurs. A typical setup would be to run your tests whenever code is
pushed or a pull request is merged. I taught this to my undergrads
last semester. Basically, you just set up a configuration file that
tells GitHub what to do.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the config file I used with my class for the automated testing:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;  name: C/C++ CI

on:
  push:
    branches: [ &amp;#34;main&amp;#34; ]
  pull_request:
    branches: [ &amp;#34;main&amp;#34; ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: make
      run: make
    - name: make tests
      run: make tests
    - name: ./tests
      run: ./tests&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
GitHub spins up an Ubuntu image then builds the project and runs the
tests. I get an email with the results or I can see them on GitHub.&lt;/p&gt;
&lt;p&gt;
Now I can use the same facility for serving this blog. The script runs
&lt;strong&gt;hugo&lt;/strong&gt; instead of &lt;strong&gt;make&lt;/strong&gt; and &lt;strong&gt;make tests&lt;/strong&gt; but it&amp;#39;s the same
idea. Whenever I push a new post, GitHub rebuilds the site and serves
it all from one repo.&lt;/p&gt;
&lt;p&gt;
Much simpler and much cleaner. What&amp;#39;s more, when I turned on GitHub
pages and selected the &amp;#34;use GitHub actions&amp;#34; option, it suggested I use
their &amp;#34;Hugo config script&amp;#34; which worked right out of the box.&lt;/p&gt;
&lt;p&gt;
While I was doing this I thought I&amp;#39;d also check out GitLab. GitLab is
a GitHub competitor. I like them both but since I&amp;#39;ve had so many
friends at GitHub and GitHub education specifically I&amp;#39;ve always gone
that way. Now, my friends have all left GitHub and I can&amp;#39;t say I&amp;#39;ve
been happy with all the companies latest moves so I thought I&amp;#39;d check
out the other guys.&lt;/p&gt;
&lt;p&gt;
It turns out GitLab also hosts pages and has a very similar actions
based deployment mechanism. I haven&amp;#39;t switched over yet and  might not
but I think I will start using it for my regular repo hosting. It
looks like a very nice alternative.&lt;/p&gt;
&lt;p&gt;
So, if you&amp;#39;re looking for hosting, check out GitHub and GitLab with
actions. I&amp;#39;d also say that if you&amp;#39;re teaching a class at the right
level, actions can be great to teach continuous integration and
testing. I&amp;#39;ll probably write that up when I cover it in class in a few
weeks&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it for now. I&amp;#39;ll try to post this. If it works, the changeover
from GitHub old style to GitHub actions went smoothly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recursive Sentences</title>
      <link>https://cestlaz.github.io/post/recursive-sentences/</link>
      <pubDate>Fri, 10 Mar 2023 09:58:04 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/recursive-sentences/</guid>
      <description>&lt;p&gt;
It&amp;#39;s been a while since I last wrote up a specific lesson idea so when
my friend Garth asked about recursion ideas I thought I&amp;#39;d write this
one up. This is a unit I used to teach in my intro class at Stuy using
Racket (nee Scheme) but I coded up a quick and dirty Python version.&lt;/p&gt;
&lt;p&gt;
Recursion is a polarizing topic. Some people love it, others hate
it. I&amp;#39;m sure the usual suspects of intro recursion problems doesn&amp;#39;t
help. Factorial, Fibonacci, Hanoi, things you can do with loops &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;a href=&#34;https://cestlaz.github.io/posts/2010-01-10-towers-of-hanoi/&#34;&gt;ancillary&lt;/a&gt; topics that come along with it.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re doing graphics you can do fractal trees and the like but
that&amp;#39;s not always an option and there could be a disconnect from doing
that to using recursion to solve problems.&lt;/p&gt;
&lt;p&gt;
I decided to take it out of the mathy graphicy world and do some text
processing. Let&amp;#39;s write a sentence generator. The recursion is light
but I think it&amp;#39;s pretty cool.&lt;/p&gt;
&lt;p&gt;
What follows outlines the unit. The actual lessons should be
embellished and more brought to life but writing that up would make
this post even longer.&lt;/p&gt;
&lt;p&gt;
What&amp;#39;s a sentence? Let&amp;#39;s start really simple. In the simplest form a
sentence is &lt;strong&gt;noun&lt;/strong&gt; &lt;strong&gt;verb&lt;/strong&gt;. Let&amp;#39;s write a program to generate sentences
of this form:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

NOUNS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dog&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;boy&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hammer&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ball&amp;#39;&lt;/span&gt;]
VERBS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ate&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ran&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bludgeoned&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;stalked&amp;#39;&lt;/span&gt;]


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;verb&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice(VERBS)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;noun&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice(NOUNS)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sentence&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; noun()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;verb()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Of course, this isn&amp;#39;t an interesting sentence. A slightly better
sentence would use the form &lt;strong&gt;noun_phrase&lt;/strong&gt; &lt;strong&gt;verb&lt;/strong&gt; where a &lt;strong&gt;noun_phrase&lt;/strong&gt;
could be something like &amp;#34;a boy&amp;#34; &amp;#34;the dog&amp;#34; or just &amp;#34;hammer.&amp;#34; A
&lt;strong&gt;noun_phrase&lt;/strong&gt; would be zero or one article followed by a noun.&lt;/p&gt;
&lt;p&gt;
We can write a function called articleq() that will either return an
article (the, a) or an empty string. This leads to these additional
functions:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;articleq&lt;/span&gt;():
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randrange(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;:
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;the&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;])
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;noun_phrase&lt;/span&gt;():
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    article? noun
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; articleq() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; noun()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The above will generate a noun_phrase that has an article about 50% of the
time.&lt;/p&gt;
&lt;p&gt;
Okay, here comes the recursion.&lt;/p&gt;
&lt;p&gt;
A noun_phrase also can have adjectives - specifically, zero or more
adjectives. This leads to adding this code (and changing noun_phrase):&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  ADJECTIVES &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scary&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hairy&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;charming&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loud&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;beautiful&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cromulent&amp;#39;&lt;/span&gt;]


  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;adjectivestar&lt;/span&gt;():
    prob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randrange(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; prob &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice(ADJECTIVES)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; adjectivestar()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;noun_phrase&lt;/span&gt;():
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       article? adjective* noun
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; articleq() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  adjectivestar() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; noun()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The recursion comes from the idea that an adjectivestar (star is for
the regexp notion that * means 0 or more of something) is either an
empty string or a single adjective + another adjectivestar(). That
adjectivestar can the in turn call itself again and again until the
random number hits the base case of returning.&lt;/p&gt;
&lt;p&gt;
With the noun side replaced, we can similarly replace &lt;strong&gt;verb&lt;/strong&gt; with
&lt;strong&gt;verb_phrase&lt;/strong&gt;. A &lt;strong&gt;verb_phrase&lt;/strong&gt; might be a verb followed by zero or one
adverbs.&lt;/p&gt;
&lt;p&gt;
The full code of this sentence generator can be found &lt;a href=&#34;https://gitlab.com/zamansky/python-recursive-sentences/-/blob/main/version3.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Once we&amp;#39;re done, assuming we filled our word lists with enough variety
we can generate a bunch of sentences and hilarity will ensue. Sure,
the tenses won&amp;#39;t match and the parts of speech will be messed up but
still, you&amp;#39;ll get a lot of cool fun sentences.&lt;/p&gt;
&lt;p&gt;
You can also extend things with or without more recursion. You can
generate a &lt;strong&gt;paragraph&lt;/strong&gt; made up of multiple sentences or how about a
&lt;strong&gt;compound_sentence&lt;/strong&gt; which could be defined as &lt;strong&gt;sentence&lt;/strong&gt; or &lt;strong&gt;sentence&lt;/strong&gt;
&lt;strong&gt;conjunction&lt;/strong&gt; &lt;strong&gt;compound_sentence&lt;/strong&gt; &amp;lt;– more recursion.&lt;/p&gt;
&lt;p&gt;
Not only is this a fun project but it also alludes to recursive
parsing which some of your students might study later on.&lt;/p&gt;
&lt;p&gt;
This project can be a lot of fun. It&amp;#39;s recursion but it&amp;#39;s not math and
in addition to the creative coding parts students can also get
creative with sentence structure and word list.&lt;/p&gt;
&lt;p&gt;
Give it a go.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr class=&#34;footnotes-separatator&#34;&gt;
&lt;div class=&#34;footnote-definitions&#34;&gt;
&lt;div class=&#34;footnote-definition&#34;&gt;
&lt;sup id=&#34;footnote-1&#34;&gt;&lt;a href=&#34;#footnote-reference-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;div class=&#34;footnote-body&#34;&gt;
&lt;p&gt;The loop thing is an issue if the student learned loops prior
to recursion. It seems that students that start with functional
programming show the reverse - they find loop problems tedious when
they can &amp;#34;more easily&amp;#34; just use a functional construct.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>NYSED says you don&#39;t need to know CS to teach CS</title>
      <link>https://cestlaz.github.io/post/soce/</link>
      <pubDate>Thu, 09 Mar 2023 15:11:38 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/soce/</guid>
      <description>&lt;p&gt;
The title might come of as hyperbole but it&amp;#39;s really true.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll explain.&lt;/p&gt;
&lt;p&gt;
A few years ago, NYSED created a certification area for computer
science. At Hunter, we&amp;#39;ve been running our certificate program for the
past three years and taking current teachers and qualifying them to
earn this new certification. This past Fall, NYSED finalized it&amp;#39;s
grandfathering position and just the other day it opened up the portal
to allow teachers to sign up. The grandfathering is called the SOCE -
Statement of Continued Eligibility (to teach computer science).  NYSED
also started an individual evaluation option.&lt;/p&gt;
&lt;p&gt;
I think the individual evaluation part is great. There are always
people who fall through the cracks. They are great teachers and really know
their stuff but they walked a different path. I have a friend who
taught CS for years but since he&amp;#39;s older he got his degrees before CS
was a thing. He also never worked for anyone else in tech even though he
created impressive software systems for his own company. In spite of
being super qualified, he&amp;#39;d never be approved by the state through
normal channels without having to take and pay for a whole bunch of
courses where he probably would know more than the instructors. Now,
with individual evaluation, he would have a chance to be fairly
judged.&lt;/p&gt;
&lt;p&gt;
On the other hand the SOCE really concerns me. Not just the SOCE but
the fact that if you taught at least one CS class this past year (or
maybe within the past few years) and you filled out the form, you don&amp;#39;t
need to do anything else to teach CS for the next &lt;strong&gt;10&lt;/strong&gt; years. This is
extremely concerning. What&amp;#39;s equally concerning is that the state is
doing nothing to encourage teachers to earn real certification which
can be both time consuming and costly. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve met a large number of NY teachers teaching CS. Mostly in NYC but
also from across the state. I&amp;#39;ve also evaluated hundreds of
applications to my certificate program. I&amp;#39;ve found that teachers fall
into the following categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Teachers who really know CS. This is the extreme minority.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Teachers who have attended PDs or similar to learn to teach a
specific course or learn rudimentary programming. Some of these
teachers think they really know CS, some recognize that they&amp;#39;re
just following a script. Some want to learn more, some don&amp;#39;t.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&amp;#39;s the second category that concerns me and that represents the
majority of teachers currently teaching CS.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look at the set of teachers who don&amp;#39;t want to learn more and
think that with their limited PD training that they&amp;#39;re doing right by
their students (voiceover: they&amp;#39;re probably not). These teachers can
continue doing what they&amp;#39;re doing for the next ten years. That&amp;#39;s a
generation of kids. As long as CS is untested (which is probably a
good thing) a teacher in this category can just dial it in while
focusing on their 4 other classes which have a high stakes exam. Even if
they&amp;#39;re not dialing it in, are they really doing right by the kids? If
I did short form PD to learn, let&amp;#39;s say physics, would I really be a
good physics teacher (voiceover: No).&lt;/p&gt;
&lt;p&gt;
The other category - teachers who do want to learn more and become
strong CS teachers. I&amp;#39;m hoping this is the majority of teachers
teaching CS but here the state is failing them and in turn failing
their students.&lt;/p&gt;
&lt;p&gt;
Right now, Hunter&amp;#39;s program is the only advanced certificate program
running in the state. The state should be encouraging more
institutions to create programs. The state should also be working on
financial support and even release time for teachers who want to be
re-certified in CS. It&amp;#39;s a big ask to tell a teacher - it&amp;#39;s great that
you want to earn this new certification - now pay for a bunch of
graduate credits and take those classes during your non-existent free
time.&lt;/p&gt;
&lt;p&gt;
If the state cared about bringing good CS Education to our students
they would have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Encouraged more institutions to create certification programs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide financial support for teachers and if possible, release
time for teachers to take said programs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduce the grandfathering window from 10 years to something more
like 5 years.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Instead, they, with a bold bravado said &amp;#34;we recognize the importance of CS
so we&amp;#39;re creating a new certification area&amp;#34; and then quietly said when
nobody was looking &amp;#34;but nobody needs it for the next generation of
kids.&amp;#34;&lt;/p&gt;
&lt;p&gt;
I know some teachers will be offended by this post but I&amp;#39;m hoping
teachers who do want to do it right didn&amp;#39;t miss the part about them
not getting the support. I&amp;#39;m with all of you, appreciate your efforts,
and wish the state (and city) was doing it right, enabling you to be
the best prepared teacher you can be for your kids.&lt;/p&gt;
&lt;p&gt;
On the other hand if I upset any teachers in that &amp;#34;we&amp;#39;re doing fine
even though we don&amp;#39;t know stuff&amp;#34; category, well, I&amp;#39;m good with that.&lt;/p&gt;
&lt;p&gt;
I also know that some people will dismiss this saying that &amp;#34;that Z guy
runs the only cert program going right now, he clearly has a vested
interest in more people getting certified.&amp;#34;&lt;/p&gt;
&lt;p&gt;
True, one of the big reasons I came to Hunter was to lobby the state
to create a CS certification area and to build the programs. I&amp;#39;m proud
of that work. I&amp;#39;ve also, however  pushed for other programs to be
created. I also worked hard to successfully acquire funding which has
paid for the vast majority of the over 90 teachers that are in or have
completed our program. Finally, as I&amp;#39;m leaving Hunter after this
semester, so I really don&amp;#39;t have any skin in this
particular game any more.&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s my take. I get that teachers should file for the SOCE - no
reason to individually &amp;#34;be the hero&amp;#34; and the state will basically
ignore the issue for the next decade. After that, who knows but in the
meantime, our kids deserve better.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Copilot and similar types of AI in learning CS</title>
      <link>https://cestlaz.github.io/post/ai-in-learning-cs/</link>
      <pubDate>Tue, 28 Feb 2023 14:50:07 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/ai-in-learning-cs/</guid>
      <description>&lt;p&gt;
So it seems like Copilot and similar will be beneficial to programmers
but the question remains as to how beneficial. Will it be incremental
change or will it be a game changer?&lt;/p&gt;
&lt;p&gt;
Today we&amp;#39;ll look at how it will affect teaching and learning CS.&lt;/p&gt;
&lt;p&gt;
It seems pretty clear that one group of learners will benefit from
things like copilot - people who are already strong programmers who
are learning something new. Like autocomplete on steroids it will free
those programmers of having to look everything up all the time. I
guess a second group that will benefit will be autodidacts but they&amp;#39;ll
thrive no matter what and when we&amp;#39;re talking about opportunity and
equity we&amp;#39;ve got to focus on everyone else.&lt;/p&gt;
&lt;p&gt;
For everyone else, particularly those learning in classes using
copilot will have certain benefits but the real question isn&amp;#39;t &amp;#34;is
there an advantage&amp;#34; but rather a costs benefits analysis.&lt;/p&gt;
&lt;p&gt;
Since copilot can be thought of as autocomplete on steroids we can
compare the discord that goes on when discussing IDEs with
autocomplete. &lt;/p&gt;
&lt;p&gt;
Some teachers think autocomplete is great and don&amp;#39;t see any downside
to students using editors that support it. Others feel that it&amp;#39;s
important for students to type everything out.&lt;/p&gt;
&lt;p&gt;
On the one hand, you can have autocomplete for things like
&lt;strong&gt;system.out.writeln&lt;/strong&gt; - type &lt;strong&gt;writeln&lt;/strong&gt; and hit tab and you&amp;#39;re done. One
could argue that if you&amp;#39;re ever in an environment without autocomplete
you&amp;#39;d be screwed but if you think about it, there&amp;#39;s no deeper
understanding if you type &lt;strong&gt;system.out.writeln&lt;/strong&gt; vs &lt;strong&gt;writeln&lt;/strong&gt;
particularly for beginners where the system.out is boilerplate.&lt;/p&gt;
&lt;p&gt;
On the other hand typing &lt;strong&gt;for&lt;/strong&gt; and having that complete to a for loop
is different than actually typing out the complete loop. One could
argue that typing for and then tab is just a higher level of
abstraction but I&amp;#39;d argue that it&amp;#39;s important to understand what&amp;#39;s
going on with the loop first. This is where I&amp;#39;m not sure if the
autocompletion is the right way to go.&lt;/p&gt;
&lt;p&gt;
Ideally, I&amp;#39;d love to see students &amp;#34;level up&amp;#34; - after typing out for
loops for a bit they can unlock the for loop autocomplete feature -
hey - now that&amp;#39;s an idea for a student ide!!!&lt;/p&gt;
&lt;p&gt;
I know that some people also feel that hand writing things is an aide
to learning. If that&amp;#39;s so, is typing as well? Is writing a for loop by
hand then then typing better? Is typing it all out better than just
drag and dropping a block? I don&amp;#39;t know the answer to any of these but
I think they&amp;#39;re interesting questions.&lt;/p&gt;
&lt;p&gt;
The question, or at least one of the questions about using copilot in
teaching and learning is the same but copilot takes it to the next
level. Instead of typing &lt;strong&gt;for&lt;/strong&gt; tab and getting a for loop you can type
&lt;strong&gt;// sum the values of an integer array ar&lt;/strong&gt; - you can use it to
complete programming &lt;a href=&#34;https://cestlaz.github.io/posts/programming-idioms/&#34;&gt;idioms&lt;/a&gt; or even complete functions.&lt;/p&gt;
&lt;p&gt;
Bigger time concepts but the same basic ideas.&lt;/p&gt;
&lt;p&gt;
There is another question that I think is going to get lost in the
shuffle though. Even if we decide that using copilot like technologies
is an absolute win, will there be unintended consequences. Will other
things be lost.&lt;/p&gt;
&lt;p&gt;
This has happen time and again.&lt;/p&gt;
&lt;p&gt;
In CS, when APCS-A/B went from C++ to Java we lost memory
management. This was good in certain ways but memory management is an
important concept for computer science students to understand. Take it
out of CS1 and CS2 and you have to put it back somewhere else. From
what the people doing the hiring in tech in the years following 5
years after the switch, it wasn&amp;#39;t always put back or put back
effectively. This isn&amp;#39;t a surprise since every college does things
their own way and if a student places out of one or more courses with
AP credit, well, they might miss something critical or be less well
prepared for it when it does appear.&lt;/p&gt;
&lt;p&gt;
The other big example I always use is from math. Calculators. No, I&amp;#39;m
not going to say that having students work out hard arithmetic by hand
was a good and important thing. I&amp;#39;m talking about interpolation.&lt;/p&gt;
&lt;p&gt;
Prior to calculators, when our students learned about logs or trig
functions they had log and trig tables. The tables only had so many
entries so students had to find values between the entries and they
invariable did have to, they learned and used linear interpolation.&lt;/p&gt;
&lt;p&gt;
If you think about it, that might have been the most useful real life
math skill taught in high school math at the time. Certainly it was up
there.&lt;/p&gt;
&lt;p&gt;
Hello calculators, goodbye trig and log tables. Goodbye learning
interpolation. That&amp;#39;s a skill that&amp;#39;s been lost to students for now
almost a quarter of a century. Sure, students can and have been
functioning with knowing interpolation but when you look at the math
that has and hasn&amp;#39;t been taught I&amp;#39;m fairly confident in saying that
when we stopped teaching interpolation something was lost.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s my fear of copilot type technologies.&lt;/p&gt;
&lt;p&gt;
When we teach mergesort we&amp;#39;re not just teaching mergesort. We&amp;#39;re
teaching the concept of divide and conquer algorithms. We&amp;#39;re
discussing run time. We&amp;#39;re looking at sorting in place or not. We also
have a platform to discuss solving problems that make use of different
but similar algorithms.&lt;/p&gt;
&lt;p&gt;
When we solve a dynamic programming problem we&amp;#39;re not solving a
specific problem but we&amp;#39;re teaching a general method of problem
solving.&lt;/p&gt;
&lt;p&gt;
At a smaller scale level, when beginners program they make errors. Now
error messages aren&amp;#39;t particularly helpful but learning how to read
them and fix ones errors is yet another manner of problem solving
we&amp;#39;re teaching. Some may argue that error messages will get better in
the future. Well, I&amp;#39;ve been programming for decades and while they&amp;#39;re
a little better than from way back, they&amp;#39;ve got a way to go. Besides
the problem sometimes isnot so much that the error is bad but that
students don&amp;#39;t take the time to read through the (admittedly overly
complex) wall of text. Solving unexpected errors, reading
documentation, searching for solutions. These are all things we&amp;#39;re
teaching beyond just the coding. &lt;/p&gt;
&lt;p&gt;
Copilot might make for faster coding but how much of our ability to
teach that more important problem solving will be lost?&lt;/p&gt;
&lt;p&gt;
Of course the answer might be none or it might be that the benefits
might outweigh the costs but educators should pay close attention not
to the superficial but very cool way that copilot replaces a short
prompt with a long coded solution but rather to what we&amp;#39;re really
trying to teach our kids beyond grunt coding and how will copilot
affect that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AI as a programmers aide</title>
      <link>https://cestlaz.github.io/post/ai-in-programming/</link>
      <pubDate>Tue, 28 Feb 2023 11:33:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/ai-in-programming/</guid>
      <description>&lt;p&gt;
ChatGPT in education has been all the rage but there&amp;#39;s another twist
on AI that was getting some buzz even earlier - AI based code
completions. GitHub&amp;#39;s Copilot has gotten the most air time but there
are others out there as well.&lt;/p&gt;
&lt;p&gt;
When you code with Copilot, you type in a function name and maybe a
comment above it and the AI system will fill in the function.&lt;/p&gt;
&lt;p&gt;
A canonical example seems to be Mergesort. Type in mergesort, hit the
magic key, and the function appears.&lt;/p&gt;
&lt;p&gt;
I was asked by a friend how this might affect teaching programming and
I&amp;#39;ve been thinking about it for a while.&lt;/p&gt;
&lt;p&gt;
I was going to share my thoughts today but realized that first, we
have to talk about products like Copilot as a programmers aid and then
we can talk about it as a learning tool. Today, we&amp;#39;ll cover the former
and next post the latter.&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;m not a professional programmer - at least I haven&amp;#39;t been one since
before I started teaching. I&amp;#39;ve done personal projects, some one off
contracts and a few applications for work but I haven&amp;#39;t written one of
those since I wrote a resume/interview managing system when Hunter won
the CUNY2X grant.&lt;/p&gt;
&lt;p&gt;
Even so, I think I&amp;#39;ve got a few thoughts worth sharing.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s first consider what these tools can do right now.&lt;/p&gt;
&lt;p&gt;
I started by playing with the mergesort exampe. I asked for it and the
AI&amp;#39;s obliged. This could be seen as a time saver but is it? It turned
out every time I tried I got a good basic mergesort but the merge part
was always another function call - still had to write or generate
that so it&amp;#39;s not just specify and move on. It&amp;#39;s specify, verify, and
then either tweak or move on. It also wasn&amp;#39;t optimized in any way. You
can decide for yourself if that&amp;#39;s good or bad. &lt;/p&gt;
&lt;p&gt;
A pro can tell me if using Copilot in this sense is a
time saver but I&amp;#39;m not so sure. Even if it is, wouldn&amp;#39;t most
programmers just use the built in sort function? It seems like in this
sense, tools like Copilot are like using a library but with inline
expansion and without verification. A mixed bag at best.&lt;/p&gt;
&lt;p&gt;
Even if the AI always got it right and was clear I wonder how much
time would really be saved. Most of my time programming is spent
thinking and editing and Copilot is about the generating. I don&amp;#39;t
doubt that it can be useful but in it&amp;#39;s current state, maybe not so
much.&lt;/p&gt;
&lt;p&gt;
The big benefit using it this way is if you ask it to write something
that you don&amp;#39;t know how to write but is that really a good idea given
that the code still has to be verified?&lt;/p&gt;
&lt;p&gt;
The other sense I&amp;#39;ve seen these tools used in is more like how Gmail
autocompletes sentences in your email. Again, very cool but I&amp;#39;m not
sure how useful. For the Gmail stuff, I always see the completions but
almost always just continue typing. I guess it&amp;#39;s similar to how a fast
typist frequently won&amp;#39;t fix errors, they&amp;#39;ll retype them. For example,
if you accidentally type Froderick instead of Frederick, a fast typist
probably wouldn&amp;#39;t fix the o. They&amp;#39;d probably delete the word backwards
and retype it. More keystrokes but they stay in the flow. &lt;/p&gt;
&lt;p&gt;
So, right now these tools seem cool but maybe not all that useful. I
could see benefit today by having them generate language idioms like
&amp;#34;sum a list&amp;#34; - things that templates and current autocomplete can&amp;#39;t
quite do but can be verified on the fly in no time but that&amp;#39;s about it.&lt;/p&gt;
&lt;p&gt;
In the future, however things could change.&lt;/p&gt;
&lt;p&gt;
The idea that at some point one could generate code from a description
is pretty appealing. Of course, that brings a challenge that many
beginner programmers have to deal with - specification. I tell my
students all the time &amp;#34;Computers are lousy at doing what you want them
to do but great at doing what you tell them to do.&amp;#34; Writing a program
for these not-yet-existing AIs will be all about writing
specifications and the specification will turn into our program. This
really isn&amp;#39;t too different than what goes on today. A for loop is a
higher level specification for some gotos and conditionals. A foreach,
a higher level specification of a for and when you add in Lisp like
higher level functions like map and filter that&amp;#39;s higher level
still. An AI like a future generation of Copilot can be just that.&lt;/p&gt;
&lt;p&gt;
My verdict? Are they cool? Yes. An aid to productivity? I&amp;#39;m not
sure. Will they get there? Probably but I don&amp;#39;t know when.&lt;/p&gt;
&lt;p&gt;
Next time, we&amp;#39;ll talk about how these tools can change the landscape
of teaching and learning programming.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Motivating Students in CS Class</title>
      <link>https://cestlaz.github.io/post/motivating-students/</link>
      <pubDate>Fri, 17 Feb 2023 10:00:05 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/motivating-students/</guid>
      <description>&lt;p&gt;
A teacher in one of my networks posted a question earlier today -
&amp;#34;have you had any challenges or trouble with motivating kids in your
classes?&amp;#34;&lt;/p&gt;
&lt;p&gt;
Not a new question and  I&amp;#39;m sure for any teacher with any level of
experience the answer is a resounding &lt;strong&gt;yes&lt;/strong&gt;. I don&amp;#39;t care who you
are. Not all of your students are motivated all the time.&lt;/p&gt;
&lt;p&gt;
This can particularly be a problem when a teacher switches over from
teaching an elective or selective to a required class but it might not
be. I had to deal with this when I was able to get Stuy to require the
intro course I designed. It was an adjustment but not really too big a
deal. If anything, more students ended up getting turned on to CS than
turned off and since even as an elective, there were always some
unmotivated students. The adjustment was overcoming the reticence of
students being &amp;#34;forced&amp;#34; to be there as opposed to students who might
have taken an elective for the wrong reasons.&lt;/p&gt;
&lt;p&gt;
Anyway, back to the problem.&lt;/p&gt;
&lt;p&gt;
CS can be many things but in K12 it frequently involves programming
and since that was what the initial question was referring to, we&amp;#39;ll
stick to that.&lt;/p&gt;
&lt;p&gt;
Some students will be motivated by programming in and of
itself. They might see it as a creative art. That&amp;#39;s great but they&amp;#39;re
the easy ones.&lt;/p&gt;
&lt;p&gt;
Beyond that, programming is usually used for one of two
things. Solving problems and/or building things. You could also add
for telling stories or communicating ideas but you might put those
under building things.&lt;/p&gt;
&lt;p&gt;
Looking at programming through those lenses can also motivate more
students.&lt;/p&gt;
&lt;p&gt;
From there, we get to the fine tuning.&lt;/p&gt;
&lt;p&gt;
What will scratch a student&amp;#39;s itch. They might not care for coding but
they might have some problem they want to solve of thing they want to
build. When I was very young and just teaching myself to program I was
of an age when a favored pastime was making fun of your friend&amp;#39;s
mother. So, what did my clique do? We wrote &amp;#34;The Mother Game&amp;#34; - a
stupid little program to insult each others moms. True, we were
already motivated since we were teaching ourselves but we went much
farther doing that silly game than if we were solving some textbook
problem.&lt;/p&gt;
&lt;p&gt;
Sometimes collaboration can help. Of friends and I who wroet &amp;#34;The
Mother Game,&amp;#34; two of us were techies but one wasn&amp;#39;t but the third got
caught up in the group activity.&lt;/p&gt;
&lt;p&gt;
Of course we still have to remember that one size will not fit
all. Something that motivates student A might not motivate student B
and what motivates the teacher will almost certainly not motivate
everyone in class (I&amp;#39;m looking at you, gamification people). Sure,
games are fun for some but not everyone. Same with sports, current
events, fashion and any other topic. As a teacher you can mix it up
and give individual choice when possible and all of that can help.&lt;/p&gt;
&lt;p&gt;
One thing to remember though is that even when we&amp;#39;re having trouble
motivating all of our students we still have it much easier in that
regard than many other subject teachers. A language teacher is
limited by their class level&amp;#39;s vocabulary. In math, you can solve
problems but only with the math they&amp;#39;ve learned so far which we know
rarely translates to natural motivation. I love history but many
students don&amp;#39;t and history classes are frequently very strictly
constrained so teachers might not have the freedom they want to
motivate as many students as they could otherwise.&lt;/p&gt;
&lt;p&gt;
And of course, public school teachers with large classes will have a
&lt;strong&gt;much&lt;/strong&gt; harder time than private school teachers who only meet with a
handful at a time.&lt;/p&gt;
&lt;p&gt;
Before closing, I should also mention that some teachers will have an
easier time than others due to their own personalities. Some teachers
are charismatic or otherwise succeed by &amp;#34;force of personality.&amp;#34; It
seems that students more want to please some teachers than others and
that is also a form of motivation. I&amp;#39;m not saying it&amp;#39;s a great long
term one but I do want to acknowledge it.&lt;/p&gt;
&lt;p&gt;
So, to close I also want to remind teachers that no matter what you do
you are &lt;strong&gt;not&lt;/strong&gt; going to motivate all students and &lt;strong&gt;not&lt;/strong&gt; all the
time. You might read facebook posts by miracle teachers who only share
successes or &amp;#34;thought leaders&amp;#34; who talk the talk but don&amp;#39;t walk the
walk but the truth is nobody bats 1000. In baseball, you can fail at
the plate two third of the time and you&amp;#39;re a hall of famer. Good
teachers will do better than that but as I said, nobody bats 1000. Win
as much as you can but don&amp;#39;t beat yourself up because you can&amp;#39;t reach
everyone all the time. Strive to do better throughout your career and
when the dust settles you&amp;#39;ll see that your successes far outweigh the
times when you weren&amp;#39;t as happy with your results.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A poor craftsman blames his tools</title>
      <link>https://cestlaz.github.io/post/ides-tools/</link>
      <pubDate>Mon, 13 Feb 2023 06:48:49 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/ides-tools/</guid>
      <description>&lt;p&gt;
Yesterday, Alfred Thompson posted on students &lt;a href=&#34;https://blog.acthompson.net/2023/02/cs-studentslearn-your-ide.html&#34;&gt;knowing their
development environments&lt;/a&gt;. Alfred&amp;#39;s post was inspired by a related post
by &lt;a href=&#34;https://www.cs.uni.edu/~wallingf/blog/archives/monthly/2023-02.html&#34;&gt;Eugene Wallingford&lt;/a&gt;. Eugene&amp;#39;s post was about more than development
environments and both his and Alfred&amp;#39;s posts are worth a read.&lt;/p&gt;
&lt;p&gt;
Being a tool wonk I thought I&amp;#39;d add my two cents.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve always been a tool wonk. Use the right tool for the job and if
you need to buy one, don&amp;#39;t cheap out - get the best value right
tool. This got me in trouble with Devorah when I spent $309 around
thirty years ago at Bridge Kitchenware for a K5SS - 5 quart Kitchenaid
mixer when we were first living together. Back then $309 was a
lot of money for us and to spend on a mixer…. Over the years, after
countless loaves of bread, cakes and more, the mixer has proven its
worth.&lt;/p&gt;
&lt;p&gt;
Likewise my Cuisinart. Nothing fancy, just a motor in a box. Both are
older than our two children. I also love my F Dick 9 inch chefs
knife although that was a bit of a luxury purchase. I also, equally
love my much less expensive Victorinox boning knife.&lt;/p&gt;
&lt;p&gt;
Of course, the right tool for me - the home cook, is not necessarily
the right tool for the professional. A restaurant kitchen or butcher
shop is much more likely to have inexpensive Dexter Russel knives
rather than pricey Wusthof ones and they&amp;#39;ll use a regular
sharpening/exchange service. Makes sense - in a restaurant the knives
will be used more frequently by more people who on the one hand, know
how to use the tools better, but on the other might take less
individual care of them.&lt;/p&gt;
&lt;p&gt;
Everything that is true about home vs professional tooling can also
inform our CS classroom tooling but it&amp;#39;s not quite as simple.&lt;/p&gt;
&lt;p&gt;
True, students should know their tools and know them well but this
should be tempered by what a teacher is trying to do with the class at
any given time. When encouraging students to really learn a
development environment you have to balance the short term benefit,
the long term benefit, and the cost. that cost is usually up front
time. This is also true for professional developers.&lt;/p&gt;
&lt;p&gt;
I remember talking to a friend who got a little logic puzzle from a
street fair. It involved rearranging colored lines of blocks. He wanted
to write a program to solve it. So, he started to set up and tweak his
programming environment. He ended up spending so long setting things
up just right that in the meantime, his wife and kids all individually
solved the puzzle by hand.&lt;/p&gt;
&lt;p&gt;
One can argue that for future related development, my friend ended up
ahead but since there wouldn&amp;#39;t likely be related development the time
was lost and it would have been much faster just to solve the problem
at hand. &lt;/p&gt;
&lt;p&gt;
The other rub is that professional tools can sometimes be too complex
or can do too much for students. I love autocomplete when using
obscure libraries but I don&amp;#39;t think it helps students when they&amp;#39;re
first learning basic language constructs. Same for large provided
template code.&lt;/p&gt;
&lt;p&gt;
The thing with IDEs is that you have to find the right one that
supports the way you teach.&lt;/p&gt;
&lt;p&gt;
I know teachers that want to do everything on the command line. They
want the students to walk through the process from source code -&amp;gt;
class file -&amp;gt; running on the jvm and the command line gives them that
option. They also might want to teach command line tools. The command
line also, is in some ways the simplest approach. One place to input
commands, one place to see results.&lt;/p&gt;
&lt;p&gt;
On the other hand, it can be intimidating and it doesn&amp;#39;t benefit from
all the supports an IDE can give. Personally, I have mixed feelings on this
approach. Sometimes it&amp;#39;s been the right choice for my students, other
times, not so much. &lt;/p&gt;
&lt;p&gt;
I know other teachers who love BlueJ - a graphical IDE that focuses
on objects. It really seems to shine in helping to clarify OOP but it
never worked for me. Probably because I&amp;#39;m not a huge OOP fan. That
said, for some teachers it&amp;#39;s the sweet spot IDE.&lt;/p&gt;
&lt;p&gt;
Others dump their students into professional IDES like Eclipse or
nowadays VSCode. I feel these give too much and have too much
complexity. Others disagree and that&amp;#39;s fine. What&amp;#39;s right for me and my
students might not be right for another teacher and class.&lt;/p&gt;
&lt;p&gt;
For me the sweet spot IDE for new learners are things like DrJava,
DrRacket, or Thonny. Very simple lerning IDEs. They&amp;#39;re not made for
professionals so they don&amp;#39;t integrate with complex build systems. they
give students some structure and support but not too much.&lt;/p&gt;
&lt;p&gt;
Most recently, I&amp;#39;ve started students on Thonny for Python then
transitioned them to other tools. I encourage them to do a deep dive
between semesters or over the summer and discover what really works
for them. Through my classes, though, I try to demonstrate how knowing
your tools benefits you as a developer or even just a user. If I can
show how I leverage the Unix shell, I do, if there&amp;#39;s something in
Emacs that makes me more productive, I&amp;#39;ll show it. I&amp;#39;ll also mention
that in most cases, whatever tools they&amp;#39;re using will have an
equivalent and they should explore it.&lt;/p&gt;
&lt;p&gt;
While it&amp;#39;s true that a poor craftsman blames his tools, a good
craftsman knows their tools and leverages them to great effect. While
we&amp;#39;re teaching CS, programming, and languages, it&amp;#39;s worth discussing
tooling as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Organizing a topics course</title>
      <link>https://cestlaz.github.io/post/organizing-topics/</link>
      <pubDate>Tue, 07 Feb 2023 12:18:10 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/organizing-topics/</guid>
      <description>&lt;p&gt;
I&amp;#39;m team teaching the CS Topics course this semester with my buddy
JonAlf. It&amp;#39;s the final course in our Advanced Certificate and Masters
programs in CS Education.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a fun course. The theory is that a K12 CS teacher doesn&amp;#39;t need to
know everything but should know a little about a lot. It&amp;#39;s a survey -
think of it as an intro unit in ten to twelve different topics in CS.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s also something of a catchall. After this cohort, students
completing our program and in fact any NY state CS teacher
certification program will have to sit for and pass a new Content
Specialty Exam (CST) and while the exam hasn&amp;#39;t been released, best bet
is that it will cover draw from the NY State CS and digital fluency
standards. Between all our other courses we cover most of the
standards and &lt;strong&gt;far&lt;/strong&gt; more in many areas but there are a few topics that
just don&amp;#39;t fit. Also, some items from the standards are already covered in
courses like our Ethics course, but we can look at them from a
more technical point of view in topics.&lt;/p&gt;
&lt;p&gt;
The way I set up the course last year was that I taught the first
couple of topics - covering networks and networking and also
pragmatically generating web sites/applications with Flask. After
that, the students teach the topics and I support them in the
background. I cover the first topics to give them all the time and
support necessary to develop their lessons and I cover networking there
because there are a number of nit picky standards items I want to make
sure are covered.&lt;/p&gt;
&lt;p&gt;
When setting up and supporting the student groups the important thing
is to make sure that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The topics collectively cover everything I feel is important to be
covered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They deliver their topic at the right level as this is a CS class
not an education class. It&amp;#39;s got to be rigorous enough from the CS
point of view but at the same time accessible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
With our first cohort, the class was integrated into the summer
program but last year was also a standalone during the Spring. It
worked pretty well but JonAlf and I decided to change a few things
this year. Part of this was in the hope that things run more smoothly
and the students learn and retain more and partly because I&amp;#39;m handing
off the program when I leave Hunter after the Spring and I want to try
these changes so we can give some specific recommendations for the
next program leader.&lt;/p&gt;
&lt;p&gt;
Overall the plan is the same but the big change is how we&amp;#39;re going to
overlap the topcis. Last year each week was self contained, this year,
we&amp;#39;re overlapping things.&lt;/p&gt;
&lt;p&gt;
On any given week there will be a synchronous class delivered by a
student team. The week prior, that team will give an async
assignment - watch some videos, read some tutorials, work through some
exercises, whatever, that will lead in to the synchronous class. At the
end of the class, the group will give a homework assignment for the
next week. Also at the end of the class, the next group will assign
its prework async assignment.&lt;/p&gt;
&lt;p&gt;
This means that between the synchronous sessions, each week the
students are working on two things. The prior week topic&amp;#39;s homework
and the forthcoming week topics prework. This should effectively
stretch each topic out to two weeks rather than a more intense one
week at a time. We&amp;#39;re hoping this leads to better weekly discussion
and better retention.&lt;/p&gt;
&lt;p&gt;
The other change we&amp;#39;re making is that the student teams have to grade
the homework they assign and also fill out a comment form about their
teammates.&lt;/p&gt;
&lt;p&gt;
The peer evaluation form is needed because groups are much larger this
time around. Having the groups grade the homeworks should serve two
purposes. First, some teams missed the mark last time around. Many
assignments were great but a few were either too onerous  and a few
too trivial. The other reason is selfish - some of last years
assignments were a bear to grade and with 55 students, I don&amp;#39;t need
that. Of course, after they grade the homeworks, JonAlf and I also
have to go over them.&lt;/p&gt;
&lt;p&gt;
These aren&amp;#39;t radical changes but I&amp;#39;m hoping they make for a smoother
class from a teachers point of view and a better experience from the
students point of view. If so, it&amp;#39;ll be all packaged for my
replacement. If not, well, things still worked pretty well last year
and shouldn&amp;#39;t be worse so that&amp;#39;s fine too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The College Board wasn&#39;t cowardly</title>
      <link>https://cestlaz.github.io/post/college-board-ap-aastudies/</link>
      <pubDate>Fri, 03 Feb 2023 08:52:49 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/college-board-ap-aastudies/</guid>
      <description>&lt;p&gt;
As I&amp;#39;m sure you&amp;#39;re aware, recently, in his latest racist, fascist
proclamation, Ron DeSantis threatened to stop offering AP African
American Studies (APAAS) in Florida because, well, we can&amp;#39;t actually teach our
children anything resembling our actual rather checkered history.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m sure you&amp;#39;re also aware that the College Board just announced
changes to APAAS which basically removed everything DeSantis found
objectionable.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been seeing articles, blog posts, Tweets and more all calling the
College Boards act a cowardly one. I disagree.&lt;/p&gt;
&lt;p&gt;
To be cowardly, the College Board would have had to have wanted to do
the right thing - stick to their current course but ultimately cave
under pressure. I don&amp;#39;t think the college board cared enough. If you
really look at the college board and its history. It&amp;#39;s not about
education and student opportunity. It&amp;#39;s always been about money and brand.&lt;/p&gt;
&lt;p&gt;
If I remember correctly, the Florida government pays for AP exams (at
least it used to). This is a tremendous cash cow for the CB. For
them, the calculus isn&amp;#39;t &amp;#34;what should students study in APAAS.&amp;#34; The
calculus is &amp;#34;how much money do we stand to lose.&amp;#34; To them, this way
they get to keep Florida and other red state money and they&amp;#39;re
figuring that even the schools and districts who are claiming outrage
will still offer APAAS and other AP exams. The schools will vent but
ultimately say that they can teach a superset of the AP class.&lt;/p&gt;
&lt;p&gt;
The College Board wins. DeSantis and the far right nuts win and only
the students lose.&lt;/p&gt;
&lt;p&gt;
I have no doubt that some (many?) will disagree with my stance. Mostly
people who have bought in to the college board for years, and in some
cases worked for or with them.&lt;/p&gt;
&lt;p&gt;
One can try to rationalize and say that the capitulation was so soon
after DeSantis&amp;#39; proclamation that they had to have these changes in
the works already. True but does anyone really believe that DeSantis&amp;#39;
public statement was the first time the CB got wind that this was
going to be a PR issue they&amp;#39;d have to deal with?&lt;/p&gt;
&lt;p&gt;
At the end of the day, the College Board offers two things - high
stakes exams and branding. That&amp;#39;s it. The more tests they sell and the
better perceived their brand, the better it is for the college
board. It&amp;#39;s no about education. If it were, then it wouldn&amp;#39;t be all
about a single test per subject. If it were, they wouldn&amp;#39;t have create
the PSAT 8 9. If it were, we wouldn&amp;#39;t see the pivot from being about
college level courses to APCS-P.&lt;/p&gt;
&lt;p&gt;
Now, people will say that APCS-P was all about increasing exposure,
diversity, and equity but you can&amp;#39;t deny that creating an easy AP and
keeping the same branding as college level classes all with a tech
boom going on was going to sell a lot of exams. Particularly when
schools, not students paid and more exams given means higher ratings
for schools.&lt;/p&gt;
&lt;p&gt;
Besides, a broken clock is still right twice a day. CB can be all
about CB and not about students but still from time to time do right
by them.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m also reminded of a report I saw decades ago where the then leader
of the CB claimed that the only thing the SAT was a predictor of was
how you would do on future SAT exams. Somewhere down the line, that
changed to it was a college predictor. That&amp;#39;s now being put to the
test as more colleges are dropping the exam.&lt;/p&gt;
&lt;p&gt;
Truth be told, while having SAT scores on an applicants packet has
been useful as for baseline comparisons. Now that I&amp;#39;m on my second SAT
free cohort I can say that the SAT really isn&amp;#39;t important.&lt;/p&gt;
&lt;p&gt;
While some of us have pushed back, the CS Ed community has been far
too accepting of the College Board as they&amp;#39;ve become more and more
influential in the K12 Ed Space. &lt;/p&gt;
&lt;p&gt;
In any event, we should remember that the CB is a business and the
business is in selling exams. They&amp;#39;re not teachers. They might hire
teachers but they&amp;#39;re test makers and have their own agenda.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s no reason to believe they care about justice or equity over
selling exams. They didn&amp;#39;t act cowardly. They acted in their own self
interest. As teachers, we work in our students best interests.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a difference and we have to remember that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tech Layoffs and Workers Rights</title>
      <link>https://cestlaz.github.io/post/tech-layoffs/</link>
      <pubDate>Mon, 30 Jan 2023 10:59:20 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/tech-layoffs/</guid>
      <description>&lt;p&gt;
Lots of layoffs in big tech recently. Overall lousy but I am
encouraged by the number of people trying to organize the local
community to be supportive in helping those affected.&lt;/p&gt;
&lt;p&gt;
Clearly this &amp;#34;correction&amp;#34; can turn current employees worlds upside
down and place individuals and families in precarious financial
situations but the effects also affect the incoming workforce. In
addition to layoffs, internships and offers have been canceled left
and right.&lt;/p&gt;
&lt;p&gt;
Things are bad but are they bad enough to convince not only those
directly affected but also those who could be to make things better? I
hope so but I&amp;#39;m skeptical.&lt;/p&gt;
&lt;p&gt;
I say those affected rather than the tech industry because I&amp;#39;ve been
thinking a lot about the state of labor recently and changes, just like
during the heyday of the labor movement, changes will only
come when demanded by the masses. &lt;/p&gt;
&lt;p&gt;
I get it that when a market contracts, an economy turns down or there
are unforeseen shifts like a global pandemic, money doesn&amp;#39;t flow and
people lose jobs. I get it but that&amp;#39;s not really what I&amp;#39;m seeing.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m seeing left and right that &amp;#34;profits are down.&amp;#34; Read that
carefully. &amp;#34;Profits are Down,&amp;#34; not losses are up. When you say profits
are down, you&amp;#39;re not saying you&amp;#39;re losing money. You&amp;#39;re saying you&amp;#39;re
making money, just not as much. It&amp;#39;s like the Wall Street mindset that
turned me off so many years ago. If you buy a stock, it goes
up, yo sell, you make money. If it then goes up more, the Wall Street
mind thinks you&amp;#39;ve lost money. That&amp;#39;s not healthy.&lt;/p&gt;
&lt;p&gt;
If companies were just trimming the fat, that would be one thing but
that wouldn&amp;#39;t result in mass layoffs - that would happen over time
when a hire was found to be a bad fit. Sure. Some non-productive
employees are being let go but so are many really good people. If
a company is letting go of good people then that&amp;#39;s bad planning on the
companies part.&lt;/p&gt;
&lt;p&gt;
The truth is that even though tech employees are relatively well
paid, they&amp;#39;re still cogs in the machine and ultimately, at will
employees. Maybe people will start to realize with all the perks
more often than not, they&amp;#39;re still just there to make money for the
corporation. At the end of the day, the company doesn&amp;#39;t care about
them. Even when we see the top execs taking cuts, we don&amp;#39;t see it
affecting their lifestyles. It&amp;#39;s a token gesture to ameliorate the
masses - make them feel like the top of the ladder is feeling the
pain. They&amp;#39;re not. They&amp;#39;ll say &amp;#34;I take responsibility&amp;#34; and then go on
in their bubble.&lt;/p&gt;
&lt;p&gt;
Combine the recent corporate welfare (turned frequently into stock
buybacks), the layoffs, price gauging and still profits across
industries and maybe, just maybe, people will start to realize that
we&amp;#39;ve got to get back strengthening the worker. That the hard fought
gains of our parents and grandparents have been given back to the
rich. This goes back as far as I can remember with Reagan firing the
Air Traffic controllers even though their demands were not only
reasonable but in fact just about all are now in affect to Republican
led &amp;#34;Right to work&amp;#34; laws. Of course the Democrats only put up token
resistance if any at all.&lt;/p&gt;
&lt;p&gt;
If tech workers, and workers in general, had reasonable rights and
protections. The kinds that, dare I say it, a modern form of union
could provide then when times got bad, the pain would be shared
equally between ownership and worker. Workers wouldn&amp;#39;t be thrown on to
the street willy nilly but there would be a framework to provide a
safety net. &lt;/p&gt;
&lt;p&gt;
Will the tech workers community act in any way not only to protect
themselves in the future but other workers in general? We&amp;#39;ll see. As I
said, I&amp;#39;m skeptical but there are some trying. I won&amp;#39;t mention names
but a handful of my former students have been active and vocal in
fighting for workers rights and equity in tech, sometimes at great
personal cost, and I couldn&amp;#39;t be prouder of them. I hope they prevail.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Day Final Semester</title>
      <link>https://cestlaz.github.io/post/first-day-last-semester/</link>
      <pubDate>Fri, 27 Jan 2023 09:49:07 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/first-day-last-semester/</guid>
      <description>&lt;p&gt;
So, yesterday was the first day of the semester. Since I&amp;#39;m retiring,
it&amp;#39;s my last first day at Hunter.&lt;/p&gt;
&lt;p&gt;
Felt pretty good. I think knowing that I&amp;#39;ll get a break after the term
has alleviated some of the burnout for now.&lt;/p&gt;
&lt;p&gt;
What will I be focusing on in class this last time around?&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m teaching three classes.&lt;/p&gt;
&lt;p&gt;
First up is my undergraduate data structures. To be honest, I&amp;#39;m not
looking at anything special there - just business as usual. I enjoyed
working with this group last semester in their CS1 class so this is
just a continuation. I&amp;#39;ll try to bring the usual extras I bring to DS
classes - interesting applications of the data structures and
algorithms and work on prepping for the technical interview but I
don&amp;#39;t think I&amp;#39;ll be paying attention to anything different than any
other semester.&lt;/p&gt;
&lt;p&gt;
My CS1 recitation though, is going to take more thought. Of the three
undergraduate classes I cycle through, CS0 in Python, this CS1
lab/recitation, and Data Structures, this class is the one where I
have and exercise the most freedom. I do a good deal of work with the
class on practical programming and software engineering as well as
looking at some more advanced topics than the regular
sections. Passing off my data structures class to the &amp;#34;next guy&amp;#34; will
be pretty straightforward but this class has been customized enough
that I have to really thin about and document what should be kept
regardless of the new instructor and what&amp;#39;s really extraneous. &lt;/p&gt;
&lt;p&gt;
We can probably drop the CS extras I do - as much as I like them, the
truth is that another CS instructor might prefer other advanced
topics.&lt;/p&gt;
&lt;p&gt;
The Software Engineering stuff, though, I think I&amp;#39;ve been doing
particularly well and should probably be kept as is. I&amp;#39;ve really got
to document all of this and prepare for the hand off.&lt;/p&gt;
&lt;p&gt;
My third class is a topics class for the Masters students and working
teachers in my certification program. That should be fun. Last year, I
enjoyed all the student presentations and got some great new ideas
should I teach any of the topics in the future. this time around
should be the same.&lt;/p&gt;
&lt;p&gt;
The thing I have to focus on is that I have to make sure to document
the aspects of the class that will potentially be tested on the
forthcoming CST. That&amp;#39;s the states Content Specialty Test. This group
will probably be exempt since they&amp;#39;ll finish off before the exam is
released but future cohorts will have to sit for the exam in order to
earn their state CS certification. I&amp;#39;ll have to document all the
little annoying things that could be on the exam for future reference
so that the next person running the program makes sure they&amp;#39;re all
covered when next this class runs.&lt;/p&gt;
&lt;p&gt;
So that&amp;#39;s pretty much it.&lt;/p&gt;
&lt;p&gt;
First week down and twelve more to go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>chatGPT TOC</title>
      <link>https://cestlaz.github.io/post/chatgpt-summary/</link>
      <pubDate>Mon, 23 Jan 2023 14:29:45 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/chatgpt-summary/</guid>
      <description>&lt;p&gt;
I know I said that I was done with chatGPT but since I&amp;#39;ve ended up
sharing my posts with a few people I though a quick table of contents
post would be appropriate.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Post 1 - &lt;a href=&#34;https://cestlaz.github.io/post/cheating&#34;&gt;Some general thoughts on cheating&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 2 - &lt;a href=&#34;https://cestlaz.github.io/post/cheatgpt/&#34;&gt;Cheating with chatGPT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 3 - &lt;a href=&#34;https://cestlaz.github.io/post/teachgpt/&#34;&gt;Teaching with chatGPT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 4 - &lt;a href=&#34;https://cestlaz.github.io/post/chatgpt-good-bad-ugly/&#34;&gt;More teaching with chatGPT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 5 - &lt;a href=&#34;https://cestlaz.github.io/post/chatgpt-in-cs-class/&#34;&gt;chatGPT in a CS class&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Back to new content soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS GPT</title>
      <link>https://cestlaz.github.io/post/chatgpt-in-cs-class/</link>
      <pubDate>Fri, 20 Jan 2023 08:57:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/chatgpt-in-cs-class/</guid>
      <description>&lt;p&gt;
This should be my last post about chatGPT.&lt;/p&gt;
&lt;p&gt;
The GPT in chatGPT stands for Generative Pretrained
Transformer. Not something that you&amp;#39;re going to cover in an early
college CS class. I wanted to get my head around it and the
technologies are typically covered in an advanced machine learning
undergraduate elective so something you take &lt;strong&gt;after&lt;/strong&gt; you take that 400
level machine learning class. Looks like I&amp;#39;m going to have to do some
review first since I haven&amp;#39;t looked at any of the prerequisite
material in around a dozen years.&lt;/p&gt;
&lt;p&gt;
So, your K12 students won&amp;#39;t be building their own GPT but that doesn&amp;#39;t
mean that there&amp;#39;s nothing worth talking about.&lt;/p&gt;
&lt;p&gt;
There are technical things that you can teach that will help lead the
way to understanding today&amp;#39;s AI systems and also a lot of surrounding
issues.&lt;/p&gt;
&lt;p&gt;
On the surrounding stuff one can certainly talk about how chatGPT
works in a general sense. How it breaks down the input, the basic
ideas behind a neural net, how it&amp;#39;s trained on a data set etc.. Of
course, that lets us talk about the data set. Where did it come from?
This came up with a similar technology - GitHub&amp;#39;s Copilot. You pose a
programming question in a comment and it fills in the code. Where did
it get the code? From all the GitHub users. The training set consists
of basically all the code on GitHub. What about for other systems?
Well, Google has all their users email + docs + photos + everything
else and we all signed off on giving them the okay to use it way back
when. Same thing for all those other &amp;#34;free&amp;#34; services. This raises some
big questions that some of us were asking years ago. As they say &amp;#34;If
you are not paying for the product, then you are the product.&amp;#34; Lots of
good fodder for discussion here and perhaps we&amp;#39;ll raise the next
generation to be more aware of what they&amp;#39;re giving away.&lt;/p&gt;
&lt;p&gt;
Another issue is a systems reliability. We&amp;#39;ve seen many examples where
chatGPT produces incorrect answers. What about Copilot? What if code
generated by Copilot seems to work but leads to catastrophic failure
later on? Who&amp;#39;s to blame?&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t remember the details but was told by an older computer
scientist years ago about an expert system - that is, a much more
primitive AI question answering system that performed medical
diagnoses. Apparently it did better than residents and as well as
doctors but it was never used. Why not? I was told due to liability
issues. A computer program can&amp;#39;t hold malpractice insurance.&lt;/p&gt;
&lt;p&gt;
This leads to a whole set of ethical questions&lt;/p&gt;
&lt;p&gt;
Another is ownership. If chatGPT generates a story or a song, who owns
the rights? What about AI generated art? &lt;/p&gt;
&lt;p&gt;
One more on the ethical front, how about the Microsoft AI that was let lose in
the wild and was quickly trained to spew racist garbage?&lt;/p&gt;
&lt;p&gt;
The ethical and societal issue abound.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s so much rich discussion to be had with students of all ages
here but there&amp;#39;s also a technical side that can be introduced. As I
said, you&amp;#39;re not writing your own GPT system in a CS class prior to an
advanced undergraduate elective but there are things you can introduce
to pave the way and give students an inking of what&amp;#39;s possible and
what&amp;#39;s to come if they continue to study CS.&lt;/p&gt;
&lt;p&gt;
One of my favorites is word chain or Markov chain text generation (see
this &lt;a href=&#34;https://cestlaz.github.io/post/word-chains/&#34;&gt;older post&lt;/a&gt;). It&amp;#39;s not the same but it is text generation and if
you play around with it, use flowery text like poetry of the Book of
Psalms you can get some fun results. It also lets you talk about
concepts similar to overfitting which they&amp;#39;ll learn all about when
they do machine learning.&lt;/p&gt;
&lt;p&gt;
You can also do a bunch of introductory &lt;a href=&#34;https://cestlaz.github.io/post/bag-of-words/&#34;&gt;bag of words&lt;/a&gt; based natural
language processing topics. Again, these are in no way in the
neighborhood of a GPT but it&amp;#39;s really good CS and it sets the stage.&lt;/p&gt;
&lt;p&gt;
Clustering is another topic that can be approached early that has some
similar base concepts.&lt;/p&gt;
&lt;p&gt;
There are many more.&lt;/p&gt;
&lt;p&gt;
Just because you&amp;#39;re not going to do a Transformer Neural Net in K12
doesn&amp;#39;t mean you can&amp;#39;t do cool things that get the kids both ready and
thinking about important issues. One of my favorite topic to cover in
CS0 or CS1 is a &lt;a href=&#34;https://cestlaz.github.io/posts/2014-01-07-rot13-gateway/&#34;&gt;Caesar Cipher Decoder&lt;/a&gt;. It&amp;#39;s not smart or even a
necessary program but it&amp;#39;s a cool unit that starts to scratch the
surface of how more advanced systems work. It sets the stage.&lt;/p&gt;
&lt;p&gt;
So I think this is it for chatGPT posts for a while. Hope you all
found these useful, interesting, or in some way positive.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching with chatGPT - The Good, The Bad, and The Ugly</title>
      <link>https://cestlaz.github.io/post/chatgpt-good-bad-ugly/</link>
      <pubDate>Sun, 15 Jan 2023 11:03:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/chatgpt-good-bad-ugly/</guid>
      <description>&lt;p&gt;
The plan was to talk about what we can and should do in CS classes
with respect to chatGPT type technologies but after seeing so much
discussion on how to and not to use chatGPT I thought I&amp;#39;d insert this
additional post on classroom use.&lt;/p&gt;
&lt;p&gt;
We already talked about &lt;a href=&#34;https://cestlaz.github.io/po%60st/teachgpt/&#34;&gt;the good&lt;/a&gt;. I love the idea of making an essay
with errors for proof reading and it can be a great search resource,
albeit one that needs to be error checked and I&amp;#39;m sure many other
productive teaching and teaching support applications will turn up.&lt;/p&gt;
&lt;p&gt;
We also talked about &lt;a href=&#34;https://cestlaz.github.io/post/cheatgpt/&#34;&gt;the bad&lt;/a&gt;. The big one being potential cheating -
crossing the line from research or understanding aid to using it as an
inappropriate shortcut. It also just plain out fails at times to do
what you wnat it to do but that&amp;#39;s really reasonable given what it is.&lt;/p&gt;
&lt;p&gt;
What about the ugly?&lt;/p&gt;
&lt;p&gt;
Ugly is probably the wrong word. I&amp;#39;m talking about using chatGPT or
any technology because it&amp;#39;s new and cool and not because it&amp;#39;s actually
the right tool in the right place at the right time.&lt;/p&gt;
&lt;p&gt;
This is nothing new and not restricted to education. Years ago, my
parent&amp;#39;s taxes were audited. The auditor has one of those new fangled
electronic calculators and he was so enthralled  with it that he kept
showing it off and all it could to do my parents throughout the
audit. My parents were pretty sharp overall and my dad was very good
with numbers. At the end of the day the auditor determined that my
parents didn&amp;#39;t owe taxes but actually were due a sizable refund. When
all was said and done, my dad pointed out all the times that the
auditor messed up with the calculator which resulted in the
refund. The truth was that the taxes were filed correctly to begin
with but my folks weren&amp;#39;t going to turn away free money. The auditor
should have just gone old school.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve seen some examples already of &amp;#34;the ugly&amp;#34; and I&amp;#39;m sure there will be
more to come. Also, I want to emphasize that &amp;#34;the ugly&amp;#34; doesn&amp;#39;t
necessarily mean bad,  I just wanted to use that turn of phrase.&lt;/p&gt;
&lt;p&gt;
A friend of mine suggested using chatGPT to evaluate  essays for when
students aren&amp;#39;t comfortable with other people viewing their
work. Assuming that we&amp;#39;re confident that chatGPT will do a good job
this could work but I&amp;#39;d have some concerns. True, this could alleviate
a student&amp;#39;s fear of peer grading but building a supportive community
of peers that &lt;strong&gt;can&lt;/strong&gt; support you is important and I&amp;#39;m leery of using
technology too much as a crutch. Also that while this might offload
work from the teacher, it also removes an opportunity for the teacher
to build more of a relationship with the student through the
interaction and through their work.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not enough of an expert on language/english classes to really
judget that bt here&amp;#39;s a similar CS related example that I saw
suggested online. Have students enter programs in into chatGPT and ask
the system to add comments. &lt;/p&gt;
&lt;p&gt;
I tried this with a couple of small intro type programs and each time
I got the same style of comments. Things like a comment on top of a
loop saying &amp;#34;loop from 1 to n&amp;#34; or on top of a line like &lt;code&gt;sum = 0&lt;/code&gt;
saying &amp;#34;initialize the sum  to 0.&amp;#34; Not good comments at all.&lt;/p&gt;
&lt;p&gt;
This, I&amp;#39;d describe as ugly. If chatGPT consistently gives these types
of comments then it&amp;#39;s pretty worthless as an activity if the goal is
to help students understand commenting and writing good code. On the
other hand, if chatGPT sometimes gives these ridiculous comments and
at other times gives good comments, well, that&amp;#39;s pretty bad as well.&lt;/p&gt;
&lt;p&gt;
Now, if it always gives bad answers it could be a fun activity. Solve
the problem in class, have chatGPT comment it, and then you can
discuss good and bad coding styles and the limits of programs like
chatGPT.&lt;/p&gt;
&lt;p&gt;
Generating lessons plans also counts to me as ugly, unless you use it
to add standards to your plans to fulfill requirements from
above. Yeah, it&amp;#39;s cool that this program can make a bare bones bullet
point lesson but you then have to read it, evaluate it, check it for
errors and then still add all the meat to the bones and customize it
for your students. I&amp;#39;d argue that if a teacher knows their stuff it&amp;#39;ll
slow them down.&lt;/p&gt;
&lt;p&gt;
Normally, when using a new technology an educator should ask
themselves if it saves time and/or effort and does it improve
instruction/learning and make sure that there&amp;#39;s some real benefit to
the use. It&amp;#39;s fine if that benefit comes later and requires some dues
to be paid now but if it&amp;#39;s just a cool new technology, the new shiny
if you would, I&amp;#39;ll pass.&lt;/p&gt;
&lt;p&gt;
As a final note, even when the ugly doesn&amp;#39;t save time or improve
instruction it&amp;#39;s not necessarily bad. A good teacher knows when a
class needs a break and also when they themselves need one. It&amp;#39;s fine
to burn some time on a fun but not productive activity either for
mental health, community building or other positive reasons. It&amp;#39;s not
healthy to be 100% on task 100% of the time and a good teacher gets
this. What&amp;#39;s important to also understand is when a new technology or
tool can be used productively and when it&amp;#39;s just a diversion.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>teachGPT</title>
      <link>https://cestlaz.github.io/post/teachgpt/</link>
      <pubDate>Thu, 12 Jan 2023 07:45:56 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teachgpt/</guid>
      <description>
&lt;p&gt;
So, since we discussed &lt;a href=&#34;https://cestlaz.github.io/post/cheatgpt/&#34;&gt;cheating and chatGPT&lt;/a&gt; and decided that there
shouldn&amp;#39;t be a ban, how can it or similar tools be used productively?&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
General use
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;The first go to seems to be as an alternative search engine. It hasn&amp;#39;t
been uncommon seeing people say they use chatGPT instead of searching
StackOverflow. This makes sense. ChatGPT gives answers and the natural
language interface can make it easier to form some questions or ask
for results in a particular format. Interesting though is that it
seems, and I have no evidence for this, that people will more accept a
&amp;#34;written text&amp;#34; answer from chatGPT as factual as opposed to a listed
search result. This is worth thinking about since chatGPT doesn&amp;#39;t
always give correct answers to questions so buyer beware.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
In non CS classes
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
For more interesting ideas, I&amp;#39;ll start outside of my comfort zone -
non CS classes. One of the big fears of chatGPT is that it will write
student essays. Why not leverage that as a feature, not a bug. As
chatGPT to write an essay and then have students analyze and critique
it.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ve all seen stories on how chatGPT sometimes gets the facts
wrong. How about leveraging that? Do some fact checking.&lt;/p&gt;
&lt;p&gt;
I asked chatGPT to write an essay and to include at least three
errors. It created a reasonable essays and at the bottom listed the
errors. Of cousre, there could always be more. Take those essays and
have the students not only critique but fact check. Better, don&amp;#39;t
initially fact check but have students build arguments based on the
documents you give them and let them learn to be critical of resources
when they discover they&amp;#39;re not always correct.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m sure there are many more creative ways one can leverage generative
systems like chatGPT in educational settings but now let&amp;#39;s move to CS
classes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
In CS classes
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I wondered if chatGPT could help create problems. I asked it to create
a parsons problem. That was an epic fail. It gave me a Java program in
order. I guess I could then scramble the lines but that wasn&amp;#39;t the
point.&lt;/p&gt;
&lt;p&gt;
On the other hand, the answers it gave could be used as code tracing
examples so there may be some value there.&lt;/p&gt;
&lt;p&gt;
I also asked it to generate test questions and small programming
assignments but I didn&amp;#39;t find the output useful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
What else?
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
There&amp;#39;s also been talk about creating lessons to either support or one
day replace teachers and with this, we&amp;#39;re a &lt;strong&gt;long&lt;/strong&gt; ways off.&lt;/p&gt;
&lt;p&gt;
I asked chatGPT to write lesson plans on a number CS and non CS topics
and each time the result was the same.&lt;/p&gt;
&lt;p&gt;
I got a formulaic lesson plan that technically covered the material
but I found them less than worthless. Yes, technically one could kind
of sort of work off the lesson plan but they were bare bones - no
interesting motivations, questions, possible tangents, or examples. No
potential segues or pitfalls and certainly nothing specific for any
teacher&amp;#39;s actual students.&lt;/p&gt;
&lt;p&gt;
To a non teacher the lesson plans might look alright but to any decent
teacher, they&amp;#39;re worthless. If you&amp;#39;re a teacher, you already know the
bare bones outline of any given lesson and if you don&amp;#39;t you shouldn&amp;#39;t
be teaching that subject. What makes the lesson work is everything on
top of the bare bones skeleton - the motivations, the examples, the
activities and here, chatGPT is of no help.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
The killer app
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
So far, it looks like chatGPT can be useful but it certainly has
limitations. I did find, however, the chatGPT killer app for
education. By find, I mean I saw someone else tweet out the
idea. Sorry I can&amp;#39;t give credit but I didn&amp;#39;t end up saving the link.&lt;/p&gt;
&lt;p&gt;
ChatGPT can be used to create all the garbage that administrators and
politicians insist are important in education but are crap.&lt;/p&gt;
&lt;p&gt;
Hey, chatGPT: &amp;#34;Write me a lesson plan introducing loops that aligns to
the New York State Computer Science and Digital Literacy Standards.&amp;#34;&lt;/p&gt;
&lt;p&gt;
Hey, chatGPT: &amp;#34;Write me a sub lesson plan on conditional statements in
Java.&amp;#34;&lt;/p&gt;
&lt;p&gt;
These are great. Sure, they&amp;#39;re lousy lesson plans but they&amp;#39;ll have the
references to the standards that administrators and other education
reformers love and now teachers don&amp;#39;t have to waste their time on it.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the killer app!!!!!!!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Final thoughts
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
So there it is. A few thoughts on how we can productively use tools
like chatGPT. I&amp;#39;m sure there are more and better ones out there and
I&amp;#39;d love to hear about them so feel free to share yours.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>CheatGPT</title>
      <link>https://cestlaz.github.io/post/cheatgpt/</link>
      <pubDate>Tue, 10 Jan 2023 06:42:45 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cheatgpt/</guid>
      <description>&lt;p&gt;
Just got back from a few much needed days away so it&amp;#39;s time to get to
those chatGPT posts.&lt;/p&gt;
&lt;p&gt;
Last time, &lt;a href=&#34;https://cestlaz.github.io/post/cheating/&#34;&gt;I wrote on&lt;/a&gt; cheating in general. That seems to be one of the
hot points for chatGPT, in fact, the NYC DOE just last week decided to
ban chatGPT outright, presumably for that reason. We&amp;#39;ll talk about the
student side, both negative and postitive today and the teacher side
next time.&lt;/p&gt;
&lt;p&gt;
To start, while on vacation I saw this tweet:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Any educator who is saying “ChatGPT won’t affect MY classroom” better get humble really quickly. &lt;br&gt;&lt;br&gt;As a friend said, “This is like when my AP called me into his office &amp;amp; asked ‘Have you seen this thing called Google?’”&lt;br&gt;&lt;br&gt;It’s going to change the way we think about writing forever.&lt;/p&gt;&amp;mdash; Chris Lehmann (@chrislehmann) &lt;a href=&#34;https://twitter.com/chrislehmann/status/1611777320745828360?ref_src=twsrc%5Etfw&#34;&gt;January 7, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
Sure, it&amp;#39;s going to change our classrooms but it&amp;#39;s not like this is
the first time. We went from nothing to calculators to graphing
calculators to programs like Wolfram Alpha. I&amp;#39;ve been telling my
students for decades that Emacs Calc mode could not only solve all
their math assignments symbolically but it could also typeset them
directly in TeX so their homeworks would look professional.&lt;/p&gt;
&lt;p&gt;
On the non-math side we&amp;#39;ve added word processors to spell checkers to
grammar aides not to mention collaborative environments.&lt;/p&gt;
&lt;p&gt;
And we haven&amp;#39;t even mentioned search engines, wikipedia, youtube and
the scores of other resources available today that didn&amp;#39;t exist years
ago.&lt;/p&gt;
&lt;p&gt;
New technologies come in to play over and over again and teachers
adapt. Unfortunately, instead of giving teachers the resources they
need to adapt efficiently, districts normally opt for a hammer and
then blame teachers regardless.&lt;/p&gt;
&lt;p&gt;
So, now we have a new tool - will students use it to cheat? Sure -
some will but this is nothing new.  I&amp;#39;d like to believe that the
majority of students will use the new tool productively but to do so,
many will need guidance.&lt;/p&gt;
&lt;p&gt;
Should the NYC DOE have banned chatGPT? I&amp;#39;d say no. Well, actually,
I&amp;#39;d say yes but with a caveat and we&amp;#39;ll get to that below.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been playing with chatGPT a bit now and it certainly seems to be
able to generate student quality essays on a variety of topics. It
100% can solve introductory CS programming problems, frequently just
by pasting the teachers prompt in the chat box.&lt;/p&gt;
&lt;p&gt;
This can, of course, lead to cheating but shutting down the technology
in school won&amp;#39;t change a thing. As usual, draconian measures will do
little to deter bad behavior and will merely make things more
difficult for kids who want to do things the right way.&lt;/p&gt;
&lt;p&gt;
Let me use GitHub as an example. I&amp;#39;ve had &lt;strong&gt;many&lt;/strong&gt; professors tell me
that they&amp;#39;ll have students use GitHub but &lt;strong&gt;only&lt;/strong&gt; if repos are private
so as to prevent cheating. Right - making a repo private is really
going to prevent some kid from sharing their code. Sure, it&amp;#39;ll prevent
a random student from stumbling on their work but it&amp;#39;s going to do
nothing to prevent a bad actor from acting badly.&lt;/p&gt;
&lt;p&gt;
At the same time, it sows distrust and prevents students who want to
productively share and help each other (with proper attribution) from
doing so.&lt;/p&gt;
&lt;p&gt;
Banning a tool in school only serves to limit students who want to do
things the right way anyway. Cheating happened prior to chatGPT and
prior to older technologies. Some students have always cut corners
either by crossing the line with friends or even paying for essays
online. Now with chatGPT, I can type in &amp;#34;write a program to do…&amp;#34;
rather than search StackOverflow or ask a friend or pay a service but
it doesn&amp;#39;t change the fact that no matter what, some students will
cheat. On the other hand, if you cultivate a classroom where support
and sharing is encouraged, don&amp;#39;t overwork students, provide the needed
resources and allow for failure and growth, you&amp;#39;ll minimize the
problems. Of course I just described a panacea that can rarely be
created in a public school given large class sizes, emphasis on
standardized testing, and all the baggage dumped on teachers.&lt;/p&gt;
&lt;p&gt;
In a programming class, a solution could be to allow chatGPT but to
include lab time in the class. During that time, the teacher can
observe students and really get to know what they know - their
strengths and weaknesses. I always was able to include lab time at
Stuy and before that at Seward Park and by the end of the term, I knew
my students, what they could do, and where they had challenges. To be
honest, I could assign letter grades from that info alone and the
grades would pretty much match the test results.&lt;/p&gt;
&lt;p&gt;
This can be done but it&amp;#39;s getting more and more challenging given the
weight placed upon teachers.&lt;/p&gt;
&lt;p&gt;
Given this, in my class, I don&amp;#39;t want to ban chatGPT but want to
take the time to figure out how to use it productively. &lt;/p&gt;
&lt;p&gt;
Why then did I say earlier that districts &lt;strong&gt;should&lt;/strong&gt; ban it? Because at
the end of the day, schools and teachers should set these policies but
these policies need to be supported by the district. The district has
to have the principal&amp;#39;s back and the principal, their teachers.&lt;/p&gt;
&lt;p&gt;
A district should say &amp;#34;here&amp;#39;s the boilerplate policy to ban chatGPT so
if in your school or class it&amp;#39;s inappropriate, you can ban it and we&amp;#39;ve
got your back. On the other hand, a principle can implement a looser
policy and that&amp;#39;s fine and we encourage schools to implement policies
where chatGPT can be used effectively as a learning tool&amp;#34; and then
provide some boilerplate language for that.&lt;/p&gt;
&lt;p&gt;
The district has to have the hardest line because in some cases, that
hard line will be either appropriate or necessary and then schools can
loosen the restrictions as appropriate.&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s my take.&lt;/p&gt;
&lt;p&gt;
Next time - chatGPT as a teacher aide.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cheating</title>
      <link>https://cestlaz.github.io/post/cheating/</link>
      <pubDate>Tue, 03 Jan 2023 14:30:36 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cheating/</guid>
      <description>&lt;p&gt;
I said in my last post that I wanted to write about chatGPT. The way I
see it, chatGPT is affecting teachers in four areas. First, students
using it to cheat, second the possibility of students using it as a
constructive tool. Third, teachers using it as a resource for lesson
planning or similar, and fourth, down the road, another tool to
replace teachers.&lt;/p&gt;
&lt;p&gt;
Before I dive into any of those, I thought I&amp;#39;d spend a post talking
about cheating in general. I&amp;#39;ve written about cheating &lt;a href=&#34;https://cestlaz.github.io/post/cheating-on-projects/&#34;&gt;before&lt;/a&gt; but
that was a few years ago so I thought I&amp;#39;d revisit things in light of
chatGPT and other resources students can use to cut corners.&lt;/p&gt;
&lt;p&gt;
Cheating has always been a big topic in education. Some teachers let
it slide, some are hardliners but it&amp;#39;s a front and center topic. It&amp;#39;s
also a topic that&amp;#39;s difficult to address. One reason is that our
society tolerates and even celebrates cheating at many levels. Time
and again we see that the rules are only for the little people. Not a
great basis if you want to encourage rule following in the classroom.&lt;/p&gt;
&lt;p&gt;
In my opinion, cheating is going to happen and usually it&amp;#39;s not worth
stressing about but more on that later.&lt;/p&gt;
&lt;p&gt;
Why do student cheat?&lt;/p&gt;
&lt;p&gt;
Some cheat because they don&amp;#39;t care about the class and find it as an
easy way out but I&amp;#39;d like to think that most students don&amp;#39;t follow
this path. Many cheaters do it out of desperation - they &lt;strong&gt;need&lt;/strong&gt; to get
a good grade because of their parents, college applications,
expectations or otherwise. The system they&amp;#39;re in dictates that it is
unacceptable to get a low grade and so they&amp;#39;re backed into a
corner. Similarly, students are at times so overburdened that they
can&amp;#39;t complete all the work or adequately prepare for assessments -
this can also lead to cheating.&lt;/p&gt;
&lt;p&gt;
Another case is that students in some cultures view what some would
call cheating as collaboration and this one can be tricky as to a many
people it&amp;#39;s a matter of degree and in my opinion, collaboration should
be encouraged.&lt;/p&gt;
&lt;p&gt;
I do have to admit that there is another category that I played a part
in back in high school - in my group, if we respected a teacher, we
never cheated - we&amp;#39;d just take our lumps. If we didn&amp;#39;t we might cheat,
usually to see how far we could go and what we could get away with -
in all cases, to be honest, we worked hard to learn the material and
the cheating part was just a game - not so much trying to get answers
we needed on tests but more, can we communicate information undetected
during an exam.&lt;/p&gt;
&lt;p&gt;
So, what do we do?&lt;/p&gt;
&lt;p&gt;
Some teachers take a hard line but I&amp;#39;m not comfortable with
this. Repercussions for cheating are harsh and can range from a slap
on the wrist which isn&amp;#39;t worth it to failing a course or even
expulsion. Those last two are pretty big and I&amp;#39;ve known in my life a
number of people who were falsely accused of academic dishonesty. I&amp;#39;d
rather miss a few of the cheats rather than punish the innocent.&lt;/p&gt;
&lt;p&gt;
I usually will let it slide unless I know 100%. I&amp;#39;ll take certain
measures to limit cheating as outlined in my earlier linked post but
more of my efforts are to create a positive environment - encourage
collaboration with attribution - try not to overburden students with
gratuitous work - make it okay to &amp;#34;fail&amp;#34; so long as you eventually get
to where you need to go and so on. Of course, it&amp;#39;s not perfect. I&amp;#39;m
still in a system that gives letter or number grades and everything
has to settle down to a grade by end of term. I&amp;#39;d like to think that
the culture I push minimizes cheating but you can&amp;#39;t really know.&lt;/p&gt;
&lt;p&gt;
In any event, there really is some truth the old line &amp;#34;you&amp;#39;re only
cheating yourself.&amp;#34; At least in CS. If a student cheats through a
class, they&amp;#39;ll likely not take the next one. So what, they got one
undeserved A grade. In the greater scheme of things it&amp;#39;s not going to
make a difference. If they don&amp;#39;t learn the material, they&amp;#39;re not going
to get the job and even if they do, they won&amp;#39;t be able to do the job
and, well, if they can do the job, then maybe what they cheated on
wasn&amp;#39;t so important after all.&lt;/p&gt;
&lt;p&gt;
Now, it&amp;#39;s true that we do have to try to minimize cheating - hopefully
by creating a positive culture because the majority of students DO
have to learn the basics and we can&amp;#39;t have everyone cheating through
everything but I really don&amp;#39;t think that&amp;#39;s an issue. For me, it&amp;#39;s try
to make the environment conducive to not cheating and then not worry
about it too much.&lt;/p&gt;
&lt;p&gt;
One last note is that while I try to do this, I do get irked when a
student cheats and I really get irked when students try to &amp;#34;work the
system&amp;#34; to get grades they don&amp;#39;t deserve. I try to remind myself that,
as the saying goes &amp;#34;it&amp;#39;s not personal, it&amp;#39;s just business&amp;#34; and I think
that&amp;#39;s a good thing for all of us to remember. To fix this, we have to
fix root causes and while movements like ungrading, if not taken to
far, can really help, I&amp;#39;m not sure that things will improve much in
the short term.&lt;/p&gt;
&lt;p&gt;
With all this said, stay tuned for related thoughts on chatGPT.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kicking off 2023</title>
      <link>https://cestlaz.github.io/post/2023/</link>
      <pubDate>Sun, 01 Jan 2023 10:47:39 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/2023/</guid>
      <description>&lt;p&gt;
I never do much on New Years Eve. I can&amp;#39;t remember the last time I
stayed up until Midnight. It&amp;#39;s just not really a big deal with
me. Yesterday, thanks to Natan rushing tickets, I did close out the
year seeing the Metropolitan Opera&amp;#39;s new production of Fedora which
was very enjoyable.&lt;/p&gt;
&lt;p&gt;
Woke up late today - around 5:00, went for my first run of the year
and did the puzzle over coffee. My usual routine.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m still on a school calendar so my year goes from September to
September but since so much of the world uses January first, I thought
I&amp;#39;d share a couple of thoughts on education and tech in 2022 and 2023.&lt;/p&gt;
&lt;p&gt;
On the tech side, 2022 brought a rocky road. We had the cryptocurrency crash
and NFTs came and (hopefully) went and all the big players had massive
layoffs. The Crypto stuff is interesting and I&amp;#39;m curious where it
goes. I haven&amp;#39;t had the time to really get my head around all of it. I
read the &lt;a href=&#34;https://www.bitcoin.com/satoshi-archive/whitepaper/&#34;&gt;original whitepaper&lt;/a&gt;, and played with some code but haven&amp;#39;t
delved into web3 yet. I&amp;#39;ve always felt that NFTs were a scam and I
think that this whole web3 thing is still a technology looking for an
application but it does provide smart contracts and distributed
identity and authentication and that should eventually lead to
something. One of my post retirement side projects is to try to create
something on/for web3 to really see what it&amp;#39;s all about.&lt;/p&gt;
&lt;p&gt;
One thing I do wonder about with web3 looking forward is that a big
deal about it is that it&amp;#39;s distributed. That sounds great, but we&amp;#39;ve
been there before. Whenever we&amp;#39;ve built a distributed platform, the
next thing we do is centralize it. Thin about it:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Distributed&lt;/th&gt;
&lt;th&gt;Centralized&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IRC&lt;/td&gt;
&lt;td&gt;Slack&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Usenet News&lt;/td&gt;
&lt;td&gt;Reddit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Napster&lt;/td&gt;
&lt;td&gt;Spotify&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Git&lt;/td&gt;
&lt;td&gt;GitHub&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
So, even if Web3 finds its legs and presents us with an amazing
distributed platform, will it be fated to be a distributed platform
controlled by one centralized player.&lt;/p&gt;
&lt;p&gt;
On the tech downturn, it was bound to happen. Interesting enough is
that I&amp;#39;m hearing from friends desperately trying to hire while others
were recently laid off. Messy and unfortunate but I think things will
get better on the company side.&lt;/p&gt;
&lt;p&gt;
On the candidate size, I think we&amp;#39;re going to need a correction
there. CS enrollments have and continue to explode and while hopefully
this will help bring along underrepresented groups, I&amp;#39;m guessing that
there are many new CS majors who are along for the ride and are really
meant for other things. Just like the law school boom and MBA booms
in the late 80s, the hot major becomes oversubscribed frequently for
the wrong reasons.&lt;/p&gt;
&lt;p&gt;
Moving forward both K12 CS and college CS has to do a better job in
communicating what CS and tech majors are for and preparing students
for all careers with the correct amount of CS. I don&amp;#39;t think that&amp;#39;ll
happen much though in 2023.&lt;/p&gt;
&lt;p&gt;
On the CS Ed front, for the most part, things have been chugging
along. At least in NY people are starting to recognize that while the
PD based model was essential to start CS4All things have to pivot to
pre-service programs. In general there also seems to be movement in
understanding that not every CS major wants to be a software engineer
(or a PhD candidate, which has long been the focus of most CS
programs) and we&amp;#39;re starting to see people waking to the fact that the
CS that&amp;#39;s appropriate and needed by the CS major is not the same as
that for the software engineer, other tech sector roles and possibly
most importantly everyone else. &lt;/p&gt;
&lt;p&gt;
The big negative in NY for CS Ed is that the state came out saying
that if you taught at least 1 CS class you can get grandfathered in
and won&amp;#39;t need CS certification for 10 years. This means we&amp;#39;re going
to have a lot of under-prepared CS teachers in the state for a long
time.&lt;/p&gt;
&lt;p&gt;
Looking forward in CS Education, I hope to see more preservice
programs come online in New York state and I hope that discussion of
CS for non-CS majors, non PhD candidates, and non software engineers
continues to expand.&lt;/p&gt;
&lt;p&gt;
It looks like web3 will take a bit of a back seat though and the big
topic in the next few months will be chatGPT and other AI systems.&lt;/p&gt;
&lt;p&gt;
I say AI systems, but as far as I can tell, chatGPT is really just
pattern matching on a more massive scale. Pretty impressive but not
closer to &amp;#34;intelligence.&amp;#34; There&amp;#39;s been talk about using it to solve
programming problems and write essays and this morning, I saw
something about asking it to lesson plan.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve played with it a bit and it is impressive but I&amp;#39;m predicting that
hype will fade as teachers will adjust. ChatGPT and related projects
also bring into question the rights on the training materials and that
it might threaten companies like Google. I&amp;#39;m not betting on that last
one as I&amp;#39;m guessing that Google&amp;#39;s got plenty of people working on
similar technologies internally.&lt;/p&gt;
&lt;p&gt;
So, we&amp;#39;ll see what 2023 brings in tech and education. I do plan to
write more on chatGPT in the coming months but we&amp;#39;ll see what other
themes emerge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finally some down time</title>
      <link>https://cestlaz.github.io/post/down-time/</link>
      <pubDate>Fri, 30 Dec 2022 11:56:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/down-time/</guid>
      <description>&lt;p&gt;
Since entering end of term grades I&amp;#39;ve finally had a few days of legit
down time. It&amp;#39;s been a long time. In the past few years, I went right
from Fall finals int dealing with whatever issues arose around
planning the next teacher ed cohort.&lt;/p&gt;
&lt;p&gt;
Not so this year. The three classes I&amp;#39;m teaching are the same as last
year so while I&amp;#39;ll be doing a lot of tweaking, planning, and updating
once we get started, there&amp;#39;s not much to do now. For the teacher ed
cohort, I&amp;#39;m advocating starting our next one in the Fall so again,
nothing to do for a while.&lt;/p&gt;
&lt;p&gt;
So, what have I been doing with this newly freed time? One thing I&amp;#39;ve
gotten to do is a bit more painting - something I decided to pick up
during the pandemic - something to get me off computer screens for a
while. I&amp;#39;m just a beginner but I&amp;#39;m enjoying it and making progress.&lt;/p&gt;

&lt;img  width=&#34;200&#34; height=&#34;200&#34; src=&#34;https://cestlaz.github.io/img/down-time/one.jpg&#34;/&gt;
&lt;img  width=&#34;400 height=&#34;400&#34; src=&#34;https://cestlaz.github.io/img/down-time/two.jpg&#34;/&gt;
&lt;img  width=&#34;200 height=&#34;200&#34; src=&#34;https://cestlaz.github.io/img/down-time/three.jpg&#34;/&gt;
&lt;p&gt;
Another thing I&amp;#39;ve been doing is getting back to some
programming. Nothing huge but it&amp;#39;s something I haven&amp;#39;t done in a
while. Last December (2021) I did a few &lt;a href=&#34;http://adventofode.com&#34;&gt;Advent of Code&lt;/a&gt; problems -
basically the easier ones at the start of the month that I could knock
out quickly. I stopped when the end of semester crush got bad. Same
thing this year. In between, I didn&amp;#39;t write a line of code. That&amp;#39;s not
entirely true - I wrote some small snippets for my classes but I don&amp;#39;t
really count that sinces it was all variations on things I&amp;#39;ve written
a hundred times already.&lt;/p&gt;
&lt;p&gt;
Since the semester ended, I&amp;#39;ve been able to go back and finish off a
couple of &amp;#34;harder&amp;#34; problems and also dive in to a couple of of other
small projects. One, a tool to automate some GitHub work and another a
Slack bot to make emoji polls. This got me back to dealing with web
code, working through OAuth and a few more little things. I did all of
that in Clojure but also got back to playing a bit with Rust.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t think it&amp;#39;s absolutely necessary for CS teachers to write
programs in their spare time but for many CS teachers, and certainly
for me, there are a lot of benefits. On the practical side, it helps
me keep up with current technologies. When I started teaching, there
was no web. Then HTML. Soon after Perl was king along with CGI. Later,
Javascript brought us Ajax. Fast forward and we&amp;#39;re using things like
React. All very different technologies and all require different
approaches. Even if I&amp;#39;m not teaching web development, keeping current
also keeps me current in good development practices, architecting
projects and other aspects of coding through which I can help my
students.&lt;/p&gt;
&lt;p&gt;
If I&amp;#39;m exploring with contest problems like Advent of Code, I&amp;#39;ll learn
new algorithms and experiment with data structures - also something
that helps me as a teacher.&lt;/p&gt;
&lt;p&gt;
Of course these are pretty obvious and on the surface. Another HUGE
benefit is it helps place me in to the students mindset. When working
on new projects, one has to find resources and information on the
web. Learn new libraries, tools, and techniques, and of course
DEBUGGING!!!!!!!&lt;/p&gt;
&lt;p&gt;
Since I&amp;#39;m retiring from Hunter at the end of the Spring, I fully
expect to continue to be able to dedicate some time to
programming. After all, even though I plan to work to help transition
Hunter to the next guy I expect that to be less taxing than if I were
to continue to be the guy.&lt;/p&gt;
&lt;p&gt;
Programming, reading, and other personal professional development is
really important to teachers. I lost that time over the past couple of
years, but prior, at Hunter I had it. The real shame is that K12
teachers are rarely given the time and I think their students are worse
off as a result.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Things they remember that we forgot</title>
      <link>https://cestlaz.github.io/post/forgot/</link>
      <pubDate>Sat, 17 Dec 2022 06:43:31 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/forgot/</guid>
      <description>&lt;p&gt;
Some time ago I wrote about some of the things our students remember
(&lt;a href=&#34;https://cestlaz.github.io/oldblog/blight-move/&#34;&gt;link&lt;/a&gt; - sorry for the bad formatting). Lessons, concepts, stories, or
even small jokes I remember telling but had no idea that they left a
lasting impression on any students.&lt;/p&gt;
&lt;p&gt;
Fast forward to yesterday. I spent some time yesterday at a friend, a
former student&amp;#39;s company for their holiday get together. My friend was
telling a story about how I helped get him started - I won&amp;#39;t get into
details but while I do remember the overall impression of including
and encouraging him, I don&amp;#39;t remember the detailed specifics. Another
sign of getting old. &lt;/p&gt;
&lt;p&gt;
It made me think of not only the things they remember that we remember
but also what most surely be many things that as older teachers we no
longer remember yet may have stuck with our students.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve spoken to former students a few times and they&amp;#39;d tell me about
something they&amp;#39;ll &amp;#34;always remember&amp;#34; and usually it&amp;#39;s a pretty cool but
ultimately, just a small CS technique or work approach fact. Other
times, like the story that was told yesterday, it&amp;#39;s a reminder that at
times we can have a tremendous positive impact and sometimes we don&amp;#39;t
have to do much more than be decent human beings. Over the last few
years, I&amp;#39;ve been told a few times by older alums, just as a throwaway
comment how I created a &amp;#34;safe place&amp;#34; for them. Funny, I may have done
that by some throwaway comment or action by me and it meant a lot to
them. Now yeas later, I&amp;#39;m the one who&amp;#39;s greatly moved by their
throwaway comments.&lt;/p&gt;
&lt;p&gt;
Unfortunately, there are probably things I&amp;#39;ve inadvertently said or
done in my career that have adversely affected some students but for
better or worse, we rarely get feedback on that.&lt;/p&gt;
&lt;p&gt;
It goes to show the tremendous impact teachers can have even with
small gestures. &lt;/p&gt;
&lt;p&gt;
Even the good stuff, many teachers never hear about it. This is one
area that I feel both truly fortunate and humbled. Being in touch with
so many former students and with so many now friends, I&amp;#39;ve been given
the gift of hearing and seeing what I&amp;#39;ve done. I can&amp;#39;t say why, but I
think those of us who teach CS seem to get this opportunity more than
other teachers, even when our students go into totally unrelated
fields.&lt;/p&gt;
&lt;p&gt;
I think about my old teacher, mentor, and friend &lt;a href=&#34;https://cestlaz.github.io/posts/2012-05-09-my-favorite-year-teacher/&#34;&gt;Herb Greenhut&lt;/a&gt; - a
history teacher who made such an impact that he was frequently
included in his former students life events - weddings. receiving
birth announcements and so on and even got a Mayoral Citation in his
later years. I&amp;#39;ve been fortunate to get to enjoy some of these &amp;#34;gifts&amp;#34;
but I also know that many teachers, better than I and very well
regarded have not. I blame that on circumstance.&lt;/p&gt;
&lt;p&gt;
Why am I writing about this? Beyond yesterday&amp;#39;s reminder, I&amp;#39;ve been
reflecting more about my career as I prepare to leave the classroom
full time. It&amp;#39;s also important to point out to other teachers out
there that yes, our profession is in many ways thankless but there are
some rewards that money can&amp;#39;t buy and even if you&amp;#39;re not hearing about
the impact you&amp;#39;ve had, you&amp;#39;ve probably still had it.&lt;/p&gt;
&lt;p&gt;
For the younger teachers, it&amp;#39;s there, you just have to stick with it
long enough for your current students to go out in to the world.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>In Education, What&#39;s New is Old</title>
      <link>https://cestlaz.github.io/post/old-is-new/</link>
      <pubDate>Wed, 07 Dec 2022 12:44:43 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/old-is-new/</guid>
      <description>
&lt;p&gt;
I noticed a tweet the other day talking about gamification of
education. It got me thinking.&lt;/p&gt;
&lt;p&gt;
Gamification isn&amp;#39;t specifically the hot trend right now, at least not
as &amp;#34;the one true way&amp;#34; to teach but every few years it surges as this
great new idea to fix education.&lt;/p&gt;
&lt;p&gt;
When it surges, it&amp;#39;s always the hot new thing but it never really is.&lt;/p&gt;
&lt;p&gt;
Gamification has been around at least since I was in grade school and
it was never a magic bullet. It might not have been called
gamification but it was there.&lt;/p&gt;
&lt;p&gt;
Back in grade school, those stickers you got - gamification. Earn a
pizza party for the class gamification. Even those leveled readers
were gamified. I mean, you literally leveled up.&lt;/p&gt;
&lt;p&gt;
I remember early in my career I had to take a number of education
classes and gamifying was a big strategy that the professors all
taught to engage all the students. Contrast that with the advice I got
in schools by pretty much every experienced teacher who took me under
their wings - some kids are motivated by stickers but many
aren&amp;#39;t. It&amp;#39;s a superficial trick and you&amp;#39;ll only get so much mileage
out of it. It&amp;#39;s not the be all and end all.&lt;/p&gt;
&lt;p&gt;
Of course, ed tech companies can thrive on gamification because
they&amp;#39;re specifically catering to customers who thrive on it but it&amp;#39;s
not a magic bullet by any means. On the other hand, it can also be low
effort to implement so there are plenty of times when it&amp;#39;s worth a
shot.&lt;/p&gt;
&lt;p&gt;
This got me thinking about other teaching techniques that were the new
hot thing but were in fact around back in the day and more often than
not, nothing special.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s take a look at a few:&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
The Flipped Classroom
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
This is a big one the big way to fix education. Have the kids watch
videos before class and then do other things in class.&lt;/p&gt;
&lt;p&gt;
New idea?&lt;/p&gt;
&lt;p&gt;
Not so much.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s called homework.&lt;/p&gt;
&lt;p&gt;
Homework can be used to review past concepts and also to introduce new
ones.&lt;/p&gt;
&lt;p&gt;
So, not a new idea at all but does it work?&lt;/p&gt;
&lt;p&gt;
Not really. Sure, anything that moves from college style lecturing to
active learning during class time is good but &amp;#34;flipping the classroom&amp;#34;
has the same issues as homework.&lt;/p&gt;
&lt;p&gt;
Not all kids do or understand the homework and if you&amp;#39;re class
activities depend on what&amp;#39;s done the night before, you&amp;#39;re in trouble.&lt;/p&gt;
&lt;p&gt;
On top of that, there&amp;#39;s been a recent movement against homework that&amp;#39;s
also been gaining traction an that&amp;#39;s certainly contrary to flipping
the classroom.&lt;/p&gt;
&lt;p&gt;
So, flipping the classroom - new? Not so much. Effective? Sometimes
but like anything else, it&amp;#39;s not a magic bullet just a tool that can
be usefully or poorly deployed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Code Tracing
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Another practice I&amp;#39;ve seen hyped more is Code Tracing. This one&amp;#39;s
easy  - it&amp;#39;s a good practice. It&amp;#39;s not new though. Code tracing - you
write out a table of variable values and you play computer, going
through the code line by line.&lt;/p&gt;
&lt;p&gt;
This is actually very similar to how students learned to graph linear
and quadratic equations. Make a table for x, and y, trace through the
algorithm, and chart the results.&lt;/p&gt;
&lt;p&gt;
Good practice but not new.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Subgoal Labeling
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Another good practice that&amp;#39;s cropped up in the past few years. Once
again, not new.&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t call it subgoal labelling but I was writing code that way
back in the 1980s.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Discovery Learning
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Back when I started teaching, cooperative learning was the true way,
more recently discovery learning took the mantel. Fortunately we&amp;#39;re
swinging back to more generic active learning which can incorporate
discovery learning and other techniques so maybe where actually
getting somewhere.&lt;/p&gt;
&lt;p&gt;
The thing about discovery learning is that even when I was a kid, we
were in classes where some of our teachers developed experiential
units where student groups worked at their own pace through activities
that led them through learning a topic - discovery learning.&lt;/p&gt;
&lt;p&gt;
Now, this practice can be good but it&amp;#39;s also not &amp;#34;the way.&amp;#34; I read
posts and articles from acclaimed schools and teachers about how they
do everything using discovery learning. Then you look further. They&amp;#39;re
almost always in rich private schools with small classes and almost
unlimited resources. Yeah - try that every day in an overcrowded
under resourced public school.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Parsons Problems
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Let&amp;#39;s close with one more. Parsons problems - scrambled lines of code &lt;/p&gt;
&lt;p&gt;
Like code tracing and subgoal labeling, Parsons Problems appear to be
a useful teaching technique and like the former two, nobody has
claimed them to be the be all and end all - all are just tools in the
tool box for a teacher to use as appropraite.&lt;/p&gt;
&lt;p&gt;
Parsons problems though are also not new - they&amp;#39;re a CS take on
scrambled paragraphs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Final thoughts
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Now, just because these new ideas aren&amp;#39;t new doesn&amp;#39;t mean they&amp;#39;re
bad. My big complaint about the ones I don&amp;#39;t like is that they&amp;#39;re
mis-applied as a cure all not that they can&amp;#39;t be effective when used
appropriately.&lt;/p&gt;
&lt;p&gt;
The point is that these new ideas that you&amp;#39;ll hear about from your ed
professors or read in the research aren&amp;#39;t necessarily new.&lt;/p&gt;
&lt;p&gt;
To be honest, most teachers will get their best tools from their peer
group - fellow teachers, frequently more experienced ones or if
they&amp;#39;re lucky, In service or pre-service instructors who are in fact
experienced K12 teachers who are sharing their practices. This is as
opposed to when those teachers are employed to teach someone elses
canned curriculum.&lt;/p&gt;
&lt;p&gt;
In any event, I always get a kick out of seeing a &amp;#34;new&amp;#34; practice and
then thinking about how old it actually is - if you&amp;#39;ve got some to
share, please do.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Advent 2022 - day 3 - sets</title>
      <link>https://cestlaz.github.io/post/advent-2022-day03/</link>
      <pubDate>Sat, 03 Dec 2022 10:13:56 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2022-day03/</guid>
      <description>
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2022/day/3&#34;&gt;Day 3&lt;/a&gt; ended up being a quick one. That is, as long as your language
supports set operations. You can do it without set operations but it&amp;#39;s
easier if you&amp;#39;ve got them.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Part 1
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Input is a file of text where each line is an input.&lt;/p&gt;
&lt;p&gt;
You have to read each line, split it in half  and then find the common
letter between the left and right halves and then apply their scoring
rules on that letter.&lt;/p&gt;
&lt;p&gt;
For scoring, lower case letters are valued a=1, b=2 etc. and for upper
case, A=27, B=28 and so on.&lt;/p&gt;
&lt;p&gt;
For scoring, this is a nice opportunity to talk about ASCII values and
the relationship between characters and integers. For lower case
letters you can use the formula &lt;strong&gt;int(letter) - 97 + 1&lt;/strong&gt; where int(x)
returns the ASCII code for letter &lt;code&gt;x&lt;/code&gt;. The 97 is the value for &amp;#39;a&amp;#39; so
that will map the lower case letter to a value of  0 for &amp;#39;a,&amp;#39; 1 for &amp;#39;b,&amp;#39;
etc.. We add one becuase the question says to start with 1 for &amp;#39;a.&amp;#39;&lt;/p&gt;
&lt;p&gt;
For the upper case letters, we can use &lt;strong&gt;int(letter)-65 + 27&lt;/strong&gt; where 65
is the value for &amp;#39;A.&amp;#39; In this case, we add an offset of 27 since
that&amp;#39;s are lowest upper case score.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the clojure code but it would be similar in Python or other
languages:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;score [letter]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Character/isUpperCase&lt;/span&gt; letter)
    (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; (-  (int letter) (int &lt;span style=&#34;color:#e6db74&#34;&gt;\A&lt;/span&gt;)))
    (inc (-  (int letter) (int &lt;span style=&#34;color:#e6db74&#34;&gt;\a&lt;/span&gt;)))
    ))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
The processing of the data is also pretty straight forward. Here&amp;#39;s a
Clojure solution:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;parse-part1 [line]
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[size (/  (count line) &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
          left (take size line)
          right (drop size line)
          common (&lt;span style=&#34;color:#a6e22e&#34;&gt;set/intersection&lt;/span&gt; (set left) (set right))]
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;score&lt;/span&gt; (first common))))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Line 2&amp;#39;s Python equivalent would be &lt;code&gt;size = len(line)/2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
Line 3 takes the first half and stores it in left and line 4 drops the
first half and keeps the right hand side.&lt;/p&gt;
&lt;p&gt;
Line 5 uses Clojure&amp;#39;s set operations to find the letter in common.&lt;/p&gt;
&lt;p&gt;
To solve part 1 we just split the data, which starts as a long
string, split on newlines and then run the parse-part1 function
defined above on each line. We then use reduce to add up all the results.&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;part1 [data]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;str/split&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)
       (map  parse-part1)
       (reduce +)))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Full code can be found &lt;a href=&#34;https://github.com/zamansky/advent2022/blob/main/src/day03.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
A Python solution would look pretty similar. Java would be tricker for
beginners because they wouldn&amp;#39;t know about sets and using them
requires more overhead than either Clojure or Python. The problem can
still be solved by beginners. An easy, if inefficient way of finding
the intersection would be looping over all the characters in one
string and looking for it in the other.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Part two
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Part two was very similar. Instead of splitting each line in half, we
had to group entire lines by three.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the clojure code:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;part2 [data]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;str/split&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)
       (map set)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
       (map  &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(reduce set/intersection %))
       (map first)
       (map score)
       (reduce +)))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Instead of munging the data and then turning strings into sets, we
first use line 2 to transform the list of strings into a list of sets.&lt;/p&gt;
&lt;p&gt;
Then, we use (partition 3) in line 4. This groups the list 3 at a
time. Then, going through the rest of the lines&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;line 5 - find the intersection within the group fo 3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;line 6 - there will be one letter in the result, but we have to use
&lt;strong&gt;first&lt;/strong&gt; to extract the value since the result is a set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;line 7 - score all the letters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;line 8 - add them up&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
A nice little problem. With beginners, you get to talk about the ASCII
character relationship and if your language supports it, you can play
with sets.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2022 - Days 1 and 2</title>
      <link>https://cestlaz.github.io/post/advent-2022-day01-01/</link>
      <pubDate>Fri, 02 Dec 2022 13:59:06 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2022-day01-01/</guid>
      <description>
&lt;p&gt;
It&amp;#39;s &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt; season again. Every day a new two part programming
challenge and once again I&amp;#39;m taking part. At least until grading and
other end of term obligations end up eating my lunch.&lt;/p&gt;
&lt;p&gt;
I wasn&amp;#39;t planning on writing anything up but the first two days looked
like nice problems for CS1 or even CS0 students and since my friend
Steve was &lt;a href=&#34;https://github.com/scerruti/AoC2022&#34;&gt;writing up&lt;/a&gt; his take, I thought I&amp;#39;d at least comment on the
first two.&lt;/p&gt;
&lt;p&gt;
I also recorded a code through in Clojure which you can find at the
bottom of this post.&lt;/p&gt;
&lt;p&gt;
Even though I&amp;#39;m using Clojure, a similar approach can be taken in
languages like Python or Javascript. If you enjoy this type of
analysis please read Steve&amp;#39;s &lt;a href=&#34;https://github.com/scerruti/AoC2022&#34;&gt;posts&lt;/a&gt;. His approach is usually different
from mine as he&amp;#39;s working in Java and so is more OOP centric. I love
it when you can think about problems in different ways.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Day 1 - Calorie Counting
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Problem link: &lt;a href=&#34;https://adventofcode.com/2022/day/1&#34;&gt;&lt;a href=&#34;https://adventofcode.com/2022/day/1&#34;&gt;https://adventofcode.com/2022/day/1&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Here the input was lines of numbers with an extra blank linke
separating sets of inputs:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
1000
2000
3000

4000

5000
6000

7000
8000
9000

10000
&lt;/pre&gt;
&lt;p&gt;
Here, the first three numbers (1000,2000,3000) represent what the
first elf is carrying, 4000 the second elf, 5000, and 6000 the third,
etc..&lt;/p&gt;
&lt;p&gt;
The challenge was to figure out which elf carried the most.&lt;/p&gt;
&lt;p&gt;
A first year student might read a line at a time building a
sum. Whenever you see a blank line, see if that&amp;#39;s your largest sum so farand
if so, make a not of it.&lt;/p&gt;
&lt;p&gt;
In Python:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;sum = 0
bigsum  = 0
for line in open(&amp;#34;../data/day01.dat&amp;#34;).readlines():
    if line == &amp;#34;\n&amp;#34;:
        if sum &amp;gt; bigsum:
            bigsum = sum
        sum = 0
        continue
    sum = sum + int(line)

print(bigsum)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Another approach, the one I used, was to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Convert the input lines into a list by splitting on double newlines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert each list item into a list of numbers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sum each list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find the largest&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The video below shows this in Clojure, but in Python it might look
like this:   &lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;input = open(&amp;#34;../data/day01.dat&amp;#34;).read().strip().split(&amp;#34;\n\n&amp;#34;)
input = [x.split(&amp;#34;\n&amp;#34;) for x in input]
int_input = [ [int(x) for x in sublist] for sublist in input]
sums = [ sum(x) for x in int_input]
max(sums)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The nice thing here from the teaching point of view is that these
represent two very different approaches and there are probably more.&lt;/p&gt;
&lt;p&gt;
For part 2 you just had to add up the three largest elf loads. If you
used the second approach, instead of finding the largest number, you
can just sort the list and add up the biggest three.&lt;/p&gt;
&lt;p&gt;
The code for all of this in Clojure can be found &lt;a href=&#34;https://github.com/zamansky/advent2022/blob/main/src/day01.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Day 2 - Rock Paper Scissors
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Day 2 was a rock paper scissors problem. Input was a list of &amp;#34;moves:&amp;#34;&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
A Y
B X
C Z
&lt;/pre&gt;
&lt;p&gt;
The above says that in move 1, your opponent played &amp;#34;A&amp;#34; and you played
&amp;#34;Y,&amp;#34; in move two, your opponent &amp;#34;B&amp;#34; and you &amp;#34;X,&amp;#34; etc.&lt;/p&gt;
&lt;p&gt;
The moves meant:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Opponent Letter&lt;/th&gt;
&lt;th&gt;Your letter&lt;/th&gt;
&lt;th&gt;Means&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Rock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Paper&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Scissors&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Each turned was scored as follows:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;Points&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;You win&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You tie&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You lose&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Your score for a turn was the results points plus a 1 if you played
Rock, 2 if you played Paper, and 3 if you played Scissors.&lt;/p&gt;
&lt;p&gt;
The part 1 solution had you tracing through a game and figuring out
the score.&lt;/p&gt;
&lt;p&gt;
What&amp;#39;s nice about this problem is that it can be solved by a very raw
beginner with a not too long set of if statements.&lt;/p&gt;
&lt;p&gt;
You can also, however, look at more interesting approaches. &lt;/p&gt;
&lt;p&gt;
First, a student might notice that the moves are &amp;#34;in order&amp;#34; in that
each letter, or move, loses to the one after it. That is, Rock loses
to Paper, Paper loses to scissors, and wrapping around, scissors loses
to rock.&lt;/p&gt;
&lt;p&gt;
Then, they might see that they can assign a numeric value to each
move:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Opponent Letter&lt;/th&gt;
&lt;th&gt;Your letter&lt;/th&gt;
&lt;th&gt;Means&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Rock&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Paper&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Scissors&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Finally, they might notice that if they find the difference between
your move and your opponent&amp;#39;s move, you&amp;#39;ll get:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;align-right&#34;&gt;Difference&lt;/th&gt;
&lt;th&gt;result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;td&gt;tie - same move&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;td&gt;You win - you&amp;#39;re the &amp;#34;next&amp;#34; move&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;td&gt;You lose&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
You can also either deal with mod to wrap around or you can put in a
couple of negative values for the difference on your chart.&lt;/p&gt;
&lt;p&gt;
For part 1, my solution basically did what I just described. Make a
look up table to map the letters to values, find the difference, then
look up the points awarded from another look up table.&lt;/p&gt;
&lt;p&gt;
The Clojure code can be found &lt;a href=&#34;https://github.com/zamansky/advent2022/blob/main/src/day02.clj&#34;&gt;here&lt;/a&gt; and the video is embedded below.&lt;/p&gt;
&lt;p&gt;
For part 2, things were a bit tricker but also more interesting. Now,
your &amp;#34;move&amp;#34; of X,Y, or Z didn&amp;#39;t mean Rock, Paper or Scissors. The
letters now said that depending on your letter you had to select a
move so that you would either win, lose or draw based on this table:&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Your letter&lt;/td&gt;
&lt;td&gt;Choose a move that results in&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;You losing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;A tie&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;You win&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
This part was a reduction - look at your letter and figure out what to
replace it with - A, B, or C based on the above chart and then just do
what you did in part 1.&lt;/p&gt;
&lt;p&gt;
Here, we notice that we tie if we choose the same move as our
opponent, we win if we choose the &amp;#34;next&amp;#34; move and we loose if we
choose the move that&amp;#39;s two away (mod 3 to deal with the wraparound).&lt;/p&gt;
&lt;p&gt;
The clojure code also &lt;a href=&#34;https://github.com/zamansky/advent2022/blob/main/src/day02.clj&#34;&gt;here&lt;/a&gt; and the walkthrough below.&lt;/p&gt;
&lt;p&gt;
Hope you all enjoyed this.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/80so4H3mSCM&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning a new language - part 2 - Rust</title>
      <link>https://cestlaz.github.io/post/learn-new-language-2/</link>
      <pubDate>Tue, 29 Nov 2022 08:59:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learn-new-language-2/</guid>
      <description>&lt;p&gt;
Last time, I wrote about frustrations in trying to &lt;a href=&#34;https://cestlaz.github.io/post/learn-new-language/&#34;&gt;motivate myself to
learn ocaml&lt;/a&gt;. I could see the strong points but given that I&amp;#39;ve been
using Clojure now for a while, it didn&amp;#39;t really hold any value added
for me in my current situation.&lt;/p&gt;
&lt;p&gt;
Next, I thought I&amp;#39;d explore Rust. On the non-functional style, my go to
languages have always been Python for scripting and small things and C
professionally. I also used and taught C++ and Java. I always loved
C&amp;#39;s minimalism but it was pretty bare bones and Java and C++ while
more modern both also have their warts so it made sense to see if
there was a language I&amp;#39;d like to use instead of any of those three.&lt;/p&gt;
&lt;p&gt;
A number of years ago, I decided to explore Go for this. Go had some
nice features. It didn&amp;#39;t do a full blown object oriented thing but
rather a more lightweight way of defining structures and binding
functionality to structures. I guess like interfaces. Since I&amp;#39;m not a
big OOP person but did like the occasional object abstraction this was
great. I also loved goroutines for concurrency. On the other hand, I
didn&amp;#39;t like the lack of functional goodness so ultimately I stopped
pursuing Go.&lt;/p&gt;
&lt;p&gt;
This time, it was Rust&amp;#39;s turn. Here&amp;#39;s a list of a few of the things
that drew me to Rust:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Good learning resources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Good dev experience under Emacs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static typing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;immutable by default&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supports the other functional goodness that I like&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I just started playing and so far I like it. In addition to the above
I&amp;#39;m also seeing some other positives. It has pattern matching which I
mentioned in my previous post and the object model looks more like Go
than like C++ or Java so that&amp;#39;s a plus.&lt;/p&gt;
&lt;p&gt;
Another big potential positive is Rust&amp;#39;s concept of ownership. An
informal way of thinking about it is that it&amp;#39;s how Rust deifnes what
can access memory. In Rust,  if you have code like this (lifted from
the Rust Book):&lt;/p&gt;
&lt;div class=&#34;src src-rust&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1;

    println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}, world!&amp;#34;&lt;/span&gt;, s1);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
you&amp;#39;ll get an error. Once you assign s1 to s2 then s2 owns the memory
with the string &amp;#34;hello&amp;#34; so when you try to access it, you get an
error. Of course, Rust has ways of dealing with this including 
explicitly declared mutability and references and maybe other things I
haven&amp;#39;t gotten to yet so it isn&amp;#39;t really a problem. I can also see it
as being a really strong way of encouraging the writing of safe
programs.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m pretty early on in the journey - I though I might try Advent of
code this year in Rust but I don&amp;#39;t think I&amp;#39;ll be sufficiently up to
speed on it yet but we&amp;#39;ll see. In any event, it seems to be a very
cool language and a strong C++ or Java alternative.&lt;/p&gt;
&lt;p&gt;
A strong alternative at least in terms of using. For teaching, that&amp;#39;s
another story. For me, learning hasn&amp;#39;t been a problem since I&amp;#39;ve been
around the block a few times but I could see the language being a
challenge for beginners. Lot&amp;#39;s of cognitive overhead for the ownership
thing as well as general scope rules and the way mutability works. I
think all these features are great for the language but I suspect that
it wouldn&amp;#39;t fly very well in a CS0 course.&lt;/p&gt;
&lt;p&gt;
So, I&amp;#39;m feeling that Rust&amp;#39;s a go and I look forward to continuing to
explore the language. If you want to check it out, start here:
&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;https://www.rust-lang.org/&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning a new language - part 1 - functional</title>
      <link>https://cestlaz.github.io/post/learn-new-language/</link>
      <pubDate>Mon, 21 Nov 2022 17:34:28 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learn-new-language/</guid>
      <description>&lt;p&gt;
Now that I&amp;#39;ve done posting about &lt;a href=&#34;https://cestlaz.github.io/post/retiring-1-why/&#34;&gt;why I&amp;#39;m retiring&lt;/a&gt; we can get back to
our usual blogging.&lt;/p&gt;
&lt;p&gt;
I haven&amp;#39;t really done anything technical over the past couple of
year. The most programming I did in the past 18 months was a
halfhearted effort at the Advent of Code 2021 event last December. I
thought I&amp;#39;d see about picking up a new language to change that. In
doing so, I was reminded of some of my resistances to learning a new
language and how I&amp;#39;ve seen similar from self taught students coming
into my classes.&lt;/p&gt;
&lt;p&gt;
Of course my situation is different - I&amp;#39;m doing this wholly by choice
and once a student is in a class they&amp;#39;ve got to use the prescribed
tool.&lt;/p&gt;
&lt;p&gt;
The contenders on the functional side were Haskell and OCaml and on the
other side, mostly Rust.&lt;/p&gt;
&lt;p&gt;
Today, we&amp;#39;ll talk about the functional side. I decided to look at
OCaml. I had briefly looked at it well over a decade ago but barely
scratched the surface. Haskell I played with a little more deeply but
not much. I decided on OCaml because it was supposed to be more real
world and, to be honest, I get turned off by some of the holier than
though purely functional talk that sometimes occurs.&lt;/p&gt;
&lt;p&gt;
Funny thing is that I&amp;#39;ve had a really hard time getting going - so
much so that I decided that for now I&amp;#39;d explore Rust.&lt;/p&gt;
&lt;p&gt;
So, what&amp;#39;s going on?&lt;/p&gt;
&lt;p&gt;
OCaml looks to have some nice features. It&amp;#39;s functional and I&amp;#39;m a fan
there and it&amp;#39;s also supposed to be pragmatic - you can get real world
stuff done with it. It&amp;#39;s also statically typed which overall I think
is a good thing and it has cool features like pattern matching.&lt;/p&gt;
&lt;p&gt;
For pattern matching, I&amp;#39;m not talking about things like regex or
matching characters in a string but rather something like a really
cool and powerful case or switch statement. Even that description,
though is not doing it justice.&lt;/p&gt;
&lt;p&gt;
I think my problem is that I already am comfortable and enjoy
programming in Clojure. Clojure is functional and pragmatic but while
Clojure doesn&amp;#39;t have pattern matching built in but there is a library
that basically accomplishes the same thing. As to the type system,
Clojure is dynamically typed and while that would be an issue if I
were working on large real projects and/or on a team, I&amp;#39;m just writing
little toys by myself. If I want stronger typing, there are ways of
doing that in Clojure. True, it&amp;#39;s not required but working by myself,
I have that option, should I choose. It&amp;#39;s not the same - I know but as
I said, I&amp;#39;m not doing anything big, important or with other people
right now.&lt;/p&gt;
&lt;p&gt;
So, basically, every time I try to dive in to OCaml, I end up feeling
that &amp;#34;I can already do that and do it better in Clojure.&amp;#34; I&amp;#39;m guessing
I&amp;#39;d feel the reverse had I started on the OCaml side. &lt;/p&gt;
&lt;p&gt;
This has happened to me before. I was an early Python adopter feeling
that it was a huge improvement over Perl. A while later, Ruby came out
and shortly after that, Ruby on Rails became a thing. Every time I
looked into Ruby I had to stop - I could already do and do better in
Python. By then, there were enough tools to compete with Rails even
though they weren&amp;#39;t as mainstream and overall I preferred Python. I
never did end up learning Ruby.&lt;/p&gt;
&lt;p&gt;
I felt a similar sluggishness when I went from C++ to Java - something
I had to do because of the AP Exam change but I pushed through since I
had to teach it and ultimately, I&amp;#39;ve learned to appreciate the good
and curse the bad of both languages.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve seen similar blocks or resistance from who&amp;#39;ve had prior
programming experiences over the years. From students who seemed
to be taught more &amp;#34;the language&amp;#34; rather than CS using the language. I
know that&amp;#39;s a nebulous thing to say but I think some of you will catch
my drift. It&amp;#39;s subtleties like saying &amp;#34;okay, we&amp;#39;re repeating this
process, here&amp;#39;s how we do it in language such and such&amp;#34; vs &amp;#34;here&amp;#39;s how
we repeat this process period&amp;#34; and show the language construct.&lt;/p&gt;
&lt;p&gt;
My former math chairman at Stuy said he once, back in the 80s asked Marvin
Minsky what they should be teaching for CS in High School. Minsky
said, and I paraphrase, &amp;#34;nothing, you&amp;#39;ll only mess them up. At most
teach them to type.&amp;#34; Of course that was a different time and I
&lt;strong&gt;strongly&lt;/strong&gt; disagree with that statement but I do think we have to look
at how students entering our classes are or are not prepared and
adjust accordingly. &lt;/p&gt;
&lt;p&gt;
So, in the end, it&amp;#39;s back to Clojure for me on the functional side and
I&amp;#39;ll try to do an OCaml dive sometime in the future.&lt;/p&gt;
&lt;p&gt;
Fortunately, I&amp;#39;m having an easier time getting in to Rust. More about
that next time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retiring part 3 - What&#39;s Next</title>
      <link>https://cestlaz.github.io/post/retiring-3-whats-next/</link>
      <pubDate>Wed, 09 Nov 2022 19:40:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/retiring-3-whats-next/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Links to the three posts in this series:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;If you&amp;#39;re seeing this before the previous two posts, I&amp;#39;d encourage you
to read post 1 and 2 first.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Post 1: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-1-why/&#34;&gt;Why I&amp;#39;m retiring&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 2: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-2-accomplishments/&#34;&gt;What was accomplished at Hunter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 3: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-3-whats-next/&#34;&gt;This post&lt;/a&gt;   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
As I said at the start of these three posts, I do want to stay in the
game. Maybe take a break and definately slow down but I still think
I&amp;#39;ve got something to contribute.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m writing this so that you can have it in the back of your mind in
case a great match appears either soon or somewhere down the road.&lt;/p&gt;
&lt;p&gt;
I think I posses a somewhat unique set of skills and experiences. A
thirty year teacher with a strong CS/Tech background, I&amp;#39;ve taken students
from blank slate to industry, created entire programs, and worked with
educators from early grades through college level.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve also worked as a software engineer and have remained in touch and
connected with the tech industry.&lt;/p&gt;
&lt;p&gt;
What might be appealing?&lt;/p&gt;
&lt;p&gt;
Not sure.&lt;/p&gt;
&lt;p&gt;
Probably not full time and since I&amp;#39;ll be collecting my pension it&amp;#39;ll
be about fit much more than money. Still, I&amp;#39;d never say never on the
right opportunity.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d love the opportunity to travel more - even if just in the
region. I think that&amp;#39;s my biggest regret is that Devorah and I really
never had the opportunity or took the time to see the country or
world.&lt;/p&gt;
&lt;p&gt;
Maybe if a company wants someone as a rep at conferences like all
those Ed Conference sponsors or who knows what else.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d also be open to longer gigs elsewhere - a month, a semester, or
even a year on an interesting project where we can get to know a new
community.&lt;/p&gt;
&lt;p&gt;
I know the big tech companies work with colleges to try to help them
do what I did with Daedalus at Hunter. Given that none of them have
people with the range of educational experiences and successes I
have, they could do far worse than engaging me to help with these
programs.&lt;/p&gt;
&lt;p&gt;
Maybe some colleges, universities, or governments have a side project
and they could use someone like me.&lt;/p&gt;
&lt;p&gt;
To be honest, I don&amp;#39;t know but figured this was a good way to get the
word out.&lt;/p&gt;
&lt;p&gt;
So, thanks for reading and keeping me in mind.&lt;/p&gt;
&lt;p&gt;
Now, back to our regular blogging program.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Links to the three posts in this series:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Post 1: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-1-why/&#34;&gt;Why I&amp;#39;m retiring&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 2: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-2-accomplishments/&#34;&gt;What was accomplished at Hunter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 3: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-3-whats-next/&#34;&gt;This post&lt;/a&gt;   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Retiring part 2 - Accomplishments</title>
      <link>https://cestlaz.github.io/post/retiring-2-accomplishments/</link>
      <pubDate>Wed, 09 Nov 2022 15:35:50 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/retiring-2-accomplishments/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Links to the posts in this series
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;If you&amp;#39;re reading this before the previous post, I&amp;#39;d recommend going
back and reading that one first. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Post 1: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-1-why/&#34;&gt;Why I&amp;#39;m retiring&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 2: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-2-accomplishments/&#34;&gt;This post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 3: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-3-whats-next/&#34;&gt;What I think I&amp;#39;ll be looking for next&lt;/a&gt;   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I think I&amp;#39;ve carved out a somewhat unique career. Never set out to be
a teacher and a couple of different turns here or there and things
could have been very different. When I started teaching, I thought I&amp;#39;d
probably, if anything  become a math chair and that was actually the
plan at Stuy until Richie Rothenberg, the math chair at the time
unexpectedly passed away in the late nineties. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Pre Hunter recap
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Just a quick recap. I started my career as a Programmer Analyst at
Goldman Sachs back in the day. I&amp;#39;d say Software Engineer but that
title didn&amp;#39;t exist back then. From there I went into teaching for two
decades, mostly at Stuyvesant.&lt;/p&gt;
&lt;p&gt;
At Stuyvesant I built the CS program, created classes, trained teachers and
shepherded hundreds, perhaps thousands of students towards tech
careers. My continued relationships with these former students left me
in a unique position as someone with strong CS chops, strong teaching
and education chops along with professional programming experience and strong ties
to the tech industry.&lt;/p&gt;
&lt;p&gt;
During this time, I played my part in getting the
ball rolling for K12 CS Ed. Certainly at Stuy but I&amp;#39;d like to think
beyond it as well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
The Hunter chapter
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Almost seven years ago, I came over to Hunter to work on two major
projects. One was to develop and run an undergraduate honors computer
science program at the college and the other as to create and run
computer science teacher certification programs.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Undergraduate CS Honors
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Prior to my joining Hunter, they already had a long established CS
department and program. It was (and is) both as good as any other
program out there and as bad. There were though, a few particular
issues. First, Hunter&amp;#39;s program was either unknown to high school
students or had a poor reputation due to the misconception that a
liberal arts school can&amp;#39;t do good CS and, at the tech company end,
Hunter was a total unknown. &lt;/p&gt;
&lt;p&gt;
Hunter&amp;#39;s program was a typical college CS program in that it did a
great job preparing strong applicants for grad school but did nothing
to prepare them for tech careers and there was no connection with the
NY Tech industry.&lt;/p&gt;
&lt;p&gt;
When I started, top tech companies never recruited at Hunter and most
Hunter students never even applied for internships prior to
graduating - they didn&amp;#39;t know they were supposed to.&lt;/p&gt;
&lt;p&gt;
Over the past 7 years there have been tremendous changes.&lt;/p&gt;
&lt;p&gt;
My first cohort had 8 students. My latest has 64. My honors program and Hunter CS in general is
now a known CS destination in many NY high schools. Applications have
grown from around 50 to many hundreds and each year I field more and
more calls of students trying to decide between my program and other
top CS programs - I win some, I lose some.&lt;/p&gt;
&lt;p&gt;
On the exit side, my Daedalus students regularly end up at top tech
companies and the overall profile of Hunter CS is much greater and
more positive in the tech world.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve created new classes that integrate software engineering practices
with traditional CS and built many unique partnerships and programs over
the past 7 years.&lt;/p&gt;
&lt;p&gt;
My trouble is that the Daedalus program is in full swing. It has to be
maintained but the job is basically done. At the same time, I don&amp;#39;t
have the ability to get the reforms I&amp;#39;ve brought to my program to the
greater Hunter CS population. Sure, I&amp;#39;ve gotten some initiatives
started that are available to all Hunter students but a lot of the
core stuff that I&amp;#39;ve worked into my courses are only available to the
Daedalus students and I don&amp;#39;t have a way of changing that.&lt;/p&gt;
&lt;p&gt;
So, I think I&amp;#39;ve done what I can do. The original goal was to create
this honors program and I think we&amp;#39;ve gone well beyond. Hunter, and
Daedalus in particular, has a higher profile with high schools and
employers and Daedalus students get the best of CS, the practical
software engineering skills they&amp;#39;ll need and unique partnerships with
the tech community.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Teacher Certification
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
My other major hat was on the K12 CS teacher side. First we had to
lobby the state to create the certification. I visited Albany a number
of times and spoke to my share of Regents but the real heavy lifting
went to Hunter&amp;#39;s President and the Dean of the Ed school.&lt;/p&gt;
&lt;p&gt;
Meanwhile, I created our masters and certificate programs while
doing my part in the whole K12 CS effort. I created new classes and
worked with some of my old teaching pals from Stuy to get ready to run
the program once the state approved everything. &lt;/p&gt;
&lt;p&gt;
Three years ago everything got really rolling. Hunter had the first active
certificate and masters programs in the state. Thanks to the generous
support of Gotham Gives, we were able to start a cohort of 21 working
teachers towards CS certification. They were joined by 2 masters
students.&lt;/p&gt;
&lt;p&gt;
A year later, New York State had its first certified CS teachers. &lt;/p&gt;
&lt;p&gt;
The following year, again with support from Gotham Gives, this time
joined by Google, we started another 24 working teachers along with 5
more masters students.&lt;/p&gt;
&lt;p&gt;
Now in our third cohort we&amp;#39;ve got another 56 working through the
programs.&lt;/p&gt;
&lt;p&gt;
By the time our third year ends, we&amp;#39;ll have around 100 certified CS
teachers in New York City.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m equally proud of the fact that we&amp;#39;ve got five teachers from the
Fingerlakes region in our program.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been pretty vocal over the years as to what I think a good CS
teacher looks like and I&amp;#39;m super proud that our brand of CS teaching
can now be found across the city and in fact across the state.&lt;/p&gt;
&lt;p&gt;
If you
think about the number of students these teachers reach each year,
that&amp;#39;s pretty amazing.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m equally proud of the fact that these cohorts are still in touch
and forming a new community of CS teachers in the city and state.&lt;/p&gt;
&lt;p&gt;
Now that we&amp;#39;re rolling, what&amp;#39;s next? The program needs to continue to
run but I don&amp;#39;t see major changes. There are more things to get done
at Hunter and in the state. Things like getting the state to separate
HS from early grades in terms of certification and integrating some CS
teacher prep in our elementary school programs but, right now, I don&amp;#39;t
see a path for the former and don&amp;#39;t have the energy for the latter.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
Other hats
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
I&amp;#39;ve also done a number of other one offs or side projects while at
Hunter. Some of them have been:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I was on the executive committe and a lead author in creating the
NY State K12 CS standards. Something I find ironic since I&amp;#39;m not a
fan of &amp;#34;state standards.&amp;#34;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I mentioned earlier that I was a big part of Hunter winning and
administering the CUNY2X grant. Got to work with some great people
and that whole grant was huge in helping move the needle on Hunter
CS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I was also fortunate enough to work on a project funded by the
Robin Hood foundation on CS in the primary grades. It also allowed
me to work with some great people while dipping my toes in CS Ed
research and early grade work. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prior to Covid we were also well on our way in developing a nice
little K12 CS teacher community hosting monthxly meetups at tech
companies like Google and Digital Ocean.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
So, there it is, the major initiatives I&amp;#39;ve been working on at Hunter
and what I think I&amp;#39;ve accomplished. I&amp;#39;m proud of the work and in all
cases I think we went farther than we originally set out for.&lt;/p&gt;
&lt;p&gt;
What&amp;#39;s next? I&amp;#39;m not entirely sure. I&amp;#39;ll share some thoughts in my
next post. I hope all my friends read it and keep an ear open if the
right opportunity presents itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
Links to the posts in this series
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Post 1: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-1-why/&#34;&gt;Why I&amp;#39;m retiring&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 2: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-2-accomplishments/&#34;&gt;This post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 3: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-3-whats-next/&#34;&gt;What I think I&amp;#39;ll be looking for next&lt;/a&gt;   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>After 7 years at Hunter College and 33 in NYC public schools, time for a change.</title>
      <link>https://cestlaz.github.io/post/retiring-1-why/</link>
      <pubDate>Wed, 09 Nov 2022 06:43:04 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/retiring-1-why/</guid>
      <description>
&lt;p&gt;
I&amp;#39;ve been dropping mentions of this here and there for a while now but
I think it&amp;#39;s time to come out more formally -&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m planning on retiring from Hunter at the end of this Spring.&lt;/p&gt;
&lt;p&gt;
This doesn&amp;#39;t mean getting out of the CS or CS Ed game entirely - I
could stay on in a part time capacity and, after some decompression I
think I still have things to offer but the plan is retire, collect my
pension, and then see where I can continue to be contribute to the
Ed/CS Ed scene. &lt;/p&gt;
&lt;p&gt;
Why now? Largely burnout but there are a number of reasons. I&amp;#39;ll talk
about them below.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m also posting this with two other posts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;One talking about what I feel I&amp;#39;ve accomplished here at Hunter (&lt;a href=&#34;https://cestlaz.github.io/post/retiring-2-accomplishments/&#34;&gt;link&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another talking about the types of opportunities I think I&amp;#39;ll be
looking for next (&lt;a href=&#34;https://cestlaz.github.io/post/retiring-3-whats-next/&#34;&gt;link&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;#39;d love it if people could read those - particularly the last one.&lt;/p&gt;
&lt;p&gt;
For the rest of this post, why it&amp;#39;s time.&lt;/p&gt;
&lt;p&gt;
As I said, burnout is at the top of the list. What from? Largely from
having too much on my plate. When I started at Hunter, neither of my
programs existed. We started undergraduate CS honors (the Daedalus
program) the following fall and that grew at a consistent pace until
it was a full time job. The CS Ed program took longer to get running
since we needed to get the state to create the license and get our
programs through governance but once they started, that was another
full time job. Add to that the assorted other responsibilities that
ended up on my plate and I&amp;#39;ve been doing two to three full time jobs
for the past three or so years - not sustainable. For the burnout,
Covid and the state of the world certainly hasn&amp;#39;t helped.&lt;/p&gt;
&lt;p&gt;
What does burnout mean? Well, I&amp;#39;m not enjoying my classes. Sure, there
are fun times but I don&amp;#39;t get up in the morning looking forward to it
and in class, I&amp;#39;m as likely to get annoyed by something as not. Part
of this is that I have students who refuse to mask - something I see
as a direct sign of disrespect but there&amp;#39;s more. All in all, this is a
good sign that it&amp;#39;s time to get out or at least take a break.&lt;/p&gt;
&lt;p&gt;
Another factor, and a big one is that I&amp;#39;ve accomplished everything
I&amp;#39;ve set out to accomplish at Hunter and then some. I&amp;#39;m normally not a
&amp;#34;goal guy,&amp;#34; I&amp;#39;m more about process and journey but in the case of
Hunter, I also had a set of goals and I&amp;#39;ve gotten there and
beyond. There are new challenges at Hunter but not challenges that I&amp;#39;m
as excited about. More on this in my accomplishment post.&lt;/p&gt;
&lt;p&gt;
Finally, I&amp;#39;ve got health and family reasons. Health isn&amp;#39;t anything
immediate but I do have indications of heart disease. Combine that
with the fact that my mom died when she was 72 and my dad at 44 and
well, now that I&amp;#39;m 55, if we can financially handle it, maybe it&amp;#39;s
time to give more time to myself and my family.&lt;/p&gt;
&lt;p&gt;
Finally, Devorah&amp;#39;s also retiring - she put in the paperwork the other day.&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s why.&lt;/p&gt;
&lt;p&gt;
For those of you who read this blog, I&amp;#39;d love for you to keep your
ears open for potential next steps so I&amp;#39;d love for you to read my next
post on what I think I&amp;#39;ve accomplished at Hunter and what I bring to
the table and the one after that where I&amp;#39;ll muse about what I think I
might be able to get excited about and where I think I might be able
to contribute.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Links to this post  and the other two posts:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Post 1: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-1-why/&#34;&gt;This post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 2: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-2-accomplishments/&#34;&gt;Recap of what was accomplished at Hunter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 3: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-3-whats-next/&#34;&gt;What I think I&amp;#39;ll be looking for next&lt;/a&gt;   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Should college be career prep</title>
      <link>https://cestlaz.github.io/post/should-cs-be-practical/</link>
      <pubDate>Mon, 07 Nov 2022 11:47:50 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/should-cs-be-practical/</guid>
      <description>&lt;p&gt;
So, in some of the social platform discussion on my &lt;a href=&#34;https://cestlaz.github.io/post/new-major/&#34;&gt;last post&lt;/a&gt;, the
issue of the practicality of a college education came up. Should
college teach practical job skills or should it be for some more
abstract purpose - learning for learning sake or if one would be a bit
presumptions learning how to think.&lt;/p&gt;
&lt;p&gt;
Way back when going to college was not the norm. Most went from HS to
workforce and even in HS you might have the &amp;#34;academic&amp;#34; track that
prepared you for college, &amp;#34;vocational&amp;#34; that was job prep like
automotive or regular which was neither extreme. Sure, that system had
a host of problems but since the end goal wasn&amp;#39;t college for most, it
freed college from the need for being practical. College could just be
about learning non-useful stuff.&lt;/p&gt;
&lt;p&gt;
Nowadays kids don&amp;#39;t have the luxury of not going to college. It&amp;#39;s
expected in our society. Spend 4 years and oodles of dollars to get
the piece of paper and you can get a job that years ago only required
the HS version of the paper.&lt;/p&gt;
&lt;p&gt;
This, of course, leads to many rather large and hairy questions none
of which I will address here.&lt;/p&gt;
&lt;p&gt;
What I will address concerns my little CS corner of the world.&lt;/p&gt;
&lt;p&gt;
In commenting on my post, some people talked about college faculty
they know and how those faculty members refuse to teach or use
anything that might remotely be useful to kids in terms of
career. They feel it&amp;#39;s beneath them and that they serve a higher
academic purpose. I don&amp;#39;t doubt those comments - I know plenty of
college faculty who feel this very way.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll agree that college shouldn&amp;#39;t strictly be a jobs program but the
nice thing about CS is that you &lt;strong&gt;can&lt;/strong&gt; teach practical skills and job
skills within the context of a traditional academic CS degree. Add in
the reality that most CS majors don&amp;#39;t want to go to grad school and
you can redesign the major to do even more for the majority of
students.&lt;/p&gt;
&lt;p&gt;
How about programming languages and tools. Why not use a couple of
practical ones. This is not to say that the first language has to be
C++, Java, Python or similar but there&amp;#39;s no reason why a couple practical
languages shouldn&amp;#39;t be used. Sure, feel free  to use an esoteric
language or some professors pet project in a particular class and by
all means use the intro language that makes the most sense for your
situation but for a 4 year major, there&amp;#39;s no reason why students
shouldn&amp;#39;t walk away with a couple of languages that are widely used in
industry. Same for build tools and things like testing frameworks. I
use git and &lt;a href=&#34;https://github.com/doctest/doctest&#34;&gt;doctest&lt;/a&gt;. I&amp;#39;m not teaching a class in git or doctest, I&amp;#39;m
teaching software engineering techniques and testing as part of my CS1
classes. I have to use some tool as the platform on which to teach
these things so why not tools that they can also use outside of
school. It just makes sense. Sure, in terms of language, most colleges
seem to cover at least one of C++, Python, and Java but lag in terms
of the support concepts and tooling.&lt;/p&gt;
&lt;p&gt;
It reminds me about what I said in my earlier post about Intel
Assembly. At Stuy back in the 90s I taught a systems elective. It
wasn&amp;#39;t a programming course about Intel assembly. If it was, I&amp;#39;d just
do a bunch of random programming assignments in it. It was rather a
course about how the computer worked at a low level and we &lt;strong&gt;used&lt;/strong&gt;
Intel assembly as the tool.&lt;/p&gt;
&lt;p&gt;
You can&amp;#39;t do this everywhere in a CS curriculum but there are plenty
of places where you can. Do this, make sure there are some required
large project courses where students can learn to work in a group and
integrate technologies, introduce a couple of new electives, and all
of a sudden you can have a strong academic CS program that also does a
great job preparing students for the tech world beyond academia.&lt;/p&gt;
&lt;p&gt;
Some places are already doing this and others are trying but too many
are still caught in the past.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>